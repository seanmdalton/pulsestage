name: Security Scanning

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  pull-requests: write

jobs:
  semgrep:
    name: Semgrep SAST
    runs-on: ubuntu-latest
    container:
      image: semgrep/semgrep
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Semgrep
        run: |
          semgrep scan --config=auto \
            --config=p/ci \
            --config=p/typescript \
            --config=p/nodejs \
            --config=p/docker \
            --config=p/security-audit \
            --severity=ERROR \
            --severity=WARNING \
            --json \
            --output=semgrep-results.json \
            || true

      - name: Check for High/Critical findings
        run: |
          # Count HIGH and CRITICAL severity findings
          HIGH_COUNT=$(cat semgrep-results.json | jq '[.results[] | select(.extra.severity == "ERROR")] | length')
          
          echo "🔍 Semgrep Results:"
          echo "   High/Critical findings: $HIGH_COUNT"
          
          if [ "$HIGH_COUNT" -gt 0 ]; then
            echo "❌ Found $HIGH_COUNT high/critical security issues"
            cat semgrep-results.json | jq -r '.results[] | select(.extra.severity == "ERROR") | "  - \(.extra.message) (\(.path):\(.start.line))"'
            exit 1
          fi
          
          echo "✅ No high/critical security issues found"

      - name: Upload Semgrep results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: semgrep-results
          path: semgrep-results.json

  trivy-fs:
    name: Trivy Filesystem Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'json'
          output: 'trivy-fs-results.json'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'  # Don't fail yet, we'll check manually

      - name: Check for vulnerabilities
        run: |
          if [ -f trivy-fs-results.json ]; then
            VULN_COUNT=$(cat trivy-fs-results.json | jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL" or .Severity == "HIGH")] | length')
            
            echo "🔍 Trivy Filesystem Results:"
            echo "   High/Critical vulnerabilities: $VULN_COUNT"
            
            if [ "$VULN_COUNT" -gt 0 ]; then
              echo "❌ Found $VULN_COUNT high/critical vulnerabilities in dependencies"
              cat trivy-fs-results.json | jq -r '.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL" or .Severity == "HIGH") | "  - \(.PkgName)@\(.InstalledVersion): \(.Title) (Severity: \(.Severity))"' | head -20
              exit 1
            fi
            
            echo "✅ No high/critical vulnerabilities found"
          fi

      - name: Upload Trivy FS results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-fs-results
          path: trivy-fs-results.json

  trivy-image:
    name: Trivy Docker Image Scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: ['api', 'web']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker compose build ${{ matrix.image }}

      - name: Run Trivy image scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'image'
          image-ref: 'ama-app-${{ matrix.image }}:latest'
          format: 'json'
          output: 'trivy-${{ matrix.image }}-results.json'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'

      - name: Check for vulnerabilities
        run: |
          if [ -f trivy-${{ matrix.image }}-results.json ]; then
            VULN_COUNT=$(cat trivy-${{ matrix.image }}-results.json | jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL" or .Severity == "HIGH")] | length')
            
            echo "🔍 Trivy ${{ matrix.image }} Image Results:"
            echo "   High/Critical vulnerabilities: $VULN_COUNT"
            
            if [ "$VULN_COUNT" -gt 0 ]; then
              echo "❌ Found $VULN_COUNT high/critical vulnerabilities in ${{ matrix.image }} image"
              cat trivy-${{ matrix.image }}-results.json | jq -r '.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL" or .Severity == "HIGH") | "  - \(.PkgName)@\(.InstalledVersion): \(.Title) (Severity: \(.Severity))"' | head -20
              exit 1
            fi
            
            echo "✅ No high/critical vulnerabilities found in ${{ matrix.image }} image"
          fi

      - name: Upload Trivy image results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-${{ matrix.image }}-results
          path: trivy-${{ matrix.image }}-results.json

  sbom:
    name: Generate SBOM
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: ['api', 'web']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker compose build ${{ matrix.component }}

      - name: Install Syft
        uses: anchore/sbom-action/download-syft@v0

      - name: Generate SBOM
        run: |
          syft ama-app-${{ matrix.component }}:latest \
            -o spdx-json=sbom-${{ matrix.component }}.spdx.json \
            -o cyclonedx-json=sbom-${{ matrix.component }}.cyclonedx.json

      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ matrix.component }}
          path: |
            sbom-${{ matrix.component }}.spdx.json
            sbom-${{ matrix.component }}.cyclonedx.json

      - name: Display SBOM summary
        run: |
          echo "📦 SBOM Generated for ${{ matrix.component }}"
          echo "   Format: SPDX + CycloneDX JSON"
          PACKAGE_COUNT=$(cat sbom-${{ matrix.component }}.spdx.json | jq '.packages | length')
          echo "   Total packages: $PACKAGE_COUNT"

  security-summary:
    name: Security Scan Summary
    runs-on: ubuntu-latest
    needs: [semgrep, trivy-fs, trivy-image, sbom]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate summary
        run: |
          echo "# 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Semgrep
          if [ -f semgrep-results/semgrep-results.json ]; then
            SEMGREP_COUNT=$(cat semgrep-results/semgrep-results.json | jq '[.results[] | select(.extra.severity == "ERROR")] | length')
            echo "## Semgrep SAST" >> $GITHUB_STEP_SUMMARY
            echo "- High/Critical findings: $SEMGREP_COUNT" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Trivy FS
          if [ -f trivy-fs-results/trivy-fs-results.json ]; then
            TRIVY_FS_COUNT=$(cat trivy-fs-results/trivy-fs-results.json | jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL" or .Severity == "HIGH")] | length')
            echo "## Trivy Filesystem" >> $GITHUB_STEP_SUMMARY
            echo "- High/Critical vulnerabilities: $TRIVY_FS_COUNT" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Trivy Images
          for image in api web; do
            if [ -f "trivy-${image}-results/trivy-${image}-results.json" ]; then
              IMAGE_COUNT=$(cat "trivy-${image}-results/trivy-${image}-results.json" | jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL" or .Severity == "HIGH")] | length')
              echo "## Trivy Image: $image" >> $GITHUB_STEP_SUMMARY
              echo "- High/Critical vulnerabilities: $IMAGE_COUNT" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          # SBOM
          echo "## SBOM Generated" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ API component (SPDX + CycloneDX)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Web component (SPDX + CycloneDX)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "All security scans complete! Check artifacts for detailed results." >> $GITHUB_STEP_SUMMARY

