name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Extract changelog for version
        id: changelog
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          # Extract changelog section for this version
          sed -n "/## \[$VERSION\]/,/## \[/p" CHANGELOG.md | sed '$d' > release-notes.md
          # If empty, use a default message
          if [ ! -s release-notes.md ]; then
            echo "See [CHANGELOG.md](CHANGELOG.md) for details." > release-notes.md
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.version.outputs.tag }}
          body_path: release-notes.md
          draft: false
          prerelease: ${{ startsWith(steps.version.outputs.version, '0.') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-push-images:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: release
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        component: [api, web]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f2)
          echo "major=$MAJOR" >> $GITHUB_OUTPUT
          echo "minor=$MINOR" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push ${{ matrix.component }}
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.component }}
          push: true
          tags: |
            ghcr.io/${{ github.repository }}-${{ matrix.component }}:${{ steps.version.outputs.version }}
            ghcr.io/${{ github.repository }}-${{ matrix.component }}:${{ steps.version.outputs.major }}.${{ steps.version.outputs.minor }}
            ghcr.io/${{ github.repository }}-${{ matrix.component }}:${{ steps.version.outputs.major }}
            ghcr.io/${{ github.repository }}-${{ matrix.component }}:latest
          labels: |
            org.opencontainers.image.title=PulseStage ${{ matrix.component }}
            org.opencontainers.image.description=PulseStage ${{ matrix.component }} - Employee engagement platform
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=Apache-2.0
          cache-from: type=gha
          cache-to: type=gha,mode=max

  security-scan:
    name: Security Scan Released Images
    runs-on: ubuntu-latest
    needs: build-and-push-images
    permissions:
      contents: read
      packages: read
      security-events: write
    
    strategy:
      matrix:
        component: [api, web]
    
    steps:
      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/${{ github.repository }}-${{ matrix.component }}:${{ steps.version.outputs.version }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

