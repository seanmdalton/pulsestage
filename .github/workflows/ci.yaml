# Copyright 2025 Sean M. Dalton
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # API Tests with Coverage - DISABLED (TODO: Fix CI environment issues)
  # api-tests:
  #   name: API Tests
  #   runs-on: ubuntu-latest
  #   
  #   services:
  #     postgres:
  #       image: postgres:16-alpine
  #       env:
  #         POSTGRES_USER: app
  #         POSTGRES_PASSWORD: app
  #         POSTGRES_DB: ama_test
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #       ports:
  #         - 5432:5432
  #
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'
  #         cache: 'npm'
  #         cache-dependency-path: api/package-lock.json
  #
  #     - name: Install dependencies
  #       working-directory: ./api
  #       run: npm ci
  #
  #     - name: Run tests with coverage
  #       working-directory: ./api
  #       env:
  #         DATABASE_URL: postgresql://app:app@localhost:5432/ama_test
  #         ADMIN_KEY: test-admin-key
  #       run: npm run test:coverage
  #
  #     - name: Upload coverage report
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: api-coverage
  #         path: api/coverage/
  #         retention-days: 30
  #
  #     - name: Generate coverage summary
  #       working-directory: ./api
  #       run: |
  #         if [ -f coverage/coverage-summary.json ]; then
  #           echo "## API Test Coverage" >> $GITHUB_STEP_SUMMARY
  #           echo "" >> $GITHUB_STEP_SUMMARY
  #           echo '```json' >> $GITHUB_STEP_SUMMARY
  #           cat coverage/coverage-summary.json >> $GITHUB_STEP_SUMMARY
  #           echo '```' >> $GITHUB_STEP_SUMMARY
  #         fi

  # E2E Tests - DISABLED (TODO: Fix Docker Compose startup issues in CI)
  # e2e-tests:
  #   name: E2E Tests
  #   runs-on: ubuntu-latest
  #   
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'
  #
  #     - name: Start services
  #       run: |
  #         echo "Starting services..."
  #         docker compose up -d
  #         echo "Services started, checking status..."
  #         docker compose ps
  #         echo "Checking logs..."
  #         docker compose logs --tail=20
  #
  #     - name: Wait for services
  #       run: |
  #         echo "Waiting for database to be ready..."
  #         timeout 60 bash -c 'until docker compose exec -T db pg_isready -U app -d ama; do echo "DB not ready, waiting..."; sleep 3; done'
  #         echo "Database is ready!"
  #         
  #         echo "Checking API container status..."
  #         docker compose logs api --tail=50
  #         
  #         echo "Waiting for API to be ready..."
  #         timeout 180 bash -c 'until curl -f http://localhost:3000/health; do echo "API not ready, waiting..."; sleep 5; done'
  #         echo "API is ready!"
  #         
  #         echo "Waiting for Web to be ready..."
  #         timeout 60 bash -c 'until curl -f http://localhost:5173; do echo "Web not ready, waiting..."; sleep 2; done'
  #         echo "Web is ready!"
  #         
  #         echo "All services ready!"
  #
  #     - name: Install Playwright dependencies
  #       working-directory: ./web
  #       run: |
  #         npm ci
  #         npx playwright install --with-deps chromium
  #
  #     - name: Run E2E tests
  #       working-directory: ./web
  #       run: npm run test:e2e
  #
  #     - name: Upload Playwright report
  #       if: always()
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: playwright-report
  #         path: web/playwright-report/
  #         retention-days: 30
  #
  #     - name: Show docker logs on failure
  #       if: failure()
  #       run: |
  #         echo "=== Docker Compose Status ==="
  #         docker compose ps
  #         echo "=== API Logs ==="
  #         docker compose logs api
  #         echo "=== DB Logs ==="
  #         docker compose logs db
  #         echo "=== Redis Logs ==="
  #         docker compose logs redis
  #         echo "=== Web Logs ==="
  #         docker compose logs web

  # Semgrep SAST
  semgrep:
    name: Semgrep Security Scan
    runs-on: ubuntu-latest
    
    container:
      image: semgrep/semgrep

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Semgrep
        run: semgrep ci --config=p/ci --config=p/typescript --config=p/nodejs --json --output=semgrep-results.json || true
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

      - name: Check for High/Critical findings
        run: |
          if [ -f semgrep-results.json ]; then
            HIGH_COUNT=$(cat semgrep-results.json | jq '[.results[] | select(.extra.severity == "ERROR")] | length')
            
            echo "üîç Semgrep SAST Results:"
            echo "   High/Critical findings: $HIGH_COUNT"
            
            if [ "$HIGH_COUNT" -gt 0 ]; then
              echo "‚ùå Found $HIGH_COUNT high/critical security issues"
              cat semgrep-results.json | jq -r '.results[] | select(.extra.severity == "ERROR") | "  - \(.extra.message) (\(.path):\(.start.line))"' | head -20
              exit 1
            fi
            
            echo "‚úÖ No high/critical security issues found"
          fi

      - name: Upload Semgrep results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-results
          path: semgrep-results.json
          retention-days: 30

      - name: Generate Semgrep summary
        if: always()
        run: |
          echo "## Semgrep Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -f semgrep-results.json ]; then
            FINDINGS=$(cat semgrep-results.json | grep -o '"errors":\[.*\]' | wc -l)
            echo "**Findings**: $FINDINGS" >> $GITHUB_STEP_SUMMARY
          fi

  # Trivy Filesystem Scan
  trivy-fs:
    name: Trivy Filesystem Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner (filesystem)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'  # Don't fail the build, just report

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() && github.event_name == 'push'
        continue-on-error: true
        with:
          sarif_file: 'trivy-fs-results.sarif'

      - name: Run Trivy vulnerability scanner (filesystem - JSON)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'json'
          output: 'trivy-fs-results.json'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Check for Critical/High vulnerabilities in dependencies
        run: |
          if [ -f trivy-fs-results.json ]; then
            VULN_COUNT=$(cat trivy-fs-results.json | jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL" or .Severity == "HIGH")] | length')
            
            echo "üîç Trivy Filesystem Scan Results:"
            echo "   High/Critical vulnerabilities: $VULN_COUNT"
            
            if [ "$VULN_COUNT" -gt 0 ]; then
              echo "‚ùå Found $VULN_COUNT high/critical vulnerabilities in dependencies"
              cat trivy-fs-results.json | jq -r '.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL" or .Severity == "HIGH") | "  - \(.PkgName)@\(.InstalledVersion): \(.Title) (Severity: \(.Severity))"' | head -20
              exit 1
            fi
            
            echo "‚úÖ No high/critical vulnerabilities found in dependencies"
          fi

      - name: Upload Trivy results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-fs-results
          path: trivy-fs-results.json
          retention-days: 30

  # Build and Scan Docker Images
  build-and-scan:
    name: Build & Scan Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write
    
    strategy:
      matrix:
        service: [api, web]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./${{ matrix.service }}
          push: false
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner (image)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'image'
          image-ref: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          format: 'sarif'
          output: 'trivy-${{ matrix.service }}-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() && github.event_name == 'push'
        continue-on-error: true
        with:
          sarif_file: 'trivy-${{ matrix.service }}-results.sarif'
          category: trivy-${{ matrix.service }}

      - name: Run Trivy vulnerability scanner (image - JSON)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'image'
          image-ref: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          format: 'json'
          output: 'trivy-${{ matrix.service }}-image.json'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Check for Critical/High vulnerabilities
        run: |
          if [ -f trivy-${{ matrix.service }}-image.json ]; then
            VULN_COUNT=$(cat trivy-${{ matrix.service }}-image.json | jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL" or .Severity == "HIGH")] | length')
            
            echo "üîç Trivy ${{ matrix.service }} Image Scan:"
            echo "   High/Critical vulnerabilities: $VULN_COUNT"
            
            if [ "$VULN_COUNT" -gt 0 ]; then
              echo "‚ùå Found $VULN_COUNT high/critical vulnerabilities"
              cat trivy-${{ matrix.service }}-image.json | jq -r '.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL" or .Severity == "HIGH") | "  - \(.PkgName)@\(.InstalledVersion): \(.Title) (Severity: \(.Severity))"' | head -20
              exit 1
            fi
            
            echo "‚úÖ No high/critical vulnerabilities found"
          fi

      - name: Upload Trivy image scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-${{ matrix.service }}-image
          path: trivy-${{ matrix.service }}-image.json
          retention-days: 30

      - name: Install Syft for SBOM generation
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Generate SBOM
        run: |
          syft ${{ fromJSON(steps.meta.outputs.json).tags[0] }} \
            -o spdx-json=sbom-${{ matrix.service }}.spdx.json \
            -o cyclonedx-json=sbom-${{ matrix.service }}.cyclonedx.json

      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ matrix.service }}
          path: |
            sbom-${{ matrix.service }}.spdx.json
            sbom-${{ matrix.service }}.cyclonedx.json
          retention-days: 90

      - name: Display SBOM summary
        run: |
          PACKAGE_COUNT=$(cat sbom-${{ matrix.service }}.spdx.json | jq '.packages | length')
          echo "üì¶ SBOM Generated for ${{ matrix.service }}"
          echo "   Format: SPDX + CycloneDX JSON"
          echo "   Total packages: $PACKAGE_COUNT"
          echo "   Retention: 90 days"

      - name: Push Docker image
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v6
        with:
          context: ./${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Summary Job
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [semgrep, trivy-fs, build-and-scan]
    if: always()
    
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        continue-on-error: true

      - name: Generate CI Summary
        run: |
          echo "# üéØ CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Security Scanning" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Semgrep SAST | ${{ needs.semgrep.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Trivy Filesystem | ${{ needs.trivy-fs.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build & Scan Images | ${{ needs.build-and-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # SBOM Info
          echo "## üì¶ SBOM Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- API component (SPDX + CycloneDX)" >> $GITHUB_STEP_SUMMARY
          echo "- Web component (SPDX + CycloneDX)" >> $GITHUB_STEP_SUMMARY
          echo "- Retention: 90 days" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Build Info" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "**Note**: API/E2E tests work locally but have CI environment issues (TODO: Fix)" >> $GITHUB_STEP_SUMMARY

