{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PulseStage","text":"<p>Open-source Q&amp;A Platform for Town Halls and All-Hands</p> <p> </p> <p>PulseStage helps teams capture questions, surface what matters with up-votes, and publish clear answers\u2014then present it all live. Built as a full-stack AMA-style app with multi-team spaces and role-based controls, it's designed to increase employee engagement and organizational transparency.</p>"},{"location":"#why-pulsestage","title":"Why PulseStage?","text":"<ul> <li>Up-vote\u2013only questions to reduce noise and highlight priorities  </li> <li>Team-based organization for different departments or forums  </li> <li>Role-based moderation (viewer, member, moderator, admin, owner)  </li> <li>Advanced search with full-text search, filters, and date ranges</li> <li>Moderation tools - Pin, freeze, bulk operations, and analytics</li> <li>Presenter mode for leadership meetings and all-hands  </li> <li>Tagging system for organizing and categorizing questions</li> <li>Real-time updates via Server-Sent Events (SSE)</li> <li>Audit logging for compliance and security</li> <li>Exports (CSV/JSON) for follow-ups and accountability  </li> <li>Self-hostable with Docker (Postgres + Redis), open source (Apache-2.0)</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Get PulseStage running in under 5 minutes:</p> <pre><code>git clone https://github.com/seanmdalton/pulsestage.git\ncd pulsestage\n./setup.sh\ndocker compose up\n</code></pre> <p>Visit http://localhost:3000 to start using PulseStage!</p> <p>For detailed setup instructions, see the Installation Guide.</p>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#multi-team-organization","title":"\ud83c\udfe2 Multi-Team Organization","text":"<ul> <li>Organize questions by Engineering, Product, People, General teams</li> <li>Easy team switching with question counts</li> <li>Team management through Admin panel</li> <li>Shareable URLs like <code>/engineering/open</code> or <code>/product/answered</code></li> </ul>"},{"location":"#question-management","title":"\u2753 Question Management","text":"<ul> <li>Anonymous question submission with team assignment</li> <li>Full-text search with prefix matching (e.g., \"mob\" finds \"mobile\")</li> <li>Advanced filters: tags, date ranges, status, team</li> <li>Upvote system with protection against self-upvoting</li> <li>Full-screen viewing for long questions and answers</li> <li>Status tracking (Open and Answered)</li> <li>Tag-based organization</li> </ul>"},{"location":"#role-based-access-control","title":"\ud83d\udc65 Role-Based Access Control","text":"<ul> <li>Viewer: Browse questions anonymously, upvote</li> <li>Member: Submit and upvote questions</li> <li>Moderator: Answer questions, tag, pin, freeze, present (team-scoped)</li> <li>Admin: Full access including exports, audit logs, and team management</li> <li>Owner: Complete control including user management</li> </ul>"},{"location":"#moderation-tools","title":"\ud83d\udccc Moderation Tools","text":"<ul> <li>Pin questions to highlight important topics</li> <li>Freeze questions to lock them from further interaction</li> <li>Bulk operations - Tag, pin, freeze, or delete multiple questions at once</li> <li>Moderation queue - Dedicated interface with comprehensive filters</li> <li>Analytics dashboard - Track moderator performance and activity</li> <li>Quick actions - Pin \ud83d\udccc, Freeze \u2744\ufe0f, Answer \ud83d\udcac buttons on each question</li> </ul>"},{"location":"#modern-user-experience","title":"\ud83c\udfa8 Modern User Experience","text":"<ul> <li>Beautiful, responsive design with dark mode</li> <li>Real-time updates via Server-Sent Events (SSE)</li> <li>Presentation mode optimized for large displays with live tag updates</li> <li>Debounced search with instant feedback</li> <li>Profile management with favorite teams</li> <li>Persistent state across browser windows</li> </ul>"},{"location":"#security-compliance","title":"\ud83d\udd12 Security &amp; Compliance","text":"<ul> <li>Comprehensive audit logging (all admin/mod actions tracked)</li> <li>Team-scoped permissions with RBAC enforcement</li> <li>Tenant isolation for multi-tenancy</li> <li>Session-based authentication with HttpOnly cookies</li> <li>CSRF protection on all state-changing endpoints</li> <li>Security headers (Helmet, CSP, HSTS, X-Frame-Options)</li> <li>Rate limiting on all endpoints</li> <li>MDN HTTP Observatory integration for security validation</li> </ul>"},{"location":"#technology-stack","title":"Technology Stack","text":"<ul> <li>Frontend: React 19, TypeScript, Tailwind CSS, Vite</li> <li>Backend: Node.js 24 LTS, Express, TypeScript</li> <li>Database: PostgreSQL 16 with Prisma ORM, full-text search (GIN indexes)</li> <li>Cache: Redis 7 for rate limiting and session storage</li> <li>Testing: Vitest (208 tests), Playwright E2E, MDN HTTP Observatory</li> <li>Security: Helmet, CSRF protection (csrf-csrf), Content Security Policy</li> <li>Deployment: Docker Compose with multi-stage builds</li> <li>CI/CD: GitHub Actions with Semgrep (SAST), Trivy (security scanning), SBOM generation</li> </ul>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>Getting Started - Installation and first steps</li> <li>User Guide - How to use PulseStage</li> <li>Admin Guide - Managing teams, users, and settings</li> <li>Architecture - Technical design and decisions</li> <li>Security - Security features and best practices</li> <li>API Reference - REST API documentation</li> <li>Development - Contributing and local development</li> </ul>"},{"location":"#license","title":"License","text":"<p>Licensed under the Apache License, Version 2.0. See LICENSE for details.</p>"},{"location":"#support","title":"Support","text":"<ul> <li>\ud83d\udcd6 Documentation</li> <li>\ud83d\udc1b Issue Tracker</li> <li>\ud83d\udcac Discussions</li> </ul>"},{"location":"about/branding/","title":"Branding","text":"<p>Documentation coming soon...</p>"},{"location":"about/changelog/","title":"Changelog","text":"<p>Documentation coming soon...</p>"},{"location":"about/license/","title":"License","text":"<p>Documentation coming soon...</p>"},{"location":"admin-guide/audit-logging/","title":"Audit Logging","text":"<p>Documentation coming soon...</p>"},{"location":"admin-guide/export/","title":"Export","text":"<p>Documentation coming soon...</p>"},{"location":"admin-guide/moderation-stats/","title":"Moderation Stats","text":"<p>Track moderation activity and performance with detailed analytics dashboard.</p>"},{"location":"admin-guide/moderation-stats/#overview","title":"Overview","text":"<p>Access Moderation Stats from the Admin Panel \u2192 Stats tab.</p> <p>Who can access: - \u2705 Moderators (see their own stats + team stats) - \u2705 Admins (all stats) - \u2705 Owners (all stats)</p>"},{"location":"admin-guide/moderation-stats/#overall-metrics","title":"Overall Metrics","text":"<p>Four key performance indicators displayed as cards:</p>"},{"location":"admin-guide/moderation-stats/#questions-reviewed","title":"Questions Reviewed","text":"<p>Total number of questions reviewed/answered by all moderators in the date range.</p> <p>Includes: - Questions answered - Questions reviewed but not answered - All moderator activity</p>"},{"location":"admin-guide/moderation-stats/#questions-answered","title":"Questions Answered","text":"<p>Total questions that received a response (status changed to ANSWERED).</p> <p>Answer Rate = Questions Answered / Questions Reviewed</p>"},{"location":"admin-guide/moderation-stats/#questions-pinned","title":"Questions Pinned","text":"<p>Total questions currently pinned (highlighted as important).</p>"},{"location":"admin-guide/moderation-stats/#average-response-time","title":"Average Response Time","text":"<p>Mean time from question creation to response, calculated across all answered questions.</p> <p>Displayed as: - Minutes (e.g., \"45m\") for &lt; 60 minutes - Hours and minutes (e.g., \"2h 15m\") for &gt;= 60 minutes - \"N/A\" if no questions have been answered</p>"},{"location":"admin-guide/moderation-stats/#per-moderator-breakdown","title":"Per-Moderator Breakdown","text":"<p>Detailed table showing performance for each moderator:</p> Column Description Moderator Name and email address Reviewed Total questions reviewed Answered Questions with responses Pinned Questions pinned by this moderator Frozen Questions frozen by this moderator Avg Response Average time to respond Teams Number of teams this moderator covers <p>Sorted by: Questions reviewed (most active moderators first)</p>"},{"location":"admin-guide/moderation-stats/#filters","title":"Filters","text":""},{"location":"admin-guide/moderation-stats/#date-range","title":"Date Range","text":"<p>Default: Last 30 days (most recent activity)</p> <p>Custom Range: - Start Date - Beginning of date range - End Date - End of date range (inclusive, includes full day)</p> <p>Indicator: Blue badge shows current range: \"\ud83d\udcc5 Showing: MM/DD/YYYY - MM/DD/YYYY\"</p> <p>Reset Button: \"Reset to Last 30 Days\" returns to default view</p>"},{"location":"admin-guide/moderation-stats/#team-filter","title":"Team Filter","text":"<p>Filter stats to a specific team to see: - Only questions from that team - Only moderators active on that team - Team-specific metrics</p>"},{"location":"admin-guide/moderation-stats/#activity-breakdown","title":"Activity Breakdown","text":"<p>Side panel showing additional metrics:</p>"},{"location":"admin-guide/moderation-stats/#activity-metrics","title":"Activity Metrics","text":"<ul> <li>Total Reviewed - Same as overall card</li> <li>Answer Rate - Percentage of reviewed questions that were answered</li> <li>Questions Frozen - Total frozen in this period</li> </ul>"},{"location":"admin-guide/moderation-stats/#team-activity","title":"Team Activity","text":"<ul> <li>Active Moderators - Number of moderators with activity</li> <li>Avg per Moderator - Questions reviewed per moderator</li> <li>Coverage - Total team assignments across all moderators</li> </ul>"},{"location":"admin-guide/moderation-stats/#use-cases","title":"Use Cases","text":""},{"location":"admin-guide/moderation-stats/#monitor-moderator-performance","title":"Monitor Moderator Performance","text":"<ol> <li>Check default view (last 30 days, all teams)</li> <li>Review per-moderator stats - Who's most active?</li> <li>Check answer rates - Are moderators responding?</li> <li>Review response times - Are we answering quickly?</li> </ol>"},{"location":"admin-guide/moderation-stats/#analyze-team-engagement","title":"Analyze Team Engagement","text":"<ol> <li>Filter to specific team (e.g., \"Engineering\")</li> <li>Check question volume - How many questions from this team?</li> <li>Review moderator coverage - How many moderators active?</li> <li>Check response quality - Are questions getting answered?</li> </ol>"},{"location":"admin-guide/moderation-stats/#historical-analysis","title":"Historical Analysis","text":"<ol> <li>Set custom date range (e.g., Q1 2025)</li> <li>Compare periods - More/less activity than last quarter?</li> <li>Identify trends - Which teams need more moderation support?</li> </ol>"},{"location":"admin-guide/moderation-stats/#performance-reviews","title":"Performance Reviews","text":"<ol> <li>Filter to specific moderator using team filter</li> <li>Check their metrics - Questions reviewed, answered, response time</li> <li>Compare to team average</li> <li>Identify top performers - Sorted by activity</li> </ol>"},{"location":"admin-guide/moderation-stats/#what-gets-tracked","title":"What Gets Tracked","text":""},{"location":"admin-guide/moderation-stats/#when-is-reviewedby-set","title":"When is <code>reviewedBy</code> Set?","text":"<p>The <code>reviewedBy</code> field is automatically set when:</p> <ol> <li>Moderator answers a question - <code>reviewedBy</code> = user who answered</li> <li><code>reviewedAt</code> timestamp - When the answer was submitted</li> </ol>"},{"location":"admin-guide/moderation-stats/#moderation-actions-tracked","title":"Moderation Actions Tracked","text":"<p>All moderation actions are counted:</p> <ul> <li>\u2705 Answering questions</li> <li>\u2705 Pinning/unpinning</li> <li>\u2705 Freezing/unfreezing</li> <li>\u2705 Tagging questions</li> <li>\u2705 Bulk operations</li> </ul>"},{"location":"admin-guide/moderation-stats/#interpreting-metrics","title":"Interpreting Metrics","text":""},{"location":"admin-guide/moderation-stats/#high-review-count-low-answer-count","title":"High Review Count, Low Answer Count","text":"<p>Indicates: Moderators are active but not answering</p> <p>Possible reasons: - Questions are being triaged/tagged but not answered - Questions frozen or archived without answers - Bulk operations counting as reviews</p>"},{"location":"admin-guide/moderation-stats/#long-response-times","title":"Long Response Times","text":"<p>Indicates: Delay between question submission and answer</p> <p>Possible reasons: - Questions submitted far in advance of town hall - Complex questions requiring research - Low moderator availability</p> <p>Action: Consider more moderators or faster triage process</p>"},{"location":"admin-guide/moderation-stats/#uneven-distribution","title":"Uneven Distribution","text":"<p>Indicates: Some moderators much more active than others</p> <p>Possible reasons: - Different team sizes - Uneven team assignments - Some moderators more engaged</p> <p>Action: Review team assignments and workload distribution</p>"},{"location":"admin-guide/moderation-stats/#best-practices","title":"Best Practices","text":""},{"location":"admin-guide/moderation-stats/#regular-monitoring","title":"Regular Monitoring","text":"<ul> <li>Check weekly - Review last 7 days of activity</li> <li>Monthly reports - Compare month-over-month trends</li> <li>Pre-event - Ensure all moderators prepared for town halls</li> </ul>"},{"location":"admin-guide/moderation-stats/#setting-expectations","title":"Setting Expectations","text":"<p>Use stats to set team goals:</p> <ul> <li>Target response time - e.g., &lt; 24 hours</li> <li>Answer rate - e.g., &gt; 80% of reviewed questions answered</li> <li>Coverage - Each team has &gt;= 2 active moderators</li> </ul>"},{"location":"admin-guide/moderation-stats/#recognizing-top-performers","title":"Recognizing Top Performers","text":"<ul> <li>Sort by questions reviewed - See most active moderators</li> <li>Share achievements - Recognize top contributors</li> <li>Balance workload - Redistribute if one moderator doing too much</li> </ul>"},{"location":"admin-guide/moderation-stats/#related-pages","title":"Related Pages","text":"<ul> <li>Moderation Queue</li> <li>Audit Logging</li> <li>Export</li> </ul>"},{"location":"admin-guide/overview/","title":"Admin Guide Overview","text":"<p>Welcome to the PulseStage admin guide! As an admin, you have global access to manage teams, users, permissions, and system-wide settings.</p>"},{"location":"admin-guide/overview/#what-is-an-admin","title":"What is an Admin?","text":"<p>Admins are global roles with access to: - All teams and questions across the entire tenant - User and team management - System configuration and settings - Audit logs and security features - Global moderation statistics</p>"},{"location":"admin-guide/overview/#key-features-for-admins","title":"Key Features for Admins","text":""},{"location":"admin-guide/overview/#team-management","title":"\ud83d\udc65 Team Management","text":"<p>Create, configure, and manage teams across your organization. Assign moderators and control team settings.</p> <p>Learn more about team management \u2192</p>"},{"location":"admin-guide/overview/#tag-management","title":"\ud83c\udff7\ufe0f Tag Management","text":"<p>Create and manage global tags that can be used across all teams. Define tag colors and descriptions.</p> <p>Learn more about tag management \u2192</p>"},{"location":"admin-guide/overview/#user-roles-permissions","title":"\ud83d\udd10 User Roles &amp; Permissions","text":"<p>Manage user roles and permissions using PulseStage's role-based access control (RBAC) system.</p> <p>Learn more about roles &amp; permissions \u2192</p>"},{"location":"admin-guide/overview/#moderation-statistics","title":"\ud83d\udcca Moderation Statistics","text":"<p>View global moderation metrics, track moderator performance, and analyze Q&amp;A activity across all teams.</p> <p>Learn more about moderation stats \u2192</p>"},{"location":"admin-guide/overview/#audit-logging","title":"\ud83d\udccb Audit Logging","text":"<p>Review comprehensive audit logs of all administrative actions, including who did what and when.</p> <p>Learn more about audit logging \u2192</p>"},{"location":"admin-guide/overview/#export-data","title":"\ud83d\udce4 Export Data","text":"<p>Export questions, answers, and analytics data for reporting and compliance purposes.</p> <p>Learn more about data export \u2192</p>"},{"location":"admin-guide/overview/#admin-vs-moderator-vs-owner","title":"Admin vs Moderator vs Owner","text":"Feature Viewer Member Moderator Admin Owner View questions \u2705 \u2705 \u2705 \u2705 \u2705 Submit questions \u274c \u2705 \u2705 \u2705 \u2705 Upvote questions \u274c \u2705 \u2705 \u2705 \u2705 Answer questions \u274c \u274c \u2705 (team-scoped) \u2705 (global) \u2705 (global) Tag questions \u274c \u274c \u2705 (team-scoped) \u2705 (global) \u2705 (global) Pin/Freeze \u274c \u274c \u2705 (team-scoped) \u2705 (global) \u2705 (global) Moderation queue \u274c \u274c \u2705 (team-scoped) \u2705 (global) \u2705 (global) Manage teams \u274c \u274c \u274c \u2705 \u2705 Manage users \u274c \u274c \u274c \u2705 \u2705 Manage tags \u274c \u274c \u274c \u2705 \u2705 View audit logs \u274c \u274c \u274c \u2705 \u2705 Export data \u274c \u274c \u274c \u2705 \u2705 Full system access \u274c \u274c \u274c \u274c \u2705 <p>Global Access</p> <p>Admins and Owners have global access across all teams. Unlike moderators, who are team-scoped, admins can:</p> <ul> <li>View and manage questions from any team</li> <li>Access moderation statistics for all teams</li> <li>Perform administrative actions without team restrictions</li> </ul>"},{"location":"admin-guide/overview/#admin-permissions","title":"Admin Permissions","text":"<p>As an admin, you have access to:</p> <p>\u2705 All questions across all teams \u2705 Global moderation queue and statistics \u2705 Team management (create, edit, delete) \u2705 User role management \u2705 Tag management (create, edit, delete) \u2705 Audit log viewing and export \u2705 Data export (CSV/JSON) \u2705 Pin, freeze, and delete questions globally  </p>"},{"location":"admin-guide/overview/#getting-started","title":"Getting Started","text":"<ol> <li>Access the Admin Panel from your user dropdown (visible from any team)</li> <li>Review the Moderation Queue to see all pending questions</li> <li>Check Moderation Stats to understand platform usage</li> <li>Manage Teams to organize your organization</li> <li>Review Audit Logs to track administrative actions</li> </ol>"},{"location":"admin-guide/overview/#quick-tips","title":"Quick Tips","text":"<p>Best Practices</p> <ul> <li>Set up teams first: Create your organizational structure before adding users</li> <li>Define roles clearly: Assign moderators to appropriate teams</li> <li>Create tag taxonomy: Establish consistent tags before Q&amp;A sessions</li> <li>Monitor audit logs: Regularly review administrative actions</li> <li>Export data regularly: Keep backups and generate reports</li> <li>Review stats: Track engagement and moderator performance</li> </ul> <p>Security Best Practices</p> <ul> <li>Limit admin roles to trusted users</li> <li>Review audit logs for suspicious activity</li> <li>Use strong authentication (SSO recommended)</li> <li>Export and backup data regularly</li> <li>Monitor moderation statistics for anomalies</li> </ul>"},{"location":"admin-guide/overview/#admin-workflow","title":"Admin Workflow","text":"<p>A typical admin workflow:</p> <ol> <li>Initial Setup:</li> <li>Create teams for your organization</li> <li>Assign moderators to teams</li> <li>Create tag taxonomy</li> <li> <p>Configure settings</p> </li> <li> <p>Ongoing Management:</p> </li> <li>Monitor moderation statistics</li> <li>Review audit logs weekly</li> <li>Manage user roles as needed</li> <li> <p>Export data for reporting</p> </li> <li> <p>Before Events:</p> </li> <li>Ensure moderators are assigned</li> <li>Review and clean up old questions</li> <li> <p>Check system health</p> </li> <li> <p>After Events:</p> </li> <li>Review participation metrics</li> <li>Export Q&amp;A data</li> <li>Analyze engagement trends</li> </ol>"},{"location":"admin-guide/overview/#security-compliance","title":"Security &amp; Compliance","text":"<p>As an admin, you're responsible for:</p> <ul> <li>Data security: Protecting user questions and responses</li> <li>Access control: Managing who can view and moderate</li> <li>Audit trails: Maintaining records of administrative actions</li> <li>Data retention: Exporting and archiving data as needed</li> <li>Compliance: Following your organization's policies</li> </ul> <p>Learn more about security features \u2192</p>"},{"location":"admin-guide/overview/#need-help","title":"Need Help?","text":"<ul> <li>For user features: See the User Guide</li> <li>For moderator features: See the Moderator Guide</li> <li>For technical issues: Check our GitHub Issues</li> <li>For security: See the Security Documentation</li> </ul>"},{"location":"admin-guide/overview/#next-steps","title":"Next Steps","text":"<p>Ready to administer PulseStage? Check out these guides:</p> <ul> <li>Team Management - Set up your organizational structure</li> <li>Roles &amp; Permissions - Understand the RBAC system</li> <li>Moderation Stats - Track platform engagement</li> <li>Audit Logging - Monitor administrative actions</li> </ul>"},{"location":"admin-guide/roles-permissions/","title":"Roles Permissions","text":"<p>Documentation coming soon...</p>"},{"location":"admin-guide/tag-management/","title":"Tag Management","text":"<p>Documentation coming soon...</p>"},{"location":"admin-guide/team-management/","title":"Team Management","text":"<p>Documentation coming soon...</p>"},{"location":"api/admin/","title":"Admin","text":"<p>Documentation coming soon...</p>"},{"location":"api/authentication/","title":"Authentication","text":"<p>Documentation coming soon...</p>"},{"location":"api/overview/","title":"API Reference Overview","text":"<p>Welcome to the PulseStage API documentation! This reference covers all available endpoints, authentication methods, and integration patterns.</p>"},{"location":"api/overview/#base-url","title":"Base URL","text":"<p>All API requests should be made to:</p> <pre><code>http://localhost:3000/api\n</code></pre> <p>Or in production:</p> <pre><code>https://your-domain.com/api\n</code></pre>"},{"location":"api/overview/#authentication","title":"Authentication","text":"<p>PulseStage uses SSO (Single Sign-On) for authentication. All API requests must include:</p> <pre><code>X-Tenant-ID: your-tenant-id\nX-Mock-SSO-User: user@example.com  # For development\n</code></pre> <p>In production, authentication is handled by your SSO provider, and the API validates sessions via cookies.</p> <p>Learn more about authentication \u2192</p>"},{"location":"api/overview/#core-concepts","title":"Core Concepts","text":""},{"location":"api/overview/#multi-tenancy","title":"Multi-Tenancy","text":"<p>Every request must include a tenant ID. Data is isolated per tenant, ensuring complete separation between organizations.</p>"},{"location":"api/overview/#team-scoping","title":"Team Scoping","text":"<p>Questions, users, and permissions are scoped to teams. Users can be members of multiple teams with different roles per team.</p>"},{"location":"api/overview/#role-based-access-control-rbac","title":"Role-Based Access Control (RBAC)","text":"<p>Five roles control access: - Viewer: Read-only access - Member: Can submit and upvote questions - Moderator: Can answer and tag questions (team-scoped) - Admin: Can manage teams and users (global access) - Owner: Full system access (global access)</p>"},{"location":"api/overview/#real-time-updates","title":"Real-Time Updates","text":"<p>PulseStage uses Server-Sent Events (SSE) for real-time updates. Connect to <code>/sse</code> to receive live events.</p>"},{"location":"api/overview/#available-resources","title":"Available Resources","text":""},{"location":"api/overview/#questions","title":"Questions","text":"<p>Submit, upvote, search, and manage questions.</p> <p>View Questions API \u2192</p> <p>Key Endpoints: - <code>GET /questions</code> - List questions with filters - <code>POST /questions</code> - Submit a new question - <code>POST /questions/:id/upvote</code> - Upvote a question - <code>POST /questions/:id/respond</code> - Answer a question (moderator+) - <code>POST /questions/:id/pin</code> - Pin a question (moderator+) - <code>POST /questions/:id/freeze</code> - Freeze a question (moderator+)</p>"},{"location":"api/overview/#teams","title":"Teams","text":"<p>Manage teams and memberships.</p> <p>View Teams API \u2192</p> <p>Key Endpoints: - <code>GET /teams</code> - List all teams - <code>POST /teams</code> - Create a new team (admin+) - <code>GET /teams/:id</code> - Get team details - <code>POST /teams/:id/members</code> - Add team member (admin+)</p>"},{"location":"api/overview/#tags","title":"Tags","text":"<p>Create and manage tags for organizing questions.</p> <p>View Tags API \u2192</p> <p>Key Endpoints: - <code>GET /tags</code> - List all tags - <code>POST /tags</code> - Create a new tag (admin+) - <code>POST /questions/:id/tag</code> - Tag a question (moderator+) - <code>DELETE /questions/:id/tag/:tagId</code> - Remove tag (moderator+)</p>"},{"location":"api/overview/#users","title":"Users","text":"<p>User profile and preferences.</p> <p>View Users API \u2192</p> <p>Key Endpoints: - <code>GET /users/me</code> - Get current user profile - <code>GET /users/:id</code> - Get user details</p>"},{"location":"api/overview/#admin","title":"Admin","text":"<p>Administrative endpoints for moderation, stats, and audit logs.</p> <p>View Admin API \u2192</p> <p>Key Endpoints: - <code>GET /admin/moderation-queue</code> - Get moderation queue (moderator+) - <code>POST /admin/bulk-action</code> - Bulk operations (admin+) - <code>POST /admin/bulk-tag</code> - Bulk tagging (moderator+) - <code>GET /admin/stats/moderation</code> - Moderation statistics (moderator+) - <code>GET /admin/audit-log</code> - View audit logs (admin+) - <code>GET /admin/export</code> - Export data as CSV/JSON (admin+)</p>"},{"location":"api/overview/#response-format","title":"Response Format","text":"<p>All API responses follow a consistent format:</p>"},{"location":"api/overview/#success-response","title":"Success Response","text":"<pre><code>{\n  \"id\": \"uuid\",\n  \"body\": \"Question text\",\n  \"upvotes\": 5,\n  \"status\": \"OPEN\",\n  \"createdAt\": \"2025-10-05T12:00:00.000Z\"\n}\n</code></pre>"},{"location":"api/overview/#error-response","title":"Error Response","text":"<pre><code>{\n  \"error\": \"Error message\",\n  \"code\": \"ERROR_CODE\"\n}\n</code></pre>"},{"location":"api/overview/#list-response","title":"List Response","text":"<pre><code>{\n  \"questions\": [...],\n  \"total\": 42,\n  \"limit\": 100,\n  \"offset\": 0\n}\n</code></pre>"},{"location":"api/overview/#http-status-codes","title":"HTTP Status Codes","text":"Code Meaning Usage 200 OK Request succeeded 201 Created Resource created successfully 400 Bad Request Invalid input or validation error 401 Unauthorized Authentication required 403 Forbidden Insufficient permissions 404 Not Found Resource doesn't exist 409 Conflict Duplicate action (e.g., already upvoted) 500 Internal Server Error Server-side error"},{"location":"api/overview/#rate-limiting","title":"Rate Limiting","text":"<p>API requests are rate-limited per user and IP address:</p> <ul> <li>Per User: 100 requests per minute</li> <li>Per IP: 1000 requests per minute (for anonymous endpoints)</li> </ul> <p>Rate limit headers: <pre><code>X-RateLimit-Limit: 100\nX-RateLimit-Remaining: 95\nX-RateLimit-Reset: 1696512000\n</code></pre></p> <p>When rate limited, you'll receive a <code>429 Too Many Requests</code> response.</p>"},{"location":"api/overview/#csrf-protection","title":"CSRF Protection","text":"<p>State-changing endpoints (POST, PUT, DELETE) require a CSRF token:</p> <ol> <li>Get the token from the <code>_csrf</code> cookie (set on first request)</li> <li>Include it in the <code>x-csrf-token</code> header</li> </ol> <pre><code>X-CSRF-Token: your-csrf-token\n</code></pre>"},{"location":"api/overview/#real-time-updates-sse","title":"Real-Time Updates (SSE)","text":"<p>Connect to the SSE endpoint to receive real-time events:</p> <pre><code>const eventSource = new EventSource('/sse?tenantId=default');\n\neventSource.addEventListener('question:created', (event) =&gt; {\n  const question = JSON.parse(event.data);\n  console.log('New question:', question);\n});\n</code></pre> <p>Event Types: - <code>question:created</code> - New question submitted - <code>question:upvoted</code> - Question upvoted - <code>question:answered</code> - Question answered - <code>question:tagged</code> - Tag added to question - <code>question:untagged</code> - Tag removed from question - <code>question:pinned</code> - Question pinned/unpinned - <code>question:frozen</code> - Question frozen/unfrozen - <code>heartbeat</code> - Keep-alive event (every 30s)</p>"},{"location":"api/overview/#pagination","title":"Pagination","text":"<p>List endpoints support pagination via query parameters:</p> <pre><code>GET /questions?limit=20&amp;offset=40\n</code></pre> <ul> <li><code>limit</code>: Number of items per page (default: 100, max: 1000)</li> <li><code>offset</code>: Number of items to skip (default: 0)</li> </ul>"},{"location":"api/overview/#filtering-search","title":"Filtering &amp; Search","text":"<p>The questions endpoint supports advanced filtering:</p> <pre><code>GET /questions?\n  search=mobile+app&amp;\n  status=OPEN&amp;\n  teamId=team-uuid&amp;\n  tags=tag-uuid-1,tag-uuid-2&amp;\n  fromDate=2025-10-01&amp;\n  toDate=2025-10-05\n</code></pre> <p>Parameters: - <code>search</code>: Full-text search (supports prefix matching) - <code>status</code>: <code>OPEN</code> or <code>ANSWERED</code> - <code>teamId</code>: Filter by team - <code>tags</code>: Comma-separated tag IDs - <code>fromDate</code>: ISO date (YYYY-MM-DD) - <code>toDate</code>: ISO date (YYYY-MM-DD) - <code>sort</code>: <code>upvotes</code> (default) or <code>createdAt</code> - <code>order</code>: <code>desc</code> (default) or <code>asc</code></p>"},{"location":"api/overview/#security-headers","title":"Security Headers","text":"<p>All API responses include security headers:</p> <pre><code>Content-Security-Policy: default-src 'self'\nX-Content-Type-Options: nosniff\nX-Frame-Options: DENY\nStrict-Transport-Security: max-age=31536000; includeSubDomains\nReferrer-Policy: strict-origin-when-cross-origin\n</code></pre> <p>Learn more about security \u2192</p>"},{"location":"api/overview/#example-requests","title":"Example Requests","text":""},{"location":"api/overview/#submit-a-question","title":"Submit a Question","text":"<pre><code>curl -X POST http://localhost:3000/questions \\\n  -H \"Content-Type: application/json\" \\\n  -H \"X-Tenant-ID: default\" \\\n  -H \"X-Mock-SSO-User: user@example.com\" \\\n  -H \"X-CSRF-Token: your-csrf-token\" \\\n  -d '{\n    \"body\": \"What is our remote work policy?\",\n    \"teamId\": \"team-uuid\"\n  }'\n</code></pre>"},{"location":"api/overview/#search-questions","title":"Search Questions","text":"<pre><code>curl \"http://localhost:3000/questions?search=remote&amp;status=OPEN\" \\\n  -H \"X-Tenant-ID: default\" \\\n  -H \"X-Mock-SSO-User: user@example.com\"\n</code></pre>"},{"location":"api/overview/#upvote-a-question","title":"Upvote a Question","text":"<pre><code>curl -X POST http://localhost:3000/questions/{id}/upvote \\\n  -H \"X-Tenant-ID: default\" \\\n  -H \"X-Mock-SSO-User: user@example.com\" \\\n  -H \"X-CSRF-Token: your-csrf-token\"\n</code></pre>"},{"location":"api/overview/#sdk-client-libraries","title":"SDK &amp; Client Libraries","text":"<p>Currently, the web application includes a TypeScript API client (<code>web/src/lib/api.ts</code>) that can be used as a reference for building your own client.</p>"},{"location":"api/overview/#need-help","title":"Need Help?","text":"<ul> <li>Authentication issues: See Authentication</li> <li>Permission errors: See RBAC Documentation</li> <li>Rate limiting: Contact your admin</li> <li>Technical issues: Check our GitHub Issues</li> </ul>"},{"location":"api/overview/#next-steps","title":"Next Steps","text":"<p>Explore the detailed API documentation:</p> <ul> <li>Authentication - Understand SSO and session management</li> <li>Questions API - Submit, search, and manage questions</li> <li>Admin API - Administrative and moderation endpoints</li> <li>Security - Security features and best practices</li> </ul>"},{"location":"api/questions/","title":"Questions","text":"<p>Documentation coming soon...</p>"},{"location":"api/tags/","title":"Tags","text":"<p>Documentation coming soon...</p>"},{"location":"api/teams/","title":"Teams","text":"<p>Documentation coming soon...</p>"},{"location":"api/users/","title":"Users","text":"<p>Documentation coming soon...</p>"},{"location":"architecture/authentication/","title":"Authentication","text":"<p>Documentation coming soon...</p>"},{"location":"architecture/database-schema/","title":"Database Schema","text":"<p>This document provides a comprehensive overview of PulseStage's PostgreSQL database schema, relationships, and design decisions.</p>"},{"location":"architecture/database-schema/#entity-relationship-diagram-erd","title":"Entity Relationship Diagram (ERD)","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502    Tenant    \u2502 (Organization)\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 id (PK)      \u2502\n\u2502 slug (UQ)    \u2502\n\u2502 name         \u2502\n\u2502 createdAt    \u2502\n\u2502 updatedAt    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502\n       \u2502 1:N relationships\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n       \u2502                        \u2502                         \u2502\n       \u25bc                        \u25bc                         \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502    Team     \u2502      \u2502   Question     \u2502      \u2502      Tag         \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524      \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524      \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 id (PK)     \u2502      \u2502 id (PK)        \u2502      \u2502 id (PK)          \u2502\n\u2502 tenantId(FK)\u2502\u25c4\u2500\u2510   \u2502 tenantId (FK)  \u2502      \u2502 tenantId (FK)    \u2502\n\u2502 name        \u2502  \u2502   \u2502 body           \u2502      \u2502 name (UQ)        \u2502\n\u2502 slug (UQ)   \u2502  \u2502   \u2502 upvotes        \u2502      \u2502 description      \u2502\n\u2502 description \u2502  \u2502   \u2502 status         \u2502      \u2502 color            \u2502\n\u2502 isActive    \u2502  \u2502   \u2502 responseText   \u2502\u25c4\u2500\u2500\u2510  \u2502 createdAt        \u2502\n\u2502 createdAt   \u2502  \u2502   \u2502 respondedAt    \u2502   \u2502  \u2502 updatedAt        \u2502\n\u2502 updatedAt   \u2502  \u2502   \u2502 teamId (FK)    \u2502   \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u2514\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502   \u2502 authorId (FK)  \u2502   \u2502           \u2502\n      \u2502          \u2502   \u2502 isPinned       \u2502   \u2502           \u2502\n      \u2502 1:N      \u2502   \u2502 pinnedBy       \u2502   \u2502           \u2502\n      \u2502          \u2502   \u2502 pinnedAt       \u2502   \u2502           \u2502\n      \u2502          \u2502   \u2502 isFrozen       \u2502   \u2502           \u2502 N:M (via QuestionTag)\n      \u2502          \u2502   \u2502 frozenBy       \u2502   \u2502           \u2502\n      \u2502          \u2502   \u2502 frozenAt       \u2502   \u2502           \u2502\n      \u2502          \u2502   \u2502 reviewedBy     \u2502   \u2502           \u2502\n      \u2502          \u2502   \u2502 reviewedAt     \u2502   \u2502           \u2502\n      \u2502          \u2502   \u2502 createdAt      \u2502   \u2502           \u2502\n      \u2502          \u2502   \u2502 updatedAt      \u2502   \u2502           \u2502\n      \u2502          \u2502   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502           \u2502\n      \u2502          \u2502            \u2502           \u2502           \u2502\n      \u2502          \u2502            \u2502 1:N       \u2502           \u2502\n      \u2502          \u2502            \u2502           \u2502           \u2502\n      \u25bc          \u2502            \u25bc           \u2502           \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  User        \u2502\u2502   \u2502  Upvote        \u2502   \u2502  \u2502  QuestionTag     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\u2502   \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524   \u2502  \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 id (PK)      \u2502\u2502   \u2502 id (PK)        \u2502   \u2502  \u2502 id (PK)          \u2502\n\u2502 tenantId(FK) \u2502\u2502   \u2502 questionId(FK) \u2502\u2500\u2500\u2500\u2518  \u2502 questionId (FK)  \u2502\u2500\u2500\u2500\u2510\n\u2502 email (UQ)   \u2502\u2502   \u2502 userId (FK)    \u2502      \u2502 tagId (FK)       \u2502\u2500\u2500\u2500\u2524\n\u2502 name         \u2502\u2502   \u2502 createdAt      \u2502      \u2502 createdAt        \u2502   \u2502\n\u2502 ssoId (UQ)   \u2502\u2502   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2502 createdAt    \u2502\u2502            \u2502                        \u2502             \u2502\n\u2502 updatedAt    \u2502\u2502            \u2502                        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502            \u2502                                      \u2502\n       \u2502        \u2502            \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510           \u2502\n       \u2502 1:N    \u2502                                       \u2502           \u2502\n       \u2502        \u2502                                       \u2502           \u2502\n       \u25bc        \u2502                                       \u2502           \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502                                       \u2502           \u2502\n\u2502TeamMembership\u2502\u2502                                       \u2502           \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\u2502                                       \u2502           \u2502\n\u2502 id (PK)      \u2502\u2502                                       \u2502           \u2502\n\u2502 userId (FK)  \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518           \u2502\n\u2502 teamId (FK)  \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u2502 role         \u2502\n\u2502 createdAt    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 UserPreferences  \u2502        \u2502   AuditLog       \u2502        \u2502 TenantSettings   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524        \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524        \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 id (PK)          \u2502        \u2502 id (PK)          \u2502        \u2502 id (PK)          \u2502\n\u2502 tenantId (FK)    \u2502        \u2502 tenantId (FK)    \u2502        \u2502 tenantId (FK,UQ) \u2502\n\u2502 userId (FK,UQ)   \u2502        \u2502 userId (FK)      \u2502        \u2502 settings (JSON)  \u2502\n\u2502 favoriteTeams    \u2502        \u2502 action           \u2502        \u2502 createdAt        \u2502\n\u2502 defaultTeamId(FK)\u2502        \u2502 entityType       \u2502        \u2502 updatedAt        \u2502\n\u2502 createdAt        \u2502        \u2502 entityId         \u2502        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u2502 updatedAt        \u2502        \u2502 before (JSON)    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518        \u2502 after (JSON)     \u2502\n                            \u2502 ipAddress        \u2502\n                            \u2502 userAgent        \u2502\n                            \u2502 metadata (JSON)  \u2502\n                            \u2502 createdAt        \u2502\n                            \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture/database-schema/#core-tables","title":"Core Tables","text":""},{"location":"architecture/database-schema/#tenant","title":"Tenant","text":"<p>The root of the multi-tenant hierarchy. Every data entity belongs to a tenant.</p> <pre><code>CREATE TABLE \"Tenant\" (\n    \"id\"        TEXT PRIMARY KEY DEFAULT gen_random_uuid()::text,\n    \"slug\"      TEXT NOT NULL UNIQUE,\n    \"name\"      TEXT NOT NULL,\n    \"createdAt\" TIMESTAMP DEFAULT NOW(),\n    \"updatedAt\" TIMESTAMP DEFAULT NOW()\n);\n</code></pre> <p>Relationships: - One-to-many with: Team, Question, Tag, User, AuditLog - One-to-one with: TenantSettings</p> <p>Key Fields: - <code>slug</code>: URL-safe identifier (e.g., \"acme\", \"default\") - <code>name</code>: Display name (e.g., \"Acme Corp\")</p> <p>Indexes: - Primary key on <code>id</code> - Unique constraint on <code>slug</code></p>"},{"location":"architecture/database-schema/#team","title":"Team","text":"<p>Organizational units within a tenant (e.g., Engineering, Product, Marketing).</p> <pre><code>CREATE TABLE \"Team\" (\n    \"id\"          TEXT PRIMARY KEY DEFAULT gen_random_uuid()::text,\n    \"tenantId\"    TEXT NOT NULL REFERENCES \"Tenant\"(\"id\") ON DELETE CASCADE,\n    \"name\"        TEXT NOT NULL,\n    \"slug\"        TEXT NOT NULL,\n    \"description\" TEXT,\n    \"isActive\"    BOOLEAN DEFAULT true,\n    \"createdAt\"   TIMESTAMP DEFAULT NOW(),\n    \"updatedAt\"   TIMESTAMP DEFAULT NOW(),\n\n    CONSTRAINT \"Team_tenantId_slug_unique\" UNIQUE (\"tenantId\", \"slug\")\n);\n\nCREATE INDEX \"Team_tenantId_idx\" ON \"Team\"(\"tenantId\");\n</code></pre> <p>Relationships: - Belongs to: Tenant - Has many: Questions, TeamMemberships, UserPreferences</p> <p>Key Fields: - <code>slug</code>: URL-safe team identifier (unique per tenant) - <code>isActive</code>: Soft delete / archive teams</p> <p>Indexes: - Composite unique: <code>(tenantId, slug)</code> - Index on <code>tenantId</code> for queries</p>"},{"location":"architecture/database-schema/#question","title":"Question","text":"<p>User-submitted questions with voting, answers, and moderation features.</p> <pre><code>CREATE TABLE \"Question\" (\n    \"id\"           TEXT PRIMARY KEY DEFAULT gen_random_uuid()::text,\n    \"tenantId\"     TEXT NOT NULL REFERENCES \"Tenant\"(\"id\") ON DELETE CASCADE,\n    \"body\"         TEXT NOT NULL,\n    \"upvotes\"      INTEGER DEFAULT 0,\n    \"status\"       TEXT NOT NULL DEFAULT 'OPEN',\n    \"responseText\" TEXT,\n    \"respondedAt\"  TIMESTAMP,\n    \"createdAt\"    TIMESTAMP DEFAULT NOW(),\n    \"updatedAt\"    TIMESTAMP DEFAULT NOW(),\n    \"teamId\"       TEXT REFERENCES \"Team\"(\"id\") ON DELETE SET NULL,\n    \"authorId\"     TEXT REFERENCES \"User\"(\"id\") ON DELETE SET NULL,\n\n    -- Moderation fields\n    \"isPinned\"     BOOLEAN DEFAULT false,\n    \"pinnedBy\"     TEXT,\n    \"pinnedAt\"     TIMESTAMP,\n    \"isFrozen\"     BOOLEAN DEFAULT false,\n    \"frozenBy\"     TEXT,\n    \"frozenAt\"     TIMESTAMP,\n    \"reviewedBy\"   TEXT,\n    \"reviewedAt\"   TIMESTAMP,\n\n    CONSTRAINT \"Question_status_check\" CHECK (\"status\" IN ('OPEN', 'ANSWERED'))\n);\n\nCREATE INDEX \"Question_tenantId_idx\" ON \"Question\"(\"tenantId\");\nCREATE INDEX \"Question_tenantId_status_idx\" ON \"Question\"(\"tenantId\", \"status\");\nCREATE INDEX \"Question_tenantId_teamId_idx\" ON \"Question\"(\"tenantId\", \"teamId\");\nCREATE INDEX \"Question_isPinned_idx\" ON \"Question\"(\"isPinned\");\nCREATE INDEX \"Question_reviewedBy_idx\" ON \"Question\"(\"reviewedBy\");\n</code></pre> <p>Relationships: - Belongs to: Tenant, Team (optional), User (author, optional) - Has many: QuestionTags, Upvotes</p> <p>Key Fields: - <code>status</code>: Enum of <code>OPEN</code> or <code>ANSWERED</code> - <code>upvotes</code>: Cached count (source of truth is <code>Upvote</code> records) - <code>isPinned</code>, <code>isFrozen</code>: Moderation flags - <code>reviewedBy</code>: Last moderator who reviewed</p> <p>Indexes: - Composite: <code>(tenantId, status)</code> for filtered queries - Composite: <code>(tenantId, teamId)</code> for team-specific views - Single: <code>isPinned</code> for quick pinned question queries</p> <p>Full-Text Search: - <code>search_vector</code> column (tsvector, managed by PostgreSQL trigger) - GIN index on <code>search_vector</code> for fast text search</p>"},{"location":"architecture/database-schema/#tag","title":"Tag","text":"<p>Categorization and labeling system for questions.</p> <pre><code>CREATE TABLE \"Tag\" (\n    \"id\"          TEXT PRIMARY KEY DEFAULT gen_random_uuid()::text,\n    \"tenantId\"    TEXT NOT NULL REFERENCES \"Tenant\"(\"id\") ON DELETE CASCADE,\n    \"name\"        TEXT NOT NULL,\n    \"description\" TEXT,\n    \"color\"       TEXT DEFAULT '#3B82F6',\n    \"createdAt\"   TIMESTAMP DEFAULT NOW(),\n    \"updatedAt\"   TIMESTAMP DEFAULT NOW(),\n\n    CONSTRAINT \"Tag_tenantId_name_unique\" UNIQUE (\"tenantId\", \"name\")\n);\n\nCREATE INDEX \"Tag_tenantId_idx\" ON \"Tag\"(\"tenantId\");\n</code></pre> <p>Relationships: - Belongs to: Tenant - Many-to-many with: Questions (via QuestionTag)</p> <p>Key Fields: - <code>name</code>: Unique per tenant - <code>color</code>: Hex color code for UI display</p> <p>Indexes: - Composite unique: <code>(tenantId, name)</code></p>"},{"location":"architecture/database-schema/#questiontag","title":"QuestionTag","text":"<p>Junction table for many-to-many relationship between Questions and Tags.</p> <pre><code>CREATE TABLE \"QuestionTag\" (\n    \"id\"         TEXT PRIMARY KEY DEFAULT gen_random_uuid()::text,\n    \"questionId\" TEXT NOT NULL REFERENCES \"Question\"(\"id\") ON DELETE CASCADE,\n    \"tagId\"      TEXT NOT NULL REFERENCES \"Tag\"(\"id\") ON DELETE CASCADE,\n    \"createdAt\"  TIMESTAMP DEFAULT NOW(),\n\n    CONSTRAINT \"QuestionTag_questionId_tagId_unique\" UNIQUE (\"questionId\", \"tagId\")\n);\n</code></pre> <p>Relationships: - Belongs to: Question, Tag</p> <p>Indexes: - Composite unique: <code>(questionId, tagId)</code> prevents duplicate tags</p>"},{"location":"architecture/database-schema/#user","title":"User","text":"<p>User accounts linked to SSO providers.</p> <pre><code>CREATE TABLE \"User\" (\n    \"id\"        TEXT PRIMARY KEY DEFAULT gen_random_uuid()::text,\n    \"tenantId\"  TEXT NOT NULL REFERENCES \"Tenant\"(\"id\") ON DELETE CASCADE,\n    \"email\"     TEXT NOT NULL,\n    \"name\"      TEXT,\n    \"ssoId\"     TEXT,\n    \"createdAt\" TIMESTAMP DEFAULT NOW(),\n    \"updatedAt\" TIMESTAMP DEFAULT NOW(),\n\n    CONSTRAINT \"User_tenantId_email_unique\" UNIQUE (\"tenantId\", \"email\"),\n    CONSTRAINT \"User_tenantId_ssoId_unique\" UNIQUE (\"tenantId\", \"ssoId\")\n);\n\nCREATE INDEX \"User_tenantId_idx\" ON \"User\"(\"tenantId\");\n</code></pre> <p>Relationships: - Belongs to: Tenant - Has many: TeamMemberships, Questions (authored), Upvotes, AuditLogs - Has one: UserPreferences</p> <p>Key Fields: - <code>email</code>: Unique per tenant - <code>ssoId</code>: External SSO provider user ID (unique per tenant)</p> <p>Indexes: - Composite unique: <code>(tenantId, email)</code> - Composite unique: <code>(tenantId, ssoId)</code></p>"},{"location":"architecture/database-schema/#teammembership","title":"TeamMembership","text":"<p>User roles and permissions within teams.</p> <pre><code>CREATE TABLE \"TeamMembership\" (\n    \"id\"        TEXT PRIMARY KEY DEFAULT gen_random_uuid()::text,\n    \"userId\"    TEXT NOT NULL REFERENCES \"User\"(\"id\") ON DELETE CASCADE,\n    \"teamId\"    TEXT NOT NULL REFERENCES \"Team\"(\"id\") ON DELETE CASCADE,\n    \"role\"      TEXT DEFAULT 'member',\n    \"createdAt\" TIMESTAMP DEFAULT NOW(),\n\n    CONSTRAINT \"TeamMembership_userId_teamId_unique\" UNIQUE (\"userId\", \"teamId\")\n);\n</code></pre> <p>Relationships: - Belongs to: User, Team</p> <p>Key Fields: - <code>role</code>: One of: <code>viewer</code>, <code>member</code>, <code>moderator</code>, <code>admin</code>, <code>owner</code></p> <p>Indexes: - Composite unique: <code>(userId, teamId)</code> ensures one role per team</p>"},{"location":"architecture/database-schema/#userpreferences","title":"UserPreferences","text":"<p>User-specific settings and preferences.</p> <pre><code>CREATE TABLE \"UserPreferences\" (\n    \"id\"            TEXT PRIMARY KEY DEFAULT gen_random_uuid()::text,\n    \"tenantId\"      TEXT NOT NULL REFERENCES \"Tenant\"(\"id\") ON DELETE CASCADE,\n    \"userId\"        TEXT NOT NULL UNIQUE REFERENCES \"User\"(\"id\") ON DELETE CASCADE,\n    \"favoriteTeams\" JSONB DEFAULT '[]',\n    \"defaultTeamId\" TEXT REFERENCES \"Team\"(\"id\") ON DELETE SET NULL,\n    \"createdAt\"     TIMESTAMP DEFAULT NOW(),\n    \"updatedAt\"     TIMESTAMP DEFAULT NOW()\n);\n\nCREATE INDEX \"UserPreferences_tenantId_idx\" ON \"UserPreferences\"(\"tenantId\");\n</code></pre> <p>Relationships: - Belongs to: Tenant, User (one-to-one), Team (default team, optional)</p> <p>Key Fields: - <code>favoriteTeams</code>: JSON array of team slugs - <code>defaultTeamId</code>: Team to show by default</p>"},{"location":"architecture/database-schema/#upvote","title":"Upvote","text":"<p>Individual upvote tracking (not just counters).</p> <pre><code>CREATE TABLE \"Upvote\" (\n    \"id\"         TEXT PRIMARY KEY DEFAULT gen_random_uuid()::text,\n    \"questionId\" TEXT NOT NULL REFERENCES \"Question\"(\"id\") ON DELETE CASCADE,\n    \"userId\"     TEXT REFERENCES \"User\"(\"id\") ON DELETE SET NULL,\n    \"createdAt\"  TIMESTAMP DEFAULT NOW(),\n\n    CONSTRAINT \"Upvote_questionId_userId_unique\" UNIQUE (\"questionId\", \"userId\")\n);\n\nCREATE INDEX \"Upvote_questionId_idx\" ON \"Upvote\"(\"questionId\");\n</code></pre> <p>Relationships: - Belongs to: Question, User (optional)</p> <p>Key Fields: - <code>userId</code>: Nullable to support anonymous upvotes (future feature)</p> <p>Indexes: - Composite unique: <code>(questionId, userId)</code> prevents duplicate upvotes - Index on <code>questionId</code> for counting votes</p>"},{"location":"architecture/database-schema/#auditlog","title":"AuditLog","text":"<p>Immutable audit trail of all administrative actions.</p> <pre><code>CREATE TABLE \"AuditLog\" (\n    \"id\"         TEXT PRIMARY KEY DEFAULT gen_random_uuid()::text,\n    \"tenantId\"   TEXT NOT NULL REFERENCES \"Tenant\"(\"id\") ON DELETE CASCADE,\n    \"userId\"     TEXT REFERENCES \"User\"(\"id\") ON DELETE SET NULL,\n    \"action\"     TEXT NOT NULL,\n    \"entityType\" TEXT NOT NULL,\n    \"entityId\"   TEXT,\n    \"before\"     JSONB,\n    \"after\"      JSONB,\n    \"ipAddress\"  TEXT,\n    \"userAgent\"  TEXT,\n    \"metadata\"   JSONB,\n    \"createdAt\"  TIMESTAMP DEFAULT NOW()\n);\n\nCREATE INDEX \"AuditLog_tenantId_createdAt_idx\" ON \"AuditLog\"(\"tenantId\", \"createdAt\" DESC);\nCREATE INDEX \"AuditLog_tenantId_userId_idx\" ON \"AuditLog\"(\"tenantId\", \"userId\");\nCREATE INDEX \"AuditLog_tenantId_action_idx\" ON \"AuditLog\"(\"tenantId\", \"action\");\nCREATE INDEX \"AuditLog_tenantId_entityType_entityId_idx\" ON \"AuditLog\"(\"tenantId\", \"entityType\", \"entityId\");\n</code></pre> <p>Relationships: - Belongs to: Tenant, User (actor, optional)</p> <p>Key Fields: - <code>action</code>: Action performed (e.g., \"question.answer\", \"team.create\") - <code>entityType</code>: Type of entity affected - <code>before</code>, <code>after</code>: State before/after (JSON) - <code>metadata</code>: Additional context (JSON)</p> <p>Indexes: - Composite: <code>(tenantId, createdAt DESC)</code> for recent logs - Composite: <code>(tenantId, userId)</code> for per-user audit trails - Composite: <code>(tenantId, entityType, entityId)</code> for entity history</p>"},{"location":"architecture/database-schema/#tenantsettings","title":"TenantSettings","text":"<p>Per-tenant configuration stored as JSON.</p> <pre><code>CREATE TABLE \"TenantSettings\" (\n    \"id\"        TEXT PRIMARY KEY DEFAULT gen_random_uuid()::text,\n    \"tenantId\"  TEXT NOT NULL UNIQUE REFERENCES \"Tenant\"(\"id\") ON DELETE CASCADE,\n    \"settings\"  JSONB DEFAULT '{}',\n    \"createdAt\" TIMESTAMP DEFAULT NOW(),\n    \"updatedAt\" TIMESTAMP DEFAULT NOW()\n);\n\nCREATE INDEX \"TenantSettings_tenantId_idx\" ON \"TenantSettings\"(\"tenantId\");\n</code></pre> <p>Relationships: - Belongs to: Tenant (one-to-one)</p> <p>Key Fields: - <code>settings</code>: JSON object with per-tenant configuration</p>"},{"location":"architecture/database-schema/#data-types","title":"Data Types","text":""},{"location":"architecture/database-schema/#enums","title":"Enums","text":"<p>QuestionStatus: - <code>OPEN</code> - Question has not been answered - <code>ANSWERED</code> - Question has been answered by a moderator</p> <p>UserRole (not in database, enforced in application): - <code>viewer</code> - Read-only access - <code>member</code> - Can submit and upvote - <code>moderator</code> - Can answer, tag, pin, freeze (team-scoped) - <code>admin</code> - Full access (global) - <code>owner</code> - Complete control (global)</p>"},{"location":"architecture/database-schema/#uuids","title":"UUIDs","text":"<p>All primary keys use UUIDs (v4) for: - Globally unique identifiers - No sequential patterns (security) - Easier distributed systems (future)</p>"},{"location":"architecture/database-schema/#timestamps","title":"Timestamps","text":"<p>All timestamps use <code>TIMESTAMP WITHOUT TIME ZONE</code>: - Stored in UTC - Application handles timezone conversions</p>"},{"location":"architecture/database-schema/#indexes-and-performance","title":"Indexes and Performance","text":""},{"location":"architecture/database-schema/#composite-indexes","title":"Composite Indexes","text":"<p>All tenant-scoped queries benefit from composite indexes:</p> <pre><code>-- Most common query pattern\nWHERE tenantId = $1 AND status = $2\n\u2193\nINDEX ON (tenantId, status)\n\n-- Team-specific queries\nWHERE tenantId = $1 AND teamId = $2\n\u2193\nINDEX ON (tenantId, teamId)\n</code></pre>"},{"location":"architecture/database-schema/#full-text-search","title":"Full-Text Search","text":"<p>PostgreSQL's built-in full-text search with GIN indexes:</p> <pre><code>-- Managed by database trigger (not in Prisma schema)\nALTER TABLE \"Question\" ADD COLUMN \"search_vector\" tsvector;\n\nUPDATE \"Question\" SET \"search_vector\" = \n  to_tsvector('english', COALESCE(body, ''));\n\nCREATE INDEX \"Question_search_vector_idx\" ON \"Question\" \n  USING GIN(\"search_vector\");\n\n-- Trigger to auto-update search_vector\nCREATE TRIGGER question_search_vector_update \n  BEFORE INSERT OR UPDATE ON \"Question\"\n  FOR EACH ROW EXECUTE FUNCTION \n    tsvector_update_trigger(search_vector, 'pg_catalog.english', body);\n</code></pre> <p>Query Pattern: <pre><code>SELECT * FROM \"Question\"\nWHERE search_vector @@ plainto_tsquery('english', 'mobile app')\nAND tenantId = $1;\n</code></pre></p>"},{"location":"architecture/database-schema/#migrations","title":"Migrations","text":"<p>Migrations are managed by Prisma:</p> <pre><code># Generate migration\nnpx prisma migrate dev --name add_feature\n\n# Apply migrations\nnpx prisma migrate deploy\n\n# Reset database (dev only)\nnpx prisma migrate reset\n</code></pre> <p>Migration Files: - Located in <code>api/prisma/migrations/</code> - Each migration has timestamp + description - SQL files for each migration step</p>"},{"location":"architecture/database-schema/#data-integrity","title":"Data Integrity","text":""},{"location":"architecture/database-schema/#foreign-keys","title":"Foreign Keys","text":"<p>All relationships use foreign keys with appropriate actions:</p> <p>CASCADE DELETE: - Tenant deletion cascades to all tenant data - Team deletion cascades to memberships - Question deletion cascades to upvotes, tags</p> <p>SET NULL: - User deletion sets <code>authorId</code> to NULL (preserve questions) - Team deletion sets <code>teamId</code> to NULL (preserve questions)</p>"},{"location":"architecture/database-schema/#constraints","title":"Constraints","text":"<p>Unique Constraints: - <code>(tenantId, email)</code> - Email unique per tenant - <code>(tenantId, slug)</code> - Slug unique per tenant - <code>(questionId, userId)</code> - One upvote per user per question</p> <p>Check Constraints: - <code>status IN ('OPEN', 'ANSWERED')</code> - Valid question status</p>"},{"location":"architecture/database-schema/#backup-and-recovery","title":"Backup and Recovery","text":""},{"location":"architecture/database-schema/#backup-strategy","title":"Backup Strategy","text":"<pre><code># Full database backup\npg_dump -U app -d ama &gt; backup_$(date +%Y%m%d).sql\n\n# Tenant-specific backup\npg_dump -U app -d ama --table=Question --where=\"tenantId='acme'\" &gt; acme_questions.sql\n</code></pre>"},{"location":"architecture/database-schema/#point-in-time-recovery","title":"Point-in-Time Recovery","text":"<p>PostgreSQL WAL (Write-Ahead Logging) enabled for PITR: - Continuous archiving - Recovery to specific timestamp</p>"},{"location":"architecture/database-schema/#security","title":"Security","text":""},{"location":"architecture/database-schema/#row-level-security-future","title":"Row-Level Security (Future)","text":"<p>Consider PostgreSQL RLS for additional tenant isolation:</p> <pre><code>ALTER TABLE \"Question\" ENABLE ROW LEVEL SECURITY;\n\nCREATE POLICY tenant_isolation ON \"Question\"\n  USING (tenantId = current_setting('app.current_tenant')::text);\n</code></pre> <p>Currently using application-level enforcement (Prisma middleware).</p>"},{"location":"architecture/database-schema/#query-patterns","title":"Query Patterns","text":""},{"location":"architecture/database-schema/#common-queries","title":"Common Queries","text":"<p>Get open questions for a team: <pre><code>SELECT * FROM \"Question\"\nWHERE \"tenantId\" = $1 \n  AND \"teamId\" = $2 \n  AND \"status\" = 'OPEN'\nORDER BY \"upvotes\" DESC, \"createdAt\" DESC;\n</code></pre></p> <p>Search questions: <pre><code>SELECT * FROM \"Question\"\nWHERE \"tenantId\" = $1\n  AND \"search_vector\" @@ plainto_tsquery('english', $2)\nORDER BY ts_rank(\"search_vector\", plainto_tsquery('english', $2)) DESC;\n</code></pre></p> <p>Get user's team memberships: <pre><code>SELECT t.*, tm.\"role\"\nFROM \"Team\" t\nINNER JOIN \"TeamMembership\" tm ON tm.\"teamId\" = t.\"id\"\nWHERE tm.\"userId\" = $1 AND t.\"tenantId\" = $2;\n</code></pre></p>"},{"location":"architecture/database-schema/#related-documentation","title":"Related Documentation","text":"<ul> <li>System Design - Overall architecture</li> <li>Multi-Tenancy Architecture - Tenant isolation details</li> <li>API Reference - API endpoints and usage</li> </ul>"},{"location":"architecture/database-schema/#schema-visualization-tools","title":"Schema Visualization Tools","text":"<p>To generate visual ERDs:</p> <pre><code># Using Prisma\nnpx prisma generate\n\n# Using SchemaSpy\njava -jar schemaspy.jar -t pgsql -db ama -u app -p app\n\n# Using DBeaver (GUI)\n# File \u2192 Export \u2192 ERD\n</code></pre>"},{"location":"architecture/multi-tenancy/","title":"Multi-Tenancy Architecture","text":"<p>PulseStage is built as a multi-tenant application from the ground up. This document explains the design, implementation, and best practices for tenant isolation.</p>"},{"location":"architecture/multi-tenancy/#what-is-multi-tenancy","title":"What is Multi-Tenancy?","text":"<p>Multi-tenancy allows a single application instance to serve multiple customers (tenants) with complete data isolation. Each tenant has:</p> <ul> <li>Separate data: Questions, teams, users, tags</li> <li>Separate configuration: Tenant-specific settings</li> <li>Isolated access: No cross-tenant data visibility</li> <li>Shared infrastructure: Single database, single application</li> </ul>"},{"location":"architecture/multi-tenancy/#architecture-overview","title":"Architecture Overview","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                      Users/Requests                       \u2502\n\u2502        (Tenant A: acme.com, Tenant B: widgets.io)        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                          \u2502\n                          \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502              Tenant Resolver Middleware                   \u2502\n\u2502   \u2022 Resolve tenant from: subdomain, header, or session   \u2502\n\u2502   \u2022 Store tenant context in AsyncLocalStorage            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                          \u2502\n                          \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                 Application Middleware                    \u2502\n\u2502      \u2022 Auth \u2022 RBAC \u2022 CSRF \u2022 Rate Limiting \u2022 Audit        \u2502\n\u2502         (All tenant-aware via context)                    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                          \u2502\n                          \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                  Prisma ORM Middleware                    \u2502\n\u2502    \u2022 Automatically inject tenantId in all queries        \u2502\n\u2502    \u2022 Prevent cross-tenant data access                    \u2502\n\u2502    \u2022 Enforce tenant filtering at ORM level               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                          \u2502\n                          \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                  PostgreSQL Database                      \u2502\n\u2502        \u2022 All tables have tenantId column                 \u2502\n\u2502        \u2022 Indexes include tenantId for performance        \u2502\n\u2502        \u2022 No foreign keys across tenants                  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture/multi-tenancy/#tenant-data-model","title":"Tenant Data Model","text":"<p>Every tenant-scoped table includes a <code>tenantId</code> foreign key:</p> <pre><code>model Tenant {\n  id        String   @id @default(uuid())\n  slug      String   @unique\n  name      String\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  // Relationships (all tenant-scoped)\n  teams             Team[]\n  questions         Question[]\n  tags              Tag[]\n  users             User[]\n  userPreferences   UserPreferences[]\n  auditLogs         AuditLog[]\n  settings          TenantSettings?\n}\n\nmodel Question {\n  id        String   @id @default(uuid())\n  tenantId  String   // \ud83d\udc48 Tenant isolation\n  body      String\n  // ... other fields\n\n  tenant    Tenant   @relation(fields: [tenantId], references: [id])\n\n  @@index([tenantId])          // \ud83d\udc48 Performance\n  @@index([tenantId, status])  // \ud83d\udc48 Composite index\n}\n</code></pre>"},{"location":"architecture/multi-tenancy/#tenant-resolution-strategy","title":"Tenant Resolution Strategy","text":"<p>PulseStage resolves tenants using multiple strategies (in priority order):</p>"},{"location":"architecture/multi-tenancy/#1-query-parameter-highest-priority","title":"1. Query Parameter (Highest Priority)","text":"<p>Used for SSE connections where headers can't be modified: <pre><code>GET /sse?tenantId=acme\n</code></pre></p>"},{"location":"architecture/multi-tenancy/#2-request-header-medium-priority","title":"2. Request Header (Medium Priority)","text":"<p>Used by the frontend for all API requests: <pre><code>X-Tenant-Id: acme\n</code></pre></p>"},{"location":"architecture/multi-tenancy/#3-admin-session-low-priority","title":"3. Admin Session (Low Priority)","text":"<p>Admins authenticated via session have tenant stored in session data: <pre><code>req.session.tenantId = 'acme'\n</code></pre></p>"},{"location":"architecture/multi-tenancy/#4-default-tenant-fallback","title":"4. Default Tenant (Fallback)","text":"<p>If no tenant specified, use default: <pre><code>tenantId = 'default'\n</code></pre></p>"},{"location":"architecture/multi-tenancy/#implementation-details","title":"Implementation Details","text":""},{"location":"architecture/multi-tenancy/#tenant-context-storage","title":"Tenant Context Storage","text":"<p>We use Node.js AsyncLocalStorage to maintain tenant context throughout the request lifecycle:</p> <pre><code>// tenantContext.ts\nimport { AsyncLocalStorage } from 'async_hooks';\n\nexport interface TenantContext {\n  tenantId: string;\n  tenantSlug: string;\n}\n\nconst asyncLocalStorage = new AsyncLocalStorage&lt;TenantContext&gt;();\n\nexport function getTenantContext(): TenantContext {\n  const context = asyncLocalStorage.getStore();\n  if (!context) {\n    throw new Error('Tenant context not set');\n  }\n  return context;\n}\n\nexport function setTenantContext(context: TenantContext) {\n  return asyncLocalStorage.enterWith(context);\n}\n</code></pre> <p>Benefits: - No need to pass <code>tenantId</code> through function parameters - Automatic context propagation through async operations - Thread-safe (each request has isolated context)</p>"},{"location":"architecture/multi-tenancy/#tenant-resolver-middleware","title":"Tenant Resolver Middleware","text":"<p>Resolves tenant and stores in AsyncLocalStorage:</p> <pre><code>// tenantResolver.ts\nexport function createTenantResolverMiddleware(prisma: PrismaClient) {\n  return async (req: Request, res: Response, next: NextFunction) =&gt; {\n    let tenantId: string | undefined;\n\n    // Priority 1: Query parameter (for SSE)\n    tenantId = req.query.tenantId as string;\n\n    // Priority 2: Header (for API requests)\n    if (!tenantId) {\n      tenantId = req.headers['x-tenant-id'] as string;\n    }\n\n    // Priority 3: Session (for admin)\n    if (!tenantId &amp;&amp; req.session?.tenantId) {\n      tenantId = req.session.tenantId;\n    }\n\n    // Priority 4: Default fallback\n    if (!tenantId) {\n      tenantId = 'default';\n    }\n\n    // Resolve tenant from database\n    const tenant = await prisma.tenant.findUnique({\n      where: { slug: tenantId }\n    });\n\n    if (!tenant) {\n      return res.status(404).json({ \n        error: 'Tenant not found' \n      });\n    }\n\n    // Store in AsyncLocalStorage\n    setTenantContext({\n      tenantId: tenant.id,\n      tenantSlug: tenant.slug\n    });\n\n    next();\n  };\n}\n</code></pre>"},{"location":"architecture/multi-tenancy/#prisma-middleware-for-automatic-filtering","title":"Prisma Middleware for Automatic Filtering","text":"<p>Critical: This middleware automatically injects <code>tenantId</code> in all queries:</p> <pre><code>// prismaMiddleware.ts\nexport function applyTenantMiddleware(prisma: PrismaClient) {\n  prisma.$use(async (params, next) =&gt; {\n    // Get tenant context (throws if not set)\n    const tenantContext = tryGetTenantContext();\n\n    if (!tenantContext) {\n      // No tenant context = likely a setup operation\n      return next(params);\n    }\n\n    const tenantId = tenantContext.tenantId;\n\n    // Models that require tenant filtering\n    const tenantedModels = [\n      'Question',\n      'Team', \n      'Tag',\n      'QuestionTag',\n      'User',\n      'TeamMembership',\n      'UserPreferences',\n      'Upvote',\n      'AuditLog',\n      'TenantSettings'\n    ];\n\n    if (!tenantedModels.includes(params.model || '')) {\n      return next(params);\n    }\n\n    // Inject tenantId into WHERE clause\n    if (params.action === 'findUnique' || \n        params.action === 'findFirst' ||\n        params.action === 'findMany' ||\n        params.action === 'count' ||\n        params.action === 'aggregate') {\n      params.args = params.args || {};\n      params.args.where = params.args.where || {};\n      params.args.where.tenantId = tenantId;\n    }\n\n    // Inject tenantId into CREATE\n    if (params.action === 'create') {\n      params.args = params.args || {};\n      params.args.data = params.args.data || {};\n      params.args.data.tenantId = tenantId;\n    }\n\n    // Inject tenantId into UPDATE/DELETE\n    if (params.action === 'update' || \n        params.action === 'updateMany' ||\n        params.action === 'delete' ||\n        params.action === 'deleteMany') {\n      params.args = params.args || {};\n      params.args.where = params.args.where || {};\n      params.args.where.tenantId = tenantId;\n    }\n\n    return next(params);\n  });\n}\n</code></pre> <p>This is the magic: You never need to manually add <code>tenantId</code> filters in your application code!</p>"},{"location":"architecture/multi-tenancy/#example-creating-a-question","title":"Example: Creating a Question","text":"<p>Without tenant middleware (manual filtering): <pre><code>// \u274c Manual approach (error-prone)\nconst question = await prisma.question.create({\n  data: {\n    body: 'What is your favorite color?',\n    tenantId: req.user.tenantId,  // Easy to forget!\n    status: 'OPEN'\n  }\n});\n</code></pre></p> <p>With tenant middleware (automatic): <pre><code>// \u2705 Automatic tenant injection\nconst question = await prisma.question.create({\n  data: {\n    body: 'What is your favorite color?',\n    status: 'OPEN'\n    // tenantId automatically injected by middleware!\n  }\n});\n</code></pre></p>"},{"location":"architecture/multi-tenancy/#example-querying-questions","title":"Example: Querying Questions","text":"<pre><code>// \u2705 Automatic tenant filtering\nconst questions = await prisma.question.findMany({\n  where: {\n    status: 'OPEN'\n    // tenantId automatically added by middleware!\n  },\n  orderBy: { upvotes: 'desc' }\n});\n\n// Results only include questions from current tenant\n</code></pre>"},{"location":"architecture/multi-tenancy/#tenant-settings","title":"Tenant Settings","text":"<p>Per-tenant configuration is stored in the <code>TenantSettings</code> model:</p> <pre><code>model TenantSettings {\n  id        String   @id @default(uuid())\n  tenantId  String   @unique\n  tenant    Tenant   @relation(fields: [tenantId], references: [id])\n\n  // JSON field for flexibility\n  settings  Json     @default(\"{}\")\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n}\n</code></pre> <p>Settings Schema: <pre><code>{\n  \"questions\": {\n    \"minLength\": 10,\n    \"maxLength\": 2000,\n    \"requireTeam\": true,\n    \"allowAnonymous\": false\n  },\n  \"users\": {\n    \"autoApprove\": true,\n    \"defaultRole\": \"member\"\n  },\n  \"security\": {\n    \"requireEmailVerification\": false,\n    \"sessionTimeout\": 1800000\n  },\n  \"branding\": {\n    \"primaryColor\": \"#3B82F6\",\n    \"logoUrl\": null\n  },\n  \"features\": {\n    \"enableComments\": false,\n    \"enableVoting\": true,\n    \"enableTags\": true\n  }\n}\n</code></pre></p> <p>Accessing Settings: <pre><code>import { settingsService } from './lib/settingsService';\n\n// Get tenant settings (with defaults)\nconst settings = await settingsService.getTenantSettings();\n\n// Get specific setting\nconst maxLength = settings.questions?.maxLength || 2000;\n\n// Update settings\nawait settingsService.updateTenantSettings({\n  questions: {\n    maxLength: 1500\n  }\n});\n</code></pre></p>"},{"location":"architecture/multi-tenancy/#tenant-isolation-guarantees","title":"Tenant Isolation Guarantees","text":""},{"location":"architecture/multi-tenancy/#1-database-level","title":"1. Database Level","text":"<ul> <li>\u2705 All queries automatically filtered by <code>tenantId</code></li> <li>\u2705 Indexes include <code>tenantId</code> for performance</li> <li>\u2705 Foreign keys prevent cross-tenant references</li> <li>\u2705 Cascading deletes maintain referential integrity</li> </ul>"},{"location":"architecture/multi-tenancy/#2-application-level","title":"2. Application Level","text":"<ul> <li>\u2705 Tenant context required for all authenticated routes</li> <li>\u2705 AsyncLocalStorage ensures context propagation</li> <li>\u2705 Middleware validates tenant existence</li> <li>\u2705 Rate limiting is per-tenant</li> </ul>"},{"location":"architecture/multi-tenancy/#3-api-level","title":"3. API Level","text":"<ul> <li>\u2705 All endpoints validate tenant context</li> <li>\u2705 SSE connections are tenant-scoped</li> <li>\u2705 Audit logs include tenant information</li> <li>\u2705 Exports filtered by tenant</li> </ul>"},{"location":"architecture/multi-tenancy/#4-frontend-level","title":"4. Frontend Level","text":"<ul> <li>\u2705 API client sends <code>X-Tenant-Id</code> header</li> <li>\u2705 SSE connections include <code>tenantId</code> query param</li> <li>\u2705 User can only access their tenant's data</li> <li>\u2705 Team selector shows only tenant's teams</li> </ul>"},{"location":"architecture/multi-tenancy/#security-considerations","title":"Security Considerations","text":""},{"location":"architecture/multi-tenancy/#preventing-tenant-leakage","title":"Preventing Tenant Leakage","text":"<p>\u2705 Safe Patterns: <pre><code>// Prisma middleware handles filtering automatically\nconst questions = await prisma.question.findMany({\n  where: { status: 'OPEN' }\n});\n\n// Context-aware audit logging\nawait auditService.log({\n  action: 'question.created',\n  entityType: 'Question',\n  entityId: question.id\n  // tenantId automatically added\n});\n</code></pre></p> <p>\u274c Unsafe Patterns: <pre><code>// NEVER bypass tenant filtering\nconst allQuestions = await prisma.$queryRaw`\n  SELECT * FROM \"Question\"\n`;  // No tenant filter!\n\n// NEVER use raw queries without tenant filter\nconst results = await prisma.$executeRaw`\n  UPDATE \"Question\" SET status = 'ANSWERED'\n`;  // Updates ALL tenants!\n</code></pre></p>"},{"location":"architecture/multi-tenancy/#testing-tenant-isolation","title":"Testing Tenant Isolation","text":"<pre><code>// Test: Ensure cross-tenant access is blocked\ntest('should not return questions from other tenants', async () =&gt; {\n  // Create question in tenant A\n  setTenantContext({ tenantId: 'tenant-a', tenantSlug: 'tenant-a' });\n  await prisma.question.create({\n    data: { body: 'Tenant A question' }\n  });\n\n  // Try to access from tenant B\n  setTenantContext({ tenantId: 'tenant-b', tenantSlug: 'tenant-b' });\n  const questions = await prisma.question.findMany();\n\n  // Should be empty (no cross-tenant access)\n  expect(questions).toHaveLength(0);\n});\n</code></pre>"},{"location":"architecture/multi-tenancy/#tenant-lifecycle","title":"Tenant Lifecycle","text":""},{"location":"architecture/multi-tenancy/#creating-a-tenant","title":"Creating a Tenant","text":"<pre><code>// Auto-bootstrap (on first startup)\nconst tenant = await prisma.tenant.create({\n  data: {\n    name: 'Acme Corp',\n    slug: 'acme'\n  }\n});\n\n// Create default settings\nawait prisma.tenantSettings.create({\n  data: {\n    tenantId: tenant.id,\n    settings: {} // Uses defaults\n  }\n});\n</code></pre>"},{"location":"architecture/multi-tenancy/#setup-wizard-flow","title":"Setup Wizard Flow","text":"<ol> <li>User visits app \u2192 No teams exist</li> <li>Setup wizard displays \u2192 Two options:</li> <li>Load demo data (creates <code>acme</code> tenant)</li> <li>Create custom organization (creates tenant with custom name)</li> <li>Tenant created \u2192 Auto-restart to load new tenant</li> <li>User navigates to <code>/sso-test.html</code> \u2192 Sign in with new account</li> </ol>"},{"location":"architecture/multi-tenancy/#tenant-deletion","title":"Tenant Deletion","text":"<pre><code>// Cascade delete (removes all tenant data)\nawait prisma.tenant.delete({\n  where: { id: tenantId }\n});\n\n// Automatically deletes:\n// - All teams\n// - All questions\n// - All users\n// - All tags\n// - All audit logs\n// - Tenant settings\n</code></pre>"},{"location":"architecture/multi-tenancy/#performance-optimizations","title":"Performance Optimizations","text":""},{"location":"architecture/multi-tenancy/#indexing-strategy","title":"Indexing Strategy","text":"<p>All tenant-scoped tables have composite indexes:</p> <pre><code>-- Single-column index\nCREATE INDEX \"Question_tenantId_idx\" ON \"Question\"(\"tenantId\");\n\n-- Composite indexes (tenant + filter)\nCREATE INDEX \"Question_tenantId_status_idx\" \n  ON \"Question\"(\"tenantId\", \"status\");\n\nCREATE INDEX \"Question_tenantId_teamId_idx\" \n  ON \"Question\"(\"tenantId\", \"teamId\");\n\n-- Audit log (descending for recent logs)\nCREATE INDEX \"AuditLog_tenantId_createdAt_idx\" \n  ON \"AuditLog\"(\"tenantId\", \"createdAt\" DESC);\n</code></pre>"},{"location":"architecture/multi-tenancy/#query-optimization","title":"Query Optimization","text":"<pre><code>// \u2705 Efficient: Uses composite index\nconst openQuestions = await prisma.question.findMany({\n  where: {\n    // tenantId: auto-injected (uses index)\n    status: 'OPEN'\n  },\n  orderBy: { createdAt: 'desc' }\n});\n\n// \u2705 Efficient: Prisma generates optimized query\nSELECT * FROM \"Question\" \nWHERE \"tenantId\" = $1 AND \"status\" = 'OPEN'\nORDER BY \"createdAt\" DESC;\n</code></pre>"},{"location":"architecture/multi-tenancy/#multi-tenant-sse-broadcasting","title":"Multi-Tenant SSE Broadcasting","text":"<p>Real-time events are tenant-scoped:</p> <pre><code>// EventBus maintains per-tenant connections\nclass EventBus {\n  private clients: Map&lt;string, SSEClient[]&gt; = new Map();\n\n  addClient(tenantId: string, res: Response): string {\n    if (!this.clients.has(tenantId)) {\n      this.clients.set(tenantId, []);\n    }\n    this.clients.get(tenantId)!.push(client);\n  }\n\n  publish(event: SSEEvent) {\n    const tenantClients = this.clients.get(event.tenantId);\n    // Only sends to clients in the same tenant\n    for (const client of tenantClients) {\n      client.res.write(eventData);\n    }\n  }\n}\n</code></pre>"},{"location":"architecture/multi-tenancy/#scaling-considerations","title":"Scaling Considerations","text":""},{"location":"architecture/multi-tenancy/#single-database-approach-current","title":"Single-Database Approach (Current)","text":"<p>Advantages: - \u2705 Simple deployment - \u2705 Easy backups - \u2705 Cross-tenant reporting possible - \u2705 Lower operational overhead</p> <p>Limitations: - \u26a0\ufe0f Noisy neighbor problem (one tenant can impact others) - \u26a0\ufe0f Harder to scale beyond ~100 tenants - \u26a0\ufe0f Single point of failure</p>"},{"location":"architecture/multi-tenancy/#database-per-tenant-future","title":"Database-per-Tenant (Future)","text":"<p>For very large deployments, consider:</p> <pre><code>Tenant Router\n    \u251c\u2500\u2500 Tenant A \u2192 Database A\n    \u251c\u2500\u2500 Tenant B \u2192 Database B\n    \u2514\u2500\u2500 Tenant C \u2192 Database C\n</code></pre> <p>Advantages: - \u2705 Complete isolation - \u2705 Per-tenant scaling - \u2705 Better security (physical separation)</p> <p>Challenges: - \u274c Complex deployment - \u274c Difficult cross-tenant features - \u274c Higher operational cost</p>"},{"location":"architecture/multi-tenancy/#best-practices","title":"Best Practices","text":""},{"location":"architecture/multi-tenancy/#dos","title":"\u2705 Do's","text":"<ol> <li>Always use Prisma ORM - Let middleware handle filtering</li> <li>Test tenant isolation - Verify no cross-tenant access</li> <li>Include tenantId in logs - For debugging and auditing</li> <li>Monitor per-tenant metrics - Track usage and performance</li> <li>Set tenant context early - In middleware, before any DB access</li> </ol>"},{"location":"architecture/multi-tenancy/#donts","title":"\u274c Don'ts","text":"<ol> <li>Don't use raw SQL - Bypasses tenant middleware</li> <li>Don't hardcode tenant IDs - Always use context</li> <li>Don't skip tenant validation - Always verify tenant exists</li> <li>Don't share sessions across tenants - Each tenant = separate context</li> <li>Don't forget indexes - All queries should use composite indexes</li> </ol>"},{"location":"architecture/multi-tenancy/#troubleshooting","title":"Troubleshooting","text":""},{"location":"architecture/multi-tenancy/#tenant-context-not-set-error","title":"\"Tenant context not set\" Error","text":"<p>Cause: Accessing database before tenant context established</p> <p>Solution: Ensure tenant resolver middleware runs first <pre><code>app.use(createTenantResolverMiddleware(prisma));  // Must be early!\napp.use('/questions', questionsRouter);\n</code></pre></p>"},{"location":"architecture/multi-tenancy/#cross-tenant-data-visible","title":"Cross-Tenant Data Visible","text":"<p>Cause: Raw query bypassing Prisma middleware</p> <p>Solution: Use Prisma ORM or manually filter <pre><code>// \u274c Bad\nconst results = await prisma.$queryRaw`SELECT * FROM \"Question\"`;\n\n// \u2705 Good\nconst results = await prisma.question.findMany();\n</code></pre></p>"},{"location":"architecture/multi-tenancy/#slow-queries","title":"Slow Queries","text":"<p>Cause: Missing composite index on <code>tenantId</code></p> <p>Solution: Add index in Prisma schema <pre><code>@@index([tenantId, status])\n</code></pre></p>"},{"location":"architecture/multi-tenancy/#related-documentation","title":"Related Documentation","text":"<ul> <li>System Design - Overall architecture</li> <li>Database Schema - ERD and table details</li> <li>Security Overview - Security features</li> </ul>"},{"location":"architecture/multi-tenancy/#references","title":"References","text":"<ul> <li>Prisma Middleware Docs</li> <li>AsyncLocalStorage</li> <li>Multi-Tenant SaaS Patterns</li> </ul>"},{"location":"architecture/real-time/","title":"Real-Time Architecture","text":"<p>PulseStage uses Server-Sent Events (SSE) to provide real-time updates for questions, answers, and moderation actions. This document explains the implementation, design decisions, and best practices.</p>"},{"location":"architecture/real-time/#why-server-sent-events","title":"Why Server-Sent Events?","text":"<p>We chose SSE over WebSockets for several reasons:</p> Feature SSE WebSockets Direction Server \u2192 Client (one-way) Bidirectional Protocol HTTP TCP (with HTTP upgrade) Reconnection Automatic Manual implementation Browser Support Excellent Excellent Firewall/Proxy Works everywhere Sometimes blocked Complexity Simple More complex Use Case Push updates Chat, real-time bidirectional <p>Perfect for PulseStage: - We only need server\u2192client updates (questions, upvotes, answers) - Automatic reconnection is built-in - Simpler implementation and debugging - Better compatibility with corporate firewalls - HTTP-based = works with existing infrastructure</p>"},{"location":"architecture/real-time/#architecture-overview","title":"Architecture Overview","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    Client (Browser)                     \u2502\n\u2502  EventSource('/sse?tenantId=acme')                     \u2502\n\u2502    \u2193                                                    \u2502\n\u2502  \u2022 Auto-reconnect on disconnect                        \u2502\n\u2502  \u2022 Receives events: question:created, upvoted, etc.    \u2502\n\u2502  \u2022 Updates React state \u2192 UI re-renders                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                      \u2502 HTTP GET /sse\n                      \u2502 (Long-lived connection)\n                      \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                   API Server (Express)                  \u2502\n\u2502                                                         \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502          SSE Endpoint (/sse)                    \u2502  \u2502\n\u2502  \u2502  \u2022 Resolve tenant (from query param)           \u2502  \u2502\n\u2502  \u2502  \u2022 Register client with EventBus               \u2502  \u2502\n\u2502  \u2502  \u2022 Keep connection open                        \u2502  \u2502\n\u2502  \u2502  \u2022 Send heartbeat every 30s                    \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502                      \u2502                                  \u2502\n\u2502                      \u25bc                                  \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502           EventBus (Singleton)                  \u2502  \u2502\n\u2502  \u2502  \u2022 Map&lt;tenantId, SSEClient[]&gt;                  \u2502  \u2502\n\u2502  \u2502  \u2022 addClient(tenantId, response)               \u2502  \u2502\n\u2502  \u2502  \u2022 removeClient(tenantId, clientId)            \u2502  \u2502\n\u2502  \u2502  \u2022 publish(SSEEvent) \u2192 all tenant clients      \u2502  \u2502\n\u2502  \u2502  \u2022 sendHeartbeat() every 30s                   \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502                      \u25b2                                  \u2502\n\u2502                      \u2502 eventBus.publish()              \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502        API Route Handlers                       \u2502  \u2502\n\u2502  \u2502  \u2022 POST /questions \u2192 publish('question:created')\u2502  \u2502\n\u2502  \u2502  \u2022 POST /upvote \u2192 publish('question:upvoted')  \u2502  \u2502\n\u2502  \u2502  \u2022 POST /answer \u2192 publish('question:answered') \u2502  \u2502\n\u2502  \u2502  \u2022 POST /tag \u2192 publish('question:tagged')      \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture/real-time/#implementation-details","title":"Implementation Details","text":""},{"location":"architecture/real-time/#server-side-eventbus","title":"Server-Side: EventBus","text":"<p>Central singleton that manages SSE connections and broadcasts events.</p> <p>File: <code>api/src/lib/eventBus.ts</code></p> <pre><code>import { Response } from 'express';\n\nexport type SSEEventType =\n  | 'question:created'\n  | 'question:upvoted'\n  | 'question:answered'\n  | 'question:tagged'\n  | 'question:untagged'\n  | 'question:pinned'\n  | 'question:frozen'\n  | 'heartbeat';\n\nexport interface SSEEvent {\n  type: SSEEventType;\n  tenantId: string;\n  data: any;\n  timestamp: number;\n}\n\nexport interface SSEClient {\n  id: string;\n  tenantId: string;\n  res: Response;\n  connectedAt: number;\n}\n\nclass EventBus {\n  // Per-tenant client tracking\n  private clients: Map&lt;string, SSEClient[]&gt; = new Map();\n  private heartbeatInterval: NodeJS.Timeout | null = null;\n  private connectionCounter = 0;\n\n  constructor() {\n    this.startHeartbeat();\n  }\n\n  /**\n   * Add a client connection for a specific tenant\n   */\n  addClient(tenantId: string, res: Response): string {\n    const clientId = `client-${++this.connectionCounter}-${Date.now()}`;\n    const client: SSEClient = {\n      id: clientId,\n      tenantId,\n      res,\n      connectedAt: Date.now(),\n    };\n\n    if (!this.clients.has(tenantId)) {\n      this.clients.set(tenantId, []);\n    }\n\n    this.clients.get(tenantId)!.push(client);\n\n    console.log(`\ud83d\udce1 SSE: Client ${clientId} connected to tenant ${tenantId}`);\n    return clientId;\n  }\n\n  /**\n   * Remove a client connection\n   */\n  removeClient(tenantId: string, clientId: string) {\n    const tenantClients = this.clients.get(tenantId);\n    if (!tenantClients) return;\n\n    const index = tenantClients.findIndex(c =&gt; c.id === clientId);\n    if (index !== -1) {\n      tenantClients.splice(index, 1);\n\n      if (tenantClients.length === 0) {\n        this.clients.delete(tenantId);\n      }\n\n      console.log(`\ud83d\udce1 SSE: Client ${clientId} disconnected from tenant ${tenantId}`);\n    }\n  }\n\n  /**\n   * Publish an event to all clients in a specific tenant\n   */\n  publish(event: SSEEvent) {\n    const tenantClients = this.clients.get(event.tenantId);\n    if (!tenantClients || tenantClients.length === 0) {\n      return; // No clients to send to\n    }\n\n    const eventData = `data: ${JSON.stringify(event)}\\n\\n`;\n    const deadClients: string[] = [];\n\n    for (const client of tenantClients) {\n      try {\n        client.res.write(eventData);\n      } catch (error) {\n        // Connection is dead, mark for removal\n        deadClients.push(client.id);\n      }\n    }\n\n    // Clean up dead connections\n    for (const clientId of deadClients) {\n      this.removeClient(event.tenantId, clientId);\n    }\n  }\n\n  /**\n   * Send heartbeat to all connected clients\n   */\n  private sendHeartbeat() {\n    const now = Date.now();\n\n    for (const [tenantId, tenantClients] of this.clients.entries()) {\n      const heartbeatEvent: SSEEvent = {\n        type: 'heartbeat',\n        tenantId,\n        data: { timestamp: now },\n        timestamp: now,\n      };\n\n      this.publish(heartbeatEvent);\n    }\n  }\n\n  /**\n   * Start periodic heartbeat\n   */\n  private startHeartbeat() {\n    this.heartbeatInterval = setInterval(() =&gt; {\n      this.sendHeartbeat();\n    }, 30000); // 30 seconds\n  }\n\n  /**\n   * Get metrics for monitoring\n   */\n  getMetrics() {\n    const tenantMetrics: Record&lt;string, number&gt; = {};\n    for (const [tenantId, clients] of this.clients.entries()) {\n      tenantMetrics[tenantId] = clients.length;\n    }\n\n    return {\n      totalConnections: this.getTotalClientCount(),\n      tenantConnections: tenantMetrics,\n      tenantCount: this.clients.size,\n    };\n  }\n}\n\n// Singleton instance\nexport const eventBus = new EventBus();\n</code></pre>"},{"location":"architecture/real-time/#server-side-sse-endpoint","title":"Server-Side: SSE Endpoint","text":"<p>Handles client connections and maintains open connections.</p> <p>File: <code>api/src/app.ts</code> (excerpt)</p> <pre><code>import { eventBus } from './lib/eventBus.js';\nimport { createTenantResolverMiddleware } from './middleware/tenantResolver.js';\n\n// SSE endpoint for real-time updates\napp.get('/sse', async (req: Request, res: Response) =&gt; {\n  // Resolve tenant (from query parameter)\n  let tenantSlug = req.query.tenantId as string || 'default';\n\n  const tenant = await prisma.tenant.findUnique({\n    where: { slug: tenantSlug }\n  });\n\n  if (!tenant) {\n    return res.status(404).json({ error: 'Tenant not found' });\n  }\n\n  // Set headers for SSE\n  res.setHeader('Content-Type', 'text/event-stream');\n  res.setHeader('Cache-Control', 'no-cache');\n  res.setHeader('Connection', 'keep-alive');\n  res.setHeader('X-Accel-Buffering', 'no'); // Disable nginx buffering\n\n  // Register client with EventBus\n  const clientId = eventBus.addClient(tenant.id, res);\n\n  // Send initial connection confirmation\n  res.write(`data: ${JSON.stringify({\n    type: 'connected',\n    tenantId: tenant.id,\n    timestamp: Date.now()\n  })}\\n\\n`);\n\n  // Handle client disconnect\n  req.on('close', () =&gt; {\n    eventBus.removeClient(tenant.id, clientId);\n  });\n});\n</code></pre>"},{"location":"architecture/real-time/#server-side-publishing-events","title":"Server-Side: Publishing Events","text":"<p>Route handlers publish events after database updates.</p> <pre><code>// Example: Question creation\napp.post('/questions', async (req: Request, res: Response) =&gt; {\n  // ... validate input ...\n\n  const question = await prisma.question.create({\n    data: {\n      body: req.body.body,\n      status: 'OPEN',\n      teamId: req.body.teamId\n    }\n  });\n\n  // Broadcast event to all connected clients\n  eventBus.publish({\n    type: 'question:created',\n    tenantId: getTenantContext().tenantId,\n    data: question,\n    timestamp: Date.now()\n  });\n\n  res.json(question);\n});\n\n// Example: Upvote\napp.post('/questions/:id/upvote', async (req: Request, res: Response) =&gt; {\n  // ... validate and create upvote ...\n\n  const question = await prisma.question.update({\n    where: { id: req.params.id },\n    data: { upvotes: { increment: 1 } }\n  });\n\n  eventBus.publish({\n    type: 'question:upvoted',\n    tenantId: getTenantContext().tenantId,\n    data: { questionId: question.id, upvotes: question.upvotes },\n    timestamp: Date.now()\n  });\n\n  res.json(question);\n});\n</code></pre>"},{"location":"architecture/real-time/#client-side-ssecontext","title":"Client-Side: SSEContext","text":"<p>React context that manages SSE connection and distributes events.</p> <p>File: <code>web/src/contexts/SSEContext.tsx</code></p> <pre><code>import { createContext, useContext, useEffect, useState, useRef } from 'react';\n\ninterface SSEContextType {\n  connected: boolean;\n  lastEvent: SSEEvent | null;\n}\n\nconst SSEContext = createContext&lt;SSEContextType&gt;({\n  connected: false,\n  lastEvent: null\n});\n\nexport function SSEProvider({ children, tenantId }: { \n  children: React.ReactNode; \n  tenantId: string;\n}) {\n  const [connected, setConnected] = useState(false);\n  const [lastEvent, setLastEvent] = useState&lt;SSEEvent | null&gt;(null);\n  const eventSourceRef = useRef&lt;EventSource | null&gt;(null);\n\n  useEffect(() =&gt; {\n    // Create SSE connection\n    const eventSource = new EventSource(\n      `${API_URL}/sse?tenantId=${tenantId}`\n    );\n\n    eventSource.onopen = () =&gt; {\n      console.log('\ud83d\udce1 SSE: Connected');\n      setConnected(true);\n    };\n\n    eventSource.onmessage = (event) =&gt; {\n      try {\n        const data = JSON.parse(event.data);\n\n        // Ignore heartbeats (handled internally)\n        if (data.type === 'heartbeat') {\n          return;\n        }\n\n        console.log('\ud83d\udce1 SSE: Event received', data.type);\n        setLastEvent(data);\n      } catch (error) {\n        console.error('\ud83d\udce1 SSE: Failed to parse event', error);\n      }\n    };\n\n    eventSource.onerror = () =&gt; {\n      console.log('\ud83d\udce1 SSE: Disconnected, will reconnect...');\n      setConnected(false);\n      // EventSource automatically reconnects\n    };\n\n    eventSourceRef.current = eventSource;\n\n    // Cleanup on unmount\n    return () =&gt; {\n      eventSource.close();\n      eventSourceRef.current = null;\n    };\n  }, [tenantId]);\n\n  return (\n    &lt;SSEContext.Provider value={{ connected, lastEvent }}&gt;\n      {children}\n    &lt;/SSEContext.Provider&gt;\n  );\n}\n\nexport const useSSE = () =&gt; useContext(SSEContext);\n</code></pre>"},{"location":"architecture/real-time/#client-side-using-sse-events","title":"Client-Side: Using SSE Events","text":"<p>Components subscribe to SSE events and update state.</p> <pre><code>import { useSSE } from '../contexts/SSEContext';\nimport { useEffect } from 'react';\n\nexport function QuestionsPage() {\n  const [questions, setQuestions] = useState&lt;Question[]&gt;([]);\n  const { lastEvent } = useSSE();\n\n  // Load initial questions\n  useEffect(() =&gt; {\n    fetchQuestions().then(setQuestions);\n  }, []);\n\n  // Handle SSE events\n  useEffect(() =&gt; {\n    if (!lastEvent) return;\n\n    switch (lastEvent.type) {\n      case 'question:created':\n        // Add new question to list\n        setQuestions(prev =&gt; [lastEvent.data, ...prev]);\n        break;\n\n      case 'question:upvoted':\n        // Update upvote count\n        setQuestions(prev =&gt; prev.map(q =&gt; \n          q.id === lastEvent.data.questionId\n            ? { ...q, upvotes: lastEvent.data.upvotes }\n            : q\n        ));\n        break;\n\n      case 'question:answered':\n        // Move to answered list or update status\n        setQuestions(prev =&gt; prev.map(q =&gt;\n          q.id === lastEvent.data.id\n            ? { ...q, status: 'ANSWERED', responseText: lastEvent.data.responseText }\n            : q\n        ));\n        break;\n\n      case 'question:tagged':\n        // Update tags\n        setQuestions(prev =&gt; prev.map(q =&gt;\n          q.id === lastEvent.data.questionId\n            ? { ...q, tags: lastEvent.data.tags }\n            : q\n        ));\n        break;\n    }\n  }, [lastEvent]);\n\n  return (\n    &lt;div&gt;\n      {questions.map(q =&gt; &lt;QuestionCard key={q.id} question={q} /&gt;)}\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"architecture/real-time/#event-types","title":"Event Types","text":""},{"location":"architecture/real-time/#questioncreated","title":"question:created","text":"<p>New question submitted.</p> <pre><code>{\n  \"type\": \"question:created\",\n  \"tenantId\": \"acme-tenant-id\",\n  \"data\": {\n    \"id\": \"question-uuid\",\n    \"body\": \"What is the roadmap for Q2?\",\n    \"upvotes\": 0,\n    \"status\": \"OPEN\",\n    \"teamId\": \"engineering-uuid\",\n    \"createdAt\": \"2025-10-08T10:30:00Z\"\n  },\n  \"timestamp\": 1696765800000\n}\n</code></pre>"},{"location":"architecture/real-time/#questionupvoted","title":"question:upvoted","text":"<p>Question received an upvote.</p> <pre><code>{\n  \"type\": \"question:upvoted\",\n  \"tenantId\": \"acme-tenant-id\",\n  \"data\": {\n    \"questionId\": \"question-uuid\",\n    \"upvotes\": 15\n  },\n  \"timestamp\": 1696765800000\n}\n</code></pre>"},{"location":"architecture/real-time/#questionanswered","title":"question:answered","text":"<p>Moderator answered a question.</p> <pre><code>{\n  \"type\": \"question:answered\",\n  \"tenantId\": \"acme-tenant-id\",\n  \"data\": {\n    \"id\": \"question-uuid\",\n    \"responseText\": \"We're planning to launch feature X in Q2.\",\n    \"respondedAt\": \"2025-10-08T10:35:00Z\",\n    \"status\": \"ANSWERED\"\n  },\n  \"timestamp\": 1696766100000\n}\n</code></pre>"},{"location":"architecture/real-time/#questiontagged","title":"question:tagged","text":"<p>Tag added to question.</p> <pre><code>{\n  \"type\": \"question:tagged\",\n  \"tenantId\": \"acme-tenant-id\",\n  \"data\": {\n    \"questionId\": \"question-uuid\",\n    \"tags\": [\n      { \"id\": \"tag-1\", \"name\": \"Product\", \"color\": \"#3B82F6\" },\n      { \"id\": \"tag-2\", \"name\": \"Roadmap\", \"color\": \"#10B981\" }\n    ]\n  },\n  \"timestamp\": 1696766200000\n}\n</code></pre>"},{"location":"architecture/real-time/#questionpinned","title":"question:pinned","text":"<p>Question pinned by moderator.</p> <pre><code>{\n  \"type\": \"question:pinned\",\n  \"tenantId\": \"acme-tenant-id\",\n  \"data\": {\n    \"questionId\": \"question-uuid\",\n    \"isPinned\": true,\n    \"pinnedBy\": \"user-uuid\",\n    \"pinnedAt\": \"2025-10-08T10:40:00Z\"\n  },\n  \"timestamp\": 1696766400000\n}\n</code></pre>"},{"location":"architecture/real-time/#questionfrozen","title":"question:frozen","text":"<p>Question frozen (no more upvotes/responses).</p> <pre><code>{\n  \"type\": \"question:frozen\",\n  \"tenantId\": \"acme-tenant-id\",\n  \"data\": {\n    \"questionId\": \"question-uuid\",\n    \"isFrozen\": true,\n    \"frozenBy\": \"user-uuid\",\n    \"frozenAt\": \"2025-10-08T10:45:00Z\"\n  },\n  \"timestamp\": 1696766700000\n}\n</code></pre>"},{"location":"architecture/real-time/#heartbeat","title":"heartbeat","text":"<p>Keepalive signal (sent every 30 seconds).</p> <pre><code>{\n  \"type\": \"heartbeat\",\n  \"tenantId\": \"acme-tenant-id\",\n  \"data\": {\n    \"timestamp\": 1696766900000\n  },\n  \"timestamp\": 1696766900000\n}\n</code></pre>"},{"location":"architecture/real-time/#connection-management","title":"Connection Management","text":""},{"location":"architecture/real-time/#automatic-reconnection","title":"Automatic Reconnection","text":"<p>EventSource automatically reconnects on disconnect:</p> <pre><code>// Browser's EventSource handles reconnection\nconst eventSource = new EventSource('/sse?tenantId=acme');\n\neventSource.onerror = () =&gt; {\n  console.log('Disconnected, will reconnect automatically...');\n  // EventSource retries with exponential backoff\n};\n</code></pre> <p>Retry Behavior: - Retry 1: 1 second - Retry 2: 2 seconds - Retry 3: 4 seconds - Max: 10 seconds</p>"},{"location":"architecture/real-time/#dead-connection-cleanup","title":"Dead Connection Cleanup","text":"<p>Server detects and removes dead connections:</p> <pre><code>publish(event: SSEEvent) {\n  const deadClients: string[] = [];\n\n  for (const client of tenantClients) {\n    try {\n      client.res.write(eventData);\n    } catch (error) {\n      // Connection is dead\n      deadClients.push(client.id);\n    }\n  }\n\n  // Clean up dead connections\n  for (const clientId of deadClients) {\n    this.removeClient(event.tenantId, clientId);\n  }\n}\n</code></pre>"},{"location":"architecture/real-time/#heartbeat-mechanism","title":"Heartbeat Mechanism","text":"<p>Server sends heartbeat every 30 seconds:</p> <ul> <li>Keeps connection alive through proxies/firewalls</li> <li>Helps detect dead connections</li> <li>Client can ignore heartbeat events</li> </ul> <pre><code>setInterval(() =&gt; {\n  eventBus.publish({\n    type: 'heartbeat',\n    tenantId: tenantId,\n    data: { timestamp: Date.now() },\n    timestamp: Date.now()\n  });\n}, 30000); // 30 seconds\n</code></pre>"},{"location":"architecture/real-time/#tenant-isolation","title":"Tenant Isolation","text":"<p>SSE connections are tenant-scoped:</p> <ul> <li>Each client connects to specific tenant</li> <li>EventBus maintains per-tenant connection lists</li> <li>Events only sent to clients in same tenant</li> <li>No cross-tenant event leakage</li> </ul> <pre><code>// Client specifies tenant in connection\nGET /sse?tenantId=acme\n\n// Server stores tenant with connection\neventBus.addClient('acme-tenant-id', response);\n\n// Events filtered by tenant\neventBus.publish({\n  tenantId: 'acme-tenant-id', // Only sent to acme clients\n  type: 'question:created',\n  data: question\n});\n</code></pre>"},{"location":"architecture/real-time/#performance-considerations","title":"Performance Considerations","text":""},{"location":"architecture/real-time/#connection-limits","title":"Connection Limits","text":"<p>Each SSE connection holds one HTTP connection open:</p> <ul> <li>Modern browsers: 6-8 connections per domain</li> <li>Server: Depends on Node.js ulimit (default: 1024)</li> <li>Recommendation: Use HTTP/2 for multiplexing</li> </ul>"},{"location":"architecture/real-time/#memory-usage","title":"Memory Usage","text":"<p>Each client connection consumes: - ~50KB per connection (HTTP overhead) - ~10KB per client object (JavaScript) - Total: ~60KB per connection</p> <p>For 1,000 concurrent clients: - Memory: ~60MB (negligible) - File descriptors: 1,000 (monitor ulimit)</p>"},{"location":"architecture/real-time/#scaling-beyond-single-instance","title":"Scaling Beyond Single Instance","text":"<p>Current limitation: SSE connections are in-memory per API instance.</p> <p>Solution: Use Redis Pub/Sub for multi-instance broadcasting:</p> <pre><code>// Publisher (any API instance)\nawait redis.publish('sse-events', JSON.stringify(event));\n\n// Subscriber (all API instances)\nredis.subscribe('sse-events');\nredis.on('message', (channel, message) =&gt; {\n  const event = JSON.parse(message);\n  eventBus.publish(event); // Broadcast to local clients\n});\n</code></pre> <p>This allows horizontal scaling with load balancer.</p>"},{"location":"architecture/real-time/#security-considerations","title":"Security Considerations","text":""},{"location":"architecture/real-time/#authentication","title":"Authentication","text":"<p>SSE endpoint validates tenant but doesn't require authentication: - Read-only events (safe to broadcast) - No sensitive data in events - Tenant isolation prevents cross-tenant access</p> <p>Future: Add authentication if needed: <pre><code>app.get('/sse', requireAuth, async (req, res) =&gt; {\n  // Only authenticated users can connect\n});\n</code></pre></p>"},{"location":"architecture/real-time/#rate-limiting","title":"Rate Limiting","text":"<p>SSE connections are exempt from rate limiting: - Long-lived connections - Not counted as separate requests - Heartbeats don't count towards rate limit</p>"},{"location":"architecture/real-time/#cors","title":"CORS","text":"<p>SSE respects CORS headers: <pre><code>res.setHeader('Access-Control-Allow-Origin', CORS_ORIGIN);\nres.setHeader('Access-Control-Allow-Credentials', 'true');\n</code></pre></p>"},{"location":"architecture/real-time/#monitoring-debugging","title":"Monitoring &amp; Debugging","text":""},{"location":"architecture/real-time/#connection-metrics","title":"Connection Metrics","text":"<pre><code>// Get current metrics\nconst metrics = eventBus.getMetrics();\n\nconsole.log({\n  totalConnections: metrics.totalConnections,\n  tenantConnections: metrics.tenantConnections,\n  tenantCount: metrics.tenantCount\n});\n\n// Example output:\n// {\n//   totalConnections: 156,\n//   tenantConnections: {\n//     'acme-tenant-id': 89,\n//     'widgets-tenant-id': 67\n//   },\n//   tenantCount: 2\n// }\n</code></pre>"},{"location":"architecture/real-time/#health-dashboard-future","title":"Health Dashboard (Future)","text":"<p>Add SSE metrics to health dashboard: - Active connections per tenant - Connection duration - Event publishing rate - Heartbeat health</p>"},{"location":"architecture/real-time/#logging","title":"Logging","text":"<p>Development logs for debugging:</p> <pre><code>console.log('\ud83d\udce1 SSE: Client connected', clientId);\nconsole.log('\ud83d\udce1 SSE: Event published', event.type);\nconsole.log('\ud83d\udce1 SSE: Client disconnected', clientId);\n</code></pre> <p>Production: Use structured logging (JSON).</p>"},{"location":"architecture/real-time/#troubleshooting","title":"Troubleshooting","text":""},{"location":"architecture/real-time/#eventsource-failed-error","title":"\"EventSource failed\" Error","text":"<p>Cause: CORS or network issue</p> <p>Solution: 1. Check CORS headers on <code>/sse</code> endpoint 2. Verify tenant exists 3. Check network tab for HTTP errors</p>"},{"location":"architecture/real-time/#events-not-received","title":"Events Not Received","text":"<p>Cause: Client not subscribed to events</p> <p>Solution: 1. Verify SSE connection is established (check <code>connected</code> state) 2. Check browser console for event logs 3. Verify event type matches handler</p>"},{"location":"architecture/real-time/#connection-drops-frequently","title":"Connection Drops Frequently","text":"<p>Cause: Proxy/firewall closing idle connections</p> <p>Solution: 1. Reduce heartbeat interval (currently 30s) 2. Add proxy configuration for long-lived connections 3. Use HTTP/2 (better at keeping connections alive)</p>"},{"location":"architecture/real-time/#high-memory-usage","title":"High Memory Usage","text":"<p>Cause: Too many SSE connections</p> <p>Solution: 1. Check <code>eventBus.getMetrics()</code> for connection count 2. Implement connection limits per tenant 3. Monitor Node.js memory usage 4. Scale horizontally with Redis Pub/Sub</p>"},{"location":"architecture/real-time/#future-enhancements","title":"Future Enhancements","text":""},{"location":"architecture/real-time/#1-redis-pubsub-for-multi-instance","title":"1. Redis Pub/Sub for Multi-Instance","text":"<p>Enable horizontal scaling: - Broadcast events via Redis - All API instances subscribe - Each instance handles own SSE clients</p>"},{"location":"architecture/real-time/#2-binary-protocol","title":"2. Binary Protocol","text":"<p>Consider using WebSocket for efficiency: - Smaller payload size - Lower latency - Bidirectional (for future features)</p>"},{"location":"architecture/real-time/#3-event-filtering","title":"3. Event Filtering","text":"<p>Allow clients to subscribe to specific events: <pre><code>GET /sse?tenantId=acme&amp;events=question:created,question:upvoted\n</code></pre></p>"},{"location":"architecture/real-time/#4-compression","title":"4. Compression","text":"<p>Compress SSE payloads for bandwidth savings: <pre><code>res.setHeader('Content-Encoding', 'gzip');\n</code></pre></p>"},{"location":"architecture/real-time/#related-documentation","title":"Related Documentation","text":"<ul> <li>System Design - Overall architecture</li> <li>Multi-Tenancy Architecture - Tenant isolation</li> <li>API Reference - API endpoints</li> </ul>"},{"location":"architecture/real-time/#references","title":"References","text":"<ul> <li>MDN: Server-Sent Events</li> <li>EventSource API</li> <li>SSE Specification</li> </ul>"},{"location":"architecture/system-design/","title":"System Design","text":"<p>This document provides a comprehensive overview of PulseStage's architecture, design decisions, and technical implementation.</p>"},{"location":"architecture/system-design/#overview","title":"Overview","text":"<p>PulseStage is a production-ready, multi-tenant Q&amp;A platform designed for organizational town halls and all-hands meetings. It follows a three-tier architecture with modern best practices for security, scalability, and maintainability.</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                        Users/Clients                         \u2502\n\u2502              (Browsers, Mobile, Integrations)                \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                            \u2502\n                            \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                     Presentation Layer                       \u2502\n\u2502                  React 19 + TypeScript + Vite                \u2502\n\u2502     \u2022 Real-time SSE \u2022 Dark Mode \u2022 Responsive Design         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                            \u2502\n                            \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                      Application Layer                       \u2502\n\u2502                 Node.js 24 + Express + TypeScript            \u2502\n\u2502   \u2022 RBAC Middleware \u2022 Multi-tenant Context \u2022 Rate Limiting   \u2502\n\u2502   \u2022 CSRF Protection \u2022 Audit Logging \u2022 SSE Broadcasting       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                            \u2502\n                \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                \u25bc                       \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502      Data Layer          \u2502  \u2502    Cache Layer      \u2502\n\u2502  PostgreSQL 16 + Prisma  \u2502  \u2502      Redis 7        \u2502\n\u2502  \u2022 Multi-tenant          \u2502  \u2502  \u2022 Rate Limits      \u2502\n\u2502  \u2022 Full-text Search      \u2502  \u2502  \u2022 Sessions         \u2502\n\u2502  \u2022 Audit Logs            \u2502  \u2502                     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture/system-design/#core-design-principles","title":"Core Design Principles","text":""},{"location":"architecture/system-design/#1-security-first","title":"1. Security First","text":"<p>Every layer implements defense-in-depth: - Authentication &amp; authorization at multiple layers - CSRF protection on all state-changing operations - Comprehensive audit logging - Security headers (CSP, HSTS, X-Frame-Options) - Rate limiting per tenant and per IP</p>"},{"location":"architecture/system-design/#2-multi-tenancy-by-default","title":"2. Multi-Tenancy by Default","text":"<p>Complete tenant isolation: - Automatic tenant context injection via middleware - Prisma middleware enforces tenant filtering on all queries - No cross-tenant data leakage - Per-tenant configuration and settings</p>"},{"location":"architecture/system-design/#3-real-time-first","title":"3. Real-Time First","text":"<p>Built for live collaboration: - Server-Sent Events (SSE) for instant updates - Per-tenant event broadcasting - Automatic connection management and cleanup - Heartbeat mechanism for connection health</p>"},{"location":"architecture/system-design/#4-developer-experience","title":"4. Developer Experience","text":"<p>Optimized for maintainability: - Type safety throughout (TypeScript strict mode) - Comprehensive test coverage (243+ tests) - Automated CI/CD with security scanning - Docker-based development workflow</p>"},{"location":"architecture/system-design/#system-components","title":"System Components","text":""},{"location":"architecture/system-design/#frontend-react-application","title":"Frontend (React Application)","text":"<p>Technology Stack: - React 19 with Hooks and Context API - TypeScript 5.9 (strict mode) - Tailwind CSS for styling - Vite 7 for build tooling - React Router 7 for navigation</p> <p>Key Features: - Component-based architecture with reusable UI components - Context providers for state management (Auth, Team, Theme, SSE) - Real-time updates via EventSource (SSE) - Dark mode with system preference detection - Responsive design (mobile-first)</p> <p>State Management: <pre><code>AuthContext \u2192 User authentication state\nTeamContext \u2192 Current team and available teams\nThemeContext \u2192 Dark/light mode preference\nSSEContext \u2192 Real-time event connection\n</code></pre></p>"},{"location":"architecture/system-design/#backend-api-server","title":"Backend (API Server)","text":"<p>Technology Stack: - Node.js 24 LTS - Express 4 web framework - TypeScript 5.9 (strict mode) - Prisma ORM for database access - Redis for caching and sessions</p> <p>Middleware Stack: <pre><code>Request Flow:\n  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n  \u2502  1. CORS &amp; Security Headers (Helmet)   \u2502\n  \u2502  2. Body Parser &amp; Cookie Parser         \u2502\n  \u2502  3. Tenant Resolver                     \u2502\n  \u2502  4. Session Management                  \u2502\n  \u2502  5. Mock Auth (dev) / SSO (prod)       \u2502\n  \u2502  6. CSRF Token Validation              \u2502\n  \u2502  7. Rate Limiting                       \u2502\n  \u2502  8. Permission Check (RBAC)            \u2502\n  \u2502  9. Team Scoping (for moderators)      \u2502\n  \u2502  10. Route Handler                      \u2502\n  \u2502  11. Audit Logging (on write ops)      \u2502\n  \u2502  12. SSE Event Broadcasting            \u2502\n  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre></p>"},{"location":"architecture/system-design/#database-postgresql","title":"Database (PostgreSQL)","text":"<p>Schema Design: - Normalized schema with proper foreign keys - Tenant-scoped data model (all tables include <code>tenantId</code>) - Full-text search with GIN indexes and tsvector - Audit log as append-only table - Cascading deletes for data integrity</p> <p>Key Tables: - <code>Tenant</code> - Organization/tenant isolation - <code>Team</code> - Departments or groups within a tenant - <code>Question</code> - User-submitted questions - <code>User</code> - User accounts (linked to SSO) - <code>TeamMembership</code> - User roles per team - <code>Tag</code> - Question categorization - <code>Upvote</code> - Individual upvote tracking (not just counts) - <code>AuditLog</code> - Immutable log of all admin actions</p> <p>Indexing Strategy: - Primary keys (UUID) - Foreign key indexes (automatic cascades) - Composite indexes: <code>(tenantId, status)</code>, <code>(tenantId, teamId)</code> - Full-text search: GIN index on <code>search_vector</code> column - Audit log: Descending index on <code>(tenantId, createdAt)</code></p>"},{"location":"architecture/system-design/#cache-layer-redis","title":"Cache Layer (Redis)","text":"<p>Usage: - Rate Limiting: Sliding window counters per tenant+IP - Session Storage: Server-side session data - Future: Cache frequently accessed data (teams, tags)</p> <p>Configuration: - Graceful degradation (memory fallback if Redis unavailable) - TTL-based expiration - Connection pooling</p>"},{"location":"architecture/system-design/#key-architectural-patterns","title":"Key Architectural Patterns","text":""},{"location":"architecture/system-design/#1-multi-tenant-context-pattern","title":"1. Multi-Tenant Context Pattern","text":"<p>Every request carries a tenant context:</p> <pre><code>// Tenant resolution (from subdomain, header, or session)\nRequest \u2192 Tenant Resolver Middleware \u2192 AsyncLocalStorage\n\n// Automatic tenant filtering in Prisma\nPrisma Middleware \u2192 Inject tenantId in all queries \u2192 Database\n</code></pre> <p>Benefits: - No manual tenant filtering in application code - Impossible to forget tenant checks - Centralized tenant context management</p>"},{"location":"architecture/system-design/#2-role-based-access-control-rbac","title":"2. Role-Based Access Control (RBAC)","text":"<p>Five-role hierarchy with permissions:</p> <pre><code>Viewer \u2192 Member \u2192 Moderator \u2192 Admin \u2192 Owner\n  \u2193        \u2193          \u2193          \u2193       \u2193\n Read    Submit    Answer+    Global   Full\n         Upvote    Tag+Pin     Admin   Control\n                   (Team-\n                   Scoped)\n</code></pre> <p>Permission Enforcement: - Middleware: <code>requirePermission('question.answer')</code> - Route-level: <code>requireRole('admin')</code> - Frontend: Conditional UI rendering based on role</p> <p>Team Scoping: - Moderators limited to assigned teams - Admins and Owners have global access - Team membership tracked in <code>TeamMembership</code> table</p>"},{"location":"architecture/system-design/#3-event-driven-real-time-updates","title":"3. Event-Driven Real-Time Updates","text":"<p>Server-Sent Events (SSE) for push updates:</p> <pre><code>// Event flow\nUser Action \u2192 API Handler \u2192 Database Update \u2192 \n  \u2192 eventBus.publish() \u2192 All Connected Clients (per tenant)\n\n// Event types\n- question:created\n- question:upvoted  \n- question:answered\n- question:tagged\n- question:pinned\n- question:frozen\n- heartbeat (keepalive)\n</code></pre> <p>Connection Management: - Per-tenant client tracking - Automatic dead connection cleanup - Periodic heartbeat (30s default) - Reconnection handling on client side</p>"},{"location":"architecture/system-design/#4-audit-logging-pattern","title":"4. Audit Logging Pattern","text":"<p>Immutable audit trail for compliance:</p> <pre><code>// Logged on every admin/moderator action\n{\n  actor: userId,\n  action: \"question.answer\",\n  entityType: \"Question\",\n  entityId: \"uuid\",\n  before: { status: \"OPEN\", responseText: null },\n  after: { status: \"ANSWERED\", responseText: \"Here's the answer...\" },\n  ipAddress: \"192.168.1.1\",\n  userAgent: \"Mozilla/5.0...\",\n  metadata: { teamName: \"Engineering\", questionPreview: \"...\" }\n}\n</code></pre> <p>Audit Log Uses: - Compliance and security tracking - Debug and troubleshooting - Moderation analytics - User activity reports</p>"},{"location":"architecture/system-design/#5-input-validation-pattern","title":"5. Input Validation Pattern","text":"<p>Zod schemas for type-safe validation:</p> <pre><code>// Shared validation schemas\nconst QuestionSchema = z.object({\n  body: z.string().min(3).max(2000),\n  teamId: z.string().uuid().optional()\n});\n\n// Runtime validation + TypeScript types\nconst validatedData = QuestionSchema.parse(req.body);\n</code></pre>"},{"location":"architecture/system-design/#scalability-considerations","title":"Scalability Considerations","text":""},{"location":"architecture/system-design/#current-capacity","title":"Current Capacity","text":"<p>Designed for: - 1,000+ concurrent users per tenant - 10,000+ questions per tenant - 100+ teams per tenant - 10+ tenants on shared infrastructure</p>"},{"location":"architecture/system-design/#horizontal-scaling","title":"Horizontal Scaling","text":"<p>What scales: - \u2705 API servers (stateless, no shared memory) - \u2705 Database read replicas (PostgreSQL streaming replication) - \u2705 Redis cluster (distributed caching)</p> <p>What doesn't scale (yet): - \u26a0\ufe0f SSE connections (in-memory per API instance)   - Solution: Redis Pub/Sub for multi-instance broadcasting - \u26a0\ufe0f File uploads (if added in future)   - Solution: Object storage (S3, MinIO)</p>"},{"location":"architecture/system-design/#performance-optimizations","title":"Performance Optimizations","text":"<p>Current: - Database connection pooling - Prepared statements via Prisma - Indexed queries (all tenant-scoped queries use indexes) - Debounced search (client-side)</p> <p>Future: - Redis caching for read-heavy data (teams, tags) - CDN for static assets - Database query optimization (EXPLAIN ANALYZE) - Response compression (gzip/brotli)</p>"},{"location":"architecture/system-design/#security-architecture","title":"Security Architecture","text":""},{"location":"architecture/system-design/#defense-in-depth","title":"Defense in Depth","text":"<p>Layer 1: Network - HTTPS-only in production (HSTS header) - CORS restrictions - Rate limiting (per-tenant + per-IP)</p> <p>Layer 2: Application - Session-based authentication - CSRF token validation - Input validation (Zod schemas) - Output encoding (React XSS protection)</p> <p>Layer 3: Authorization - Role-based access control - Team-scoped permissions for moderators - Tenant isolation (automatic Prisma middleware)</p> <p>Layer 4: Data - Parameterized queries (Prisma ORM) - Audit logging (immutable records) - Database encryption at rest (hosting-dependent)</p>"},{"location":"architecture/system-design/#threat-model","title":"Threat Model","text":"<p>Mitigated Threats: - \u2705 SQL Injection (Prisma ORM) - \u2705 XSS (React escaping + CSP headers) - \u2705 CSRF (Double-submit cookie pattern) - \u2705 Clickjacking (X-Frame-Options: DENY) - \u2705 MIME sniffing (X-Content-Type-Options: nosniff) - \u2705 Privilege escalation (RBAC enforcement) - \u2705 Data leakage (tenant isolation) - \u2705 Brute force (rate limiting)</p> <p>Out of Scope: - DDoS protection (use CDN/load balancer) - Physical security (hosting provider responsibility) - Insider threats (organizational policies)</p>"},{"location":"architecture/system-design/#deployment-architecture","title":"Deployment Architecture","text":""},{"location":"architecture/system-design/#development","title":"Development","text":"<pre><code>Docker Compose (docker-compose.override.yaml):\n  - PostgreSQL (local)\n  - Redis (local)\n  - API (local build, hot reload)\n  - Web (local build, hot reload)\n</code></pre>"},{"location":"architecture/system-design/#production","title":"Production","text":"<pre><code>Docker Compose (docker-compose.yaml):\n  - PostgreSQL (persistent volume)\n  - Redis (persistent volume)\n  - API (ghcr.io/seanmdalton/pulsestage-api:latest)\n  - Web (ghcr.io/seanmdalton/pulsestage-web:latest)\n</code></pre> <p>Container Images: - Published to GitHub Container Registry - Multi-stage builds for minimal image size - Security scanning in CI (Trivy) - SBOM generation (SPDX + CycloneDX)</p>"},{"location":"architecture/system-design/#environment-variables","title":"Environment Variables","text":"<p>Required: - <code>DATABASE_URL</code> - PostgreSQL connection string - <code>REDIS_URL</code> - Redis connection string - <code>SESSION_SECRET</code> - Session encryption key - <code>ADMIN_KEY</code> - Admin authentication key - <code>CORS_ORIGIN</code> - Frontend URL</p> <p>Optional: - <code>NODE_ENV</code> - Environment (development/production) - <code>PORT</code> - API server port (default: 3000) - <code>SSE_HEARTBEAT_INTERVAL</code> - SSE heartbeat interval (ms)</p>"},{"location":"architecture/system-design/#monitoring-observability","title":"Monitoring &amp; Observability","text":""},{"location":"architecture/system-design/#current-capabilities","title":"Current Capabilities","text":"<p>Health Checks: - <code>/health</code> - Basic liveness probe - Future: <code>/admin/health</code> - Detailed metrics</p> <p>Logging: - Console logging (structured) - Audit logs in database - Future: OpenTelemetry tracing</p> <p>Metrics: - SSE connection counts - Rate limit hits - Database query performance - Future: Prometheus metrics</p>"},{"location":"architecture/system-design/#future-architecture-enhancements","title":"Future Architecture Enhancements","text":""},{"location":"architecture/system-design/#short-term-1-3-months","title":"Short-Term (1-3 months)","text":"<ol> <li>Redis Pub/Sub for SSE - Multi-instance SSE support</li> <li>Database Read Replicas - Scale read-heavy workloads</li> <li>Caching Layer - Redis cache for teams, tags, user data</li> <li>Health Dashboard - Real-time system metrics UI</li> </ol>"},{"location":"architecture/system-design/#medium-term-3-6-months","title":"Medium-Term (3-6 months)","text":"<ol> <li>OpenTelemetry Tracing - Distributed tracing and metrics</li> <li>Webhook System - Event-driven integrations</li> <li>Background Job Queue - Email, notifications, exports</li> <li>CDN Integration - Static asset distribution</li> </ol>"},{"location":"architecture/system-design/#long-term-6-12-months","title":"Long-Term (6-12 months)","text":"<ol> <li>Microservices Split - Separate auth, notifications, exports</li> <li>Multi-Region Deployment - Global edge presence</li> <li>GraphQL API - Flexible querying for integrations</li> <li>Event Sourcing - Complete audit trail with replay</li> </ol>"},{"location":"architecture/system-design/#technology-choices-rationale","title":"Technology Choices &amp; Rationale","text":"Technology Why We Chose It TypeScript Type safety, better DX, catch bugs at compile time React 19 Component model, hooks, large ecosystem Node.js 24 LTS JavaScript everywhere, non-blocking I/O, active LTS Express Mature, flexible, large middleware ecosystem Prisma Type-safe ORM, migrations, great DX PostgreSQL 16 Robust, full-text search, JSON support, mature Redis Fast in-memory cache, pub/sub, session storage Tailwind CSS Utility-first, fast development, consistent design Vite Fast HMR, modern build tool, great DX Docker Compose Simple orchestration, reproducible environments"},{"location":"architecture/system-design/#related-documentation","title":"Related Documentation","text":"<ul> <li>Multi-Tenancy Architecture - Detailed multi-tenant implementation</li> <li>Database Schema - ERD and schema details</li> <li>Real-Time Architecture - SSE implementation details</li> <li>Security Overview - Comprehensive security guide</li> <li>API Reference - REST API documentation</li> </ul>"},{"location":"architecture/system-design/#questions","title":"Questions?","text":"<p>For technical questions or suggestions, please: - Open a GitHub Issue - Start a Discussion - Check our Development Guide</p>"},{"location":"deployment/docker-compose/","title":"Docker Compose","text":"<p>Documentation coming soon...</p>"},{"location":"deployment/environment/","title":"Environment","text":"<p>Documentation coming soon...</p>"},{"location":"deployment/monitoring/","title":"Monitoring","text":"<p>Documentation coming soon...</p>"},{"location":"deployment/production/","title":"Production","text":"<p>Documentation coming soon...</p>"},{"location":"development/code-style/","title":"Code Style","text":"<p>Documentation coming soon...</p>"},{"location":"development/contributing/","title":"Contributing to PulseStage","text":"<p>Thank you for your interest in contributing to PulseStage! This guide provides guidelines and instructions for contributing to our open-source Q&amp;A platform.</p> <p>Code of Conduct</p> <p>This project and everyone participating in it is governed by our Code of Conduct. By participating, you are expected to uphold this code.</p>"},{"location":"development/contributing/#getting-started","title":"Getting Started","text":""},{"location":"development/contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Node.js: Version 24 LTS or higher</li> <li>Docker &amp; Docker Compose: For running the full stack locally</li> <li>Git: For version control  </li> <li>npm: Comes with Node.js</li> </ul>"},{"location":"development/contributing/#repository-structure","title":"Repository Structure","text":"<pre><code>pulsestage/\n\u251c\u2500\u2500 api/                 # Backend API (Node.js/Express/TypeScript)\n\u251c\u2500\u2500 web/                 # Frontend (React/TypeScript)\n\u251c\u2500\u2500 docs/                # Documentation (MkDocs)\n\u251c\u2500\u2500 docker-compose.yaml  # Main Docker configuration\n\u251c\u2500\u2500 setup.sh            # Setup script\n\u2514\u2500\u2500 README.md           # Project overview\n</code></pre>"},{"location":"development/contributing/#development-setup","title":"Development Setup","text":""},{"location":"development/contributing/#1-fork-and-clone","title":"1. Fork and Clone","text":"<ol> <li>Fork the repository on GitHub</li> <li>Clone your fork locally:    <pre><code>git clone https://github.com/YOUR_USERNAME/pulsestage.git\ncd pulsestage\n</code></pre></li> </ol>"},{"location":"development/contributing/#2-initial-setup","title":"2. Initial Setup","text":"<p>Run the setup script to install dependencies and prepare the environment:</p> <pre><code>./setup.sh\n</code></pre> <p>This script will:</p> <ul> <li>Install dependencies for both API and web applications</li> <li>Set up environment files</li> <li>Build Docker images</li> <li>Start the database and Redis services</li> </ul>"},{"location":"development/contributing/#3-start-development-environment","title":"3. Start Development Environment","text":"<pre><code># Start the full stack with Docker\ndocker compose up -d\n\n# Visit http://localhost:5173 and follow the Setup Wizard\n</code></pre> <p>See Local Development for more details.</p>"},{"location":"development/contributing/#making-changes","title":"Making Changes","text":""},{"location":"development/contributing/#branch-strategy","title":"Branch Strategy","text":"<ol> <li> <p>Create a feature branch from <code>main</code>:    <pre><code>git checkout main\ngit pull origin main\ngit checkout -b feature/your-feature-name\n</code></pre></p> </li> <li> <p>Branch naming conventions:</p> </li> <li><code>feature/description</code> - New features</li> <li><code>fix/description</code> - Bug fixes</li> <li><code>docs/description</code> - Documentation updates</li> <li><code>refactor/description</code> - Code refactoring</li> <li><code>test/description</code> - Test improvements</li> </ol>"},{"location":"development/contributing/#development-workflow","title":"Development Workflow","text":"<ol> <li>Make your changes following our coding standards</li> <li>Write tests for new functionality</li> <li>Update documentation if needed</li> <li>Run tests to ensure everything works</li> <li>Commit your changes with clear commit messages</li> </ol>"},{"location":"development/contributing/#testing","title":"Testing","text":""},{"location":"development/contributing/#running-tests","title":"Running Tests","text":"<pre><code># Run all API tests\ncd api &amp;&amp; npm test\n\n# Run web tests\ncd web &amp;&amp; npm test\n\n# Run E2E tests\ncd web &amp;&amp; npx playwright test\n\n# Run tests with coverage\ncd api &amp;&amp; npm run test:coverage\n</code></pre>"},{"location":"development/contributing/#test-coverage","title":"Test Coverage","text":"<p>We aim for comprehensive test coverage:</p> <ul> <li>API: 231+ tests passing</li> <li>Frontend: Component and integration tests</li> <li>E2E: Critical user journeys with Playwright</li> </ul>"},{"location":"development/contributing/#writing-tests","title":"Writing Tests","text":"<ul> <li>Unit tests: Test individual functions and components</li> <li>Integration tests: Test API endpoints and database interactions</li> <li>E2E tests: Test complete user workflows</li> <li>Follow the AAA pattern: Arrange, Act, Assert</li> </ul>"},{"location":"development/contributing/#pull-request-process","title":"Pull Request Process","text":""},{"location":"development/contributing/#before-submitting","title":"Before Submitting","text":"<ol> <li> <p>Ensure tests pass:    <pre><code>cd api &amp;&amp; npm test\ncd web &amp;&amp; npx playwright test\n</code></pre></p> </li> <li> <p>Check code quality:    <pre><code>cd api &amp;&amp; npm run lint\ncd web &amp;&amp; npm run lint\n</code></pre></p> </li> <li> <p>Update documentation if your changes affect:</p> </li> <li>API endpoints</li> <li>User interface</li> <li>Configuration</li> <li>Installation process</li> </ol>"},{"location":"development/contributing/#pr-guidelines","title":"PR Guidelines","text":"<ol> <li>Create a clear title describing the change</li> <li>Write a detailed description:</li> <li>What changes were made</li> <li>Why the changes were necessary</li> <li>How to test the changes</li> <li> <p>Any breaking changes or migration steps</p> </li> <li> <p>Link related issues using <code>Fixes #123</code> or <code>Closes #123</code></p> </li> <li>Include screenshots for UI changes</li> <li>Keep PRs focused - one feature or bug fix per PR</li> </ol>"},{"location":"development/contributing/#pr-template","title":"PR Template","text":"<pre><code>## Description\nBrief description of changes\n\n## Type of Change\n- [ ] Bug fix\n- [ ] New feature\n- [ ] Breaking change\n- [ ] Documentation update\n\n## Testing\n- [ ] Unit tests pass\n- [ ] Integration tests pass\n- [ ] E2E tests pass\n- [ ] Manual testing completed\n\n## Screenshots (if applicable)\n[Add screenshots here]\n\n## Checklist\n- [ ] Code follows style guidelines\n- [ ] Self-review completed\n- [ ] Documentation updated\n- [ ] Tests added/updated\n</code></pre>"},{"location":"development/contributing/#review-process","title":"Review Process","text":"<ol> <li>Automated checks must pass (CI/CD pipeline)</li> <li>Code review by maintainers</li> <li>Approval from at least one maintainer</li> <li>Merge after approval</li> </ol>"},{"location":"development/contributing/#coding-standards","title":"Coding Standards","text":""},{"location":"development/contributing/#typescript","title":"TypeScript","text":"<ul> <li>Strict mode enabled - No <code>any</code> types without justification</li> <li>Explicit return types for functions</li> <li>Interface over type for object shapes</li> <li>Use enums for constants with multiple values</li> </ul>"},{"location":"development/contributing/#code-style","title":"Code Style","text":"<ul> <li>ESLint configuration enforced</li> <li>Prettier formatting for consistent style</li> <li>Meaningful variable names - avoid abbreviations</li> <li>Small functions - single responsibility principle</li> <li>DRY principle - Don't Repeat Yourself</li> </ul>"},{"location":"development/contributing/#api-development","title":"API Development","text":"<ul> <li>RESTful endpoints following REST conventions</li> <li>Input validation using middleware</li> <li>Error handling with proper HTTP status codes</li> <li>Rate limiting on all public endpoints</li> <li>Authentication required for protected routes</li> <li>Audit logging for security-relevant actions</li> </ul>"},{"location":"development/contributing/#react-development","title":"React Development","text":"<ul> <li>Functional components with hooks</li> <li>TypeScript interfaces for props</li> <li>Custom hooks for reusable logic</li> <li>Error boundaries for error handling</li> <li>Accessibility (a11y) considerations</li> </ul>"},{"location":"development/contributing/#database","title":"Database","text":"<ul> <li>Prisma ORM for database operations</li> <li>Migrations for schema changes</li> <li>Indexes for performance optimization</li> <li>Constraints for data integrity</li> </ul>"},{"location":"development/contributing/#documentation","title":"Documentation","text":""},{"location":"development/contributing/#code-documentation","title":"Code Documentation","text":"<ul> <li>JSDoc comments for public APIs</li> <li>Inline comments for complex logic</li> <li>README updates for significant changes</li> <li>API documentation in OpenAPI format</li> </ul>"},{"location":"development/contributing/#user-documentation","title":"User Documentation","text":"<ul> <li>MkDocs for comprehensive guides</li> <li>Clear examples and code snippets</li> <li>Screenshots for UI changes</li> <li>Troubleshooting sections</li> </ul>"},{"location":"development/contributing/#reporting-issues","title":"Reporting Issues","text":""},{"location":"development/contributing/#bug-reports","title":"Bug Reports","text":"<p>Use the bug report template and include:</p> <ul> <li>Clear title describing the issue</li> <li>Steps to reproduce the problem</li> <li>Expected vs actual behavior</li> <li>Environment details (OS, browser, Node.js version)</li> <li>Screenshots or error messages</li> <li>Logs from browser console or server</li> </ul>"},{"location":"development/contributing/#feature-requests","title":"Feature Requests","text":"<p>Use the feature request template and include:</p> <ul> <li>Clear title describing the feature</li> <li>Problem description and use case</li> <li>Proposed solution with examples</li> <li>Alternatives considered</li> <li>Additional context (screenshots, mockups)</li> </ul>"},{"location":"development/contributing/#security-issues","title":"Security Issues","text":"<p>Security Vulnerabilities</p> <p>Do not report security vulnerabilities through public issues. Instead:</p> <ol> <li>Email seanmdalton@pm.me</li> <li>Include detailed reproduction steps</li> <li>Allow time for response before public disclosure</li> </ol>"},{"location":"development/contributing/#community","title":"Community","text":""},{"location":"development/contributing/#getting-help","title":"Getting Help","text":"<ul> <li>Documentation: https://seanmdalton.github.io/pulsestage/</li> <li>Issues: GitHub Issues</li> <li>Discussions: GitHub Discussions</li> </ul>"},{"location":"development/contributing/#contributing-areas","title":"Contributing Areas","text":"<p>We welcome contributions in many areas:</p> <ul> <li>Bug fixes and performance improvements</li> <li>New features and enhancements</li> <li>Documentation improvements</li> <li>Test coverage expansion</li> <li>UI/UX improvements</li> <li>Security enhancements</li> <li>Accessibility improvements</li> </ul>"},{"location":"development/contributing/#recognition","title":"Recognition","text":"<p>Contributors are recognized in:</p> <ul> <li>GitHub contributors list</li> <li>Release notes for significant contributions</li> <li>Community highlights in discussions</li> </ul>"},{"location":"development/contributing/#license","title":"License","text":"<p>By contributing to PulseStage, you agree that your contributions will be licensed under the Apache License 2.0.</p> <p>Thank you for contributing to PulseStage! \ud83d\ude80</p> <p>For questions about contributing, please open a discussion or email seanmdalton@pm.me.</p>"},{"location":"development/migrations/","title":"Migrations","text":"<p>Documentation coming soon...</p>"},{"location":"development/running-locally/","title":"Running Locally","text":"<p>This guide covers different ways to run PulseStage locally for development.</p>"},{"location":"development/running-locally/#option-1-pure-local-development-recommended-for-daily-work","title":"Option 1: Pure Local Development (Recommended for Daily Work)","text":"<p>Run only infrastructure in Docker, services on your host machine.</p>"},{"location":"development/running-locally/#advantages","title":"Advantages","text":"<ul> <li>\u26a1 Fastest iteration cycle</li> <li>\ud83d\udd27 Easy debugging with breakpoints</li> <li>\ud83d\udd04 Instant hot reload (TypeScript + Vite)</li> <li>\ud83d\udee0\ufe0f Native dev tools work perfectly</li> </ul>"},{"location":"development/running-locally/#setup","title":"Setup","text":"<pre><code># Start only database and Redis\ndocker compose up db redis -d\n\n# Terminal 1: API\ncd api\nnpm install\nnpx prisma db push\nnpm run db:seed:dev\nnpm run dev              # Hot reload with ts-node-dev\n\n# Terminal 2: Web\ncd web\nnpm install\nnpm run dev              # Hot reload with Vite HMR\n</code></pre> <p>Access: - Web: http://localhost:5173 - API: http://localhost:3000 - API Docs: http://localhost:3000/api-docs</p>"},{"location":"development/running-locally/#option-2-docker-with-local-builds-recommended-before-pushing","title":"Option 2: Docker with Local Builds (Recommended Before Pushing)","text":"<p>Test the actual containerized environment before pushing changes.</p>"},{"location":"development/running-locally/#advantages_1","title":"Advantages","text":"<ul> <li>\ud83d\udc33 Tests real Docker environment</li> <li>\ud83d\udd12 Run security scans locally</li> <li>\u2705 Catch Docker-specific issues</li> <li>\ud83d\udce6 Validate complete build process</li> </ul>"},{"location":"development/running-locally/#setup_1","title":"Setup","text":"<pre><code># Build and run locally\ndocker compose up --build -d\n\n# Run validation\n./run-tests.sh                    # Tests + Trivy scans\n./test-security.sh                # Security headers\n\n# Load demo data\ndocker compose exec api npm run db:seed:full\n\n# View logs\ndocker compose logs -f api\n</code></pre> <p>How it works: - <code>docker-compose.yaml</code>: Published images (for end users) - <code>docker-compose.override.yaml</code>: Local builds (for developers) - Docker Compose automatically merges both files - <code>up --build</code> rebuilds images from local source</p>"},{"location":"development/running-locally/#option-3-published-images-testing-user-experience","title":"Option 3: Published Images (Testing User Experience)","text":"<p>Test exactly what end users will experience.</p>"},{"location":"development/running-locally/#setup_2","title":"Setup","text":"<pre><code># Temporarily disable local builds\nmv docker-compose.override.yaml docker-compose.override.yaml.bak\n\n# Pull and run published images\ndocker compose pull\ndocker compose up -d\ndocker compose exec api npm run db:seed:full\n\n# Restore local builds\nmv docker-compose.override.yaml.bak docker-compose.override.yaml\n</code></pre>"},{"location":"development/running-locally/#recommended-workflow","title":"Recommended Workflow","text":"<ol> <li>Daily development: Use Option 1 (pure local, fastest)</li> <li>Before committing: Use Option 2 (Docker builds, run security scans)</li> <li>Testing UX: Use Option 3 (published images, validate end-user experience)</li> </ol>"},{"location":"development/running-locally/#database-management","title":"Database Management","text":""},{"location":"development/running-locally/#reset-database-local","title":"Reset Database (Local)","text":"<pre><code>cd api\nnpx prisma db push --force-reset\nnpm run db:seed:dev\n</code></pre>"},{"location":"development/running-locally/#reset-database-docker","title":"Reset Database (Docker)","text":"<pre><code>docker compose down -v\ndocker compose up -d\ndocker compose exec api npm run db:seed:full\n</code></pre>"},{"location":"development/running-locally/#view-database","title":"View Database","text":"<pre><code>cd api\nnpx prisma studio    # Opens GUI at http://localhost:5555\n</code></pre>"},{"location":"development/running-locally/#troubleshooting","title":"Troubleshooting","text":""},{"location":"development/running-locally/#port-conflicts","title":"Port Conflicts","text":"<p>If ports 3000, 5173, or 5432 are in use:</p> <pre><code># Find what's using the port\nlsof -i :3000\nlsof -i :5173\nlsof -i :5432\n</code></pre>"},{"location":"development/running-locally/#typescript-errors","title":"TypeScript Errors","text":"<pre><code>cd api\nnpm run build        # Should complete without errors\n</code></pre>"},{"location":"development/running-locally/#database-connection-issues","title":"Database Connection Issues","text":"<pre><code>docker compose logs db\ndocker compose ps db\n</code></pre>"},{"location":"development/running-locally/#next-steps","title":"Next Steps","text":"<ul> <li>Testing Guide - Run tests and validate changes</li> <li>Contributing Guide - Submit pull requests</li> <li>Code Style - Coding standards</li> </ul>"},{"location":"development/setup/","title":"Development Setup","text":"<p>This guide covers setting up PulseStage for local development.</p>"},{"location":"development/setup/#prerequisites","title":"Prerequisites","text":"<ul> <li>Node.js 20+ and npm 10+</li> <li>Docker and Docker Compose</li> <li>Git</li> <li>OpenSSL (for generating secrets)</li> </ul>"},{"location":"development/setup/#quick-start","title":"Quick Start","text":""},{"location":"development/setup/#1-clone-and-setup","title":"1. Clone and Setup","text":"<pre><code>git clone https://github.com/seanmdalton/pulsestage.git\ncd pulsestage\n./setup.sh\n</code></pre>"},{"location":"development/setup/#2-start-infrastructure","title":"2. Start Infrastructure","text":"<p>Start PostgreSQL and Redis via Docker:</p> <pre><code>docker compose up db redis -d\n</code></pre>"},{"location":"development/setup/#3-install-dependencies-and-setup-database","title":"3. Install Dependencies and Setup Database","text":"<pre><code># API dependencies\ncd api\nnpm install\nnpx prisma db push\nnpm run db:seed:dev\n\n# Web dependencies\ncd ../web\nnpm install\n</code></pre>"},{"location":"development/setup/#4-start-development-servers","title":"4. Start Development Servers","text":"<p>In separate terminals:</p> <pre><code># Terminal 1: API with hot reload\ncd api\nnpm run dev\n\n# Terminal 2: Web with Vite HMR\ncd web\nnpm run dev\n</code></pre>"},{"location":"development/setup/#5-access-development-environment","title":"5. Access Development Environment","text":"<ul> <li>Web: http://localhost:5173 (Vite dev server with HMR)</li> <li>API: http://localhost:3000 (ts-node-dev with auto-restart)</li> <li>API Docs: http://localhost:3000/api-docs</li> </ul>"},{"location":"development/setup/#database-seeding","title":"Database Seeding","text":"Script Description Use Case <code>npm run db:seed:dev</code> Basic seed: tenants, teams, users Local development <code>npm run db:seed:tags:dev</code> Add default tags Local development <code>npm run db:seed</code> Compiled JS version Docker containers <code>npm run db:seed:full</code> Full demo data Docker containers <p>For local development: <pre><code>cd api\nnpm run db:seed:dev\nnpm run db:seed:tags:dev\nnode load-comprehensive-test-data.js\n</code></pre></p> <p>For Docker testing: <pre><code>docker compose up -d\ndocker compose exec api npm run db:seed:full\n</code></pre></p>"},{"location":"development/setup/#development-workflow","title":"Development Workflow","text":""},{"location":"development/setup/#running-tests","title":"Running Tests","text":"<pre><code># API tests\ncd api\nnpm test\n\n# API tests with coverage\nnpm run test:coverage\n\n# API tests in watch mode\nnpm run test:watch\n\n# E2E tests (requires services running)\ncd web\nnpm run test:e2e\n</code></pre>"},{"location":"development/setup/#code-quality","title":"Code Quality","text":"<pre><code># Run pre-push checks (tests + security scans)\n./run-tests.sh\n\n# Test security headers and configuration\n./test-security.sh\n</code></pre>"},{"location":"development/setup/#database-management","title":"Database Management","text":"<pre><code>cd api\n\n# Push schema changes to database\nnpx prisma db push\n\n# Generate Prisma client\nnpx prisma generate\n\n# Open Prisma Studio (database GUI)\nnpx prisma studio\n</code></pre>"},{"location":"development/setup/#development-tips","title":"Development Tips","text":""},{"location":"development/setup/#working-with-docker-compose","title":"Working with Docker Compose","text":"<p>PulseStage uses <code>docker-compose.override.yaml</code> for local development builds.</p> <p>Build and test locally: <pre><code>docker compose up --build -d       # Builds from local source\n./run-tests.sh                     # Run tests + security scans\n./test-security.sh                 # Test security headers\n</code></pre></p> <p>Use published images (like end users): <pre><code># Temporarily rename override file\nmv docker-compose.override.yaml docker-compose.override.yaml.bak\ndocker compose pull\ndocker compose up -d\n# Restore override file\nmv docker-compose.override.yaml.bak docker-compose.override.yaml\n</code></pre></p> <p>How it works: - <code>docker-compose.yaml</code> uses published images from GitHub Container Registry - <code>docker-compose.override.yaml</code> overrides with <code>build:</code> directives for local development - Docker Compose automatically merges both files</p> <p>Auto-bootstrap: The API automatically creates a default tenant on first startup if the database is empty.</p>"},{"location":"development/setup/#mock-sso","title":"Mock SSO","text":"<p>In development, authentication uses mock SSO. Access the test page to switch users:</p> <pre><code>http://localhost:5173/sso-test.html\n</code></pre>"},{"location":"development/setup/#inspecting-logs","title":"Inspecting Logs","text":"<pre><code># View all service logs\ndocker compose logs -f\n\n# View specific service\ndocker compose logs -f api\ndocker compose logs -f web\ndocker compose logs -f db\n</code></pre>"},{"location":"development/setup/#resetting-database","title":"Resetting Database","text":"<p>For local development: <pre><code>cd api\nnpx prisma db push --force-reset\nnpm run db:seed:dev\n</code></pre></p> <p>For Docker: <pre><code>docker compose down -v\ndocker compose up -d\ndocker compose exec api npm run db:seed:full\n</code></pre></p>"},{"location":"development/setup/#common-issues","title":"Common Issues","text":""},{"location":"development/setup/#port-already-in-use","title":"Port Already in Use","text":"<p>Change ports in <code>docker-compose.yaml</code> and update <code>.env</code> accordingly.</p>"},{"location":"development/setup/#database-connection-failed","title":"Database Connection Failed","text":"<p>Ensure PostgreSQL is running: <pre><code>docker compose ps db\ndocker compose logs db\n</code></pre></p>"},{"location":"development/setup/#redis-connection-failed","title":"Redis Connection Failed","text":"<p>Check Redis status: <pre><code>docker compose ps redis\ndocker compose logs redis\n</code></pre></p>"},{"location":"development/setup/#next-steps","title":"Next Steps","text":"<ul> <li>Running Locally - Detailed development guide</li> <li>Testing - Testing strategies and practices</li> <li>Contributing - How to contribute</li> </ul>"},{"location":"development/testing/","title":"Testing","text":"<p>Documentation coming soon...</p>"},{"location":"development/setup/local-development/","title":"\ud83d\udee0\ufe0f PulseStage Development Guide","text":"<p>This guide covers the streamlined local development workflow for PulseStage.</p>"},{"location":"development/setup/local-development/#table-of-contents","title":"\ud83d\udccb Table of Contents","text":"<ul> <li>Quick Start</li> <li>Development Commands</li> <li>Testing Workflow</li> <li>Pre-Push Validation</li> <li>Common Workflows</li> <li>Troubleshooting</li> </ul>"},{"location":"development/setup/local-development/#quick-start","title":"\ud83d\ude80 Quick Start","text":""},{"location":"development/setup/local-development/#first-time-setup","title":"First Time Setup","text":"<ol> <li> <p>Initialize environment: <pre><code>make setup\n# or: bash setup.sh\n</code></pre></p> </li> <li> <p>Install dependencies: <pre><code>make install\n</code></pre></p> </li> <li> <p>Start development environment: <pre><code>make dev\n</code></pre></p> </li> <li> <p>Access the application:</p> </li> <li>Web: http://localhost:5173</li> <li>API: http://localhost:3000</li> <li> <p>API Docs: http://localhost:3000/docs</p> </li> <li> <p>Load data (choose one):</p> </li> <li>Via Setup Wizard (recommended): Open http://localhost:5173 and follow the wizard</li> <li>Via CLI (development): <code>make db-seed</code> (in another terminal)</li> </ol>"},{"location":"development/setup/local-development/#development-commands","title":"\ud83c\udfaf Development Commands","text":"<p>We use a Makefile for convenience. All commands can be run with <code>make &lt;command&gt;</code>.</p>"},{"location":"development/setup/local-development/#setup-environment","title":"Setup &amp; Environment","text":"<pre><code>make setup        # Initialize .env file with secure secrets\nmake install      # Install all dependencies (API + Web)\n</code></pre>"},{"location":"development/setup/local-development/#development","title":"Development","text":"<pre><code>make dev          # Start local development (builds from source)\nmake up           # Start services in background\nmake down         # Stop all services\nmake logs         # Follow logs from all services\nmake clean        # Clean up containers, volumes, and build artifacts\n</code></pre>"},{"location":"development/setup/local-development/#testing","title":"Testing","text":"<pre><code>make test         # Run all tests\nmake test-api     # Run API tests only\nmake test-web     # Run Web E2E tests (requires services running)\nmake validate-ci  # Run all CI checks locally before pushing\nmake security     # Run security scans (Trivy)\n</code></pre>"},{"location":"development/setup/local-development/#code-quality","title":"Code Quality","text":"<pre><code>make lint         # Run linting (API + Web)\nmake lint-fix     # Fix linting issues automatically\nmake format       # Format code (Prettier)\n</code></pre>"},{"location":"development/setup/local-development/#database","title":"Database","text":"<pre><code>make db-seed      # Seed database with demo data (development only)\nmake db-reset     # Reset and reseed database from scratch\n</code></pre> <p>Note: For production/first-time users, use the Setup Wizard instead (opens automatically at http://localhost:5173).</p>"},{"location":"development/setup/local-development/#testing-workflow","title":"\ud83e\uddea Testing Workflow","text":""},{"location":"development/setup/local-development/#local-testing","title":"Local Testing","text":"<p>PulseStage has comprehensive testing at multiple levels:</p> <ol> <li> <p>Unit/Integration Tests (API) <pre><code>make test-api\n# or: cd api &amp;&amp; npm test\n</code></pre></p> </li> <li> <p>E2E Tests (Web) <pre><code>make up           # Start services first\nmake test-web     # Run E2E tests\n</code></pre></p> </li> <li> <p>Validate All CI Checks <pre><code>make validate-ci  # Runs everything CI will check\n</code></pre></p> </li> </ol>"},{"location":"development/setup/local-development/#what-gets-tested","title":"What Gets Tested","text":"<ul> <li>\u2705 API Tests: 214 unit/integration tests</li> <li>\u2705 API Build: TypeScript compilation</li> <li>\u2705 API Linting: ESLint + Prettier (0 errors allowed)</li> <li>\u2705 Web Linting: ESLint + Prettier (0 errors allowed)</li> <li>\u2705 Security: Semgrep + Trivy scans (in CI)</li> </ul>"},{"location":"development/setup/local-development/#pre-push-validation","title":"\ud83d\udd12 Pre-Push Validation","text":"<p>We use Husky hooks to ensure quality before pushing:</p>"},{"location":"development/setup/local-development/#pre-commit-hook","title":"Pre-Commit Hook","text":"<p>Automatically runs on every commit: - \u2705 Formats code with Prettier - \u2705 Adds formatted files to staging</p>"},{"location":"development/setup/local-development/#pre-push-hook","title":"Pre-Push Hook","text":"<p>Automatically runs before every push: - \u2705 Runs API tests (214 tests must pass) - \u2705 Builds API (TypeScript compilation) - \u2705 Runs API linting (0 errors) - \u2705 Runs Web linting (0 errors)</p> <p>Note: Warnings are allowed, but errors will block the push.</p>"},{"location":"development/setup/local-development/#manual-pre-push-check","title":"Manual Pre-Push Check","text":"<p>Run all validation checks manually before pushing:</p> <pre><code>make validate-ci\n</code></pre> <p>This runs the exact same checks that CI will run, ensuring your push will succeed.</p>"},{"location":"development/setup/local-development/#common-workflows","title":"\ud83d\udcbc Common Workflows","text":""},{"location":"development/setup/local-development/#starting-a-new-feature","title":"Starting a New Feature","text":"<pre><code># 1. Start fresh\nmake down\nmake clean\n\n# 2. Pull latest changes\ngit pull origin main\n\n# 3. Install dependencies\nmake install\n\n# 4. Start development\nmake dev\n\n# 5. In another terminal, seed database\nmake db-seed\n\n# 6. Start coding!\n</code></pre>"},{"location":"development/setup/local-development/#before-committing","title":"Before Committing","text":"<pre><code># Format and lint your code\nmake lint-fix\nmake format\n\n# Run tests\nmake test-api\n\n# The pre-commit hook will auto-format on commit\ngit add .\ngit commit -m \"your message\"\n</code></pre>"},{"location":"development/setup/local-development/#before-pushing","title":"Before Pushing","text":"<pre><code># Validate everything locally\nmake validate-ci\n\n# If all checks pass, push!\ngit push origin your-branch\n\n# The pre-push hook will run automatically\n</code></pre>"},{"location":"development/setup/local-development/#testing-ui-changes","title":"Testing UI Changes","text":"<pre><code># 1. Start with local builds\nmake dev\n\n# 2. Make your changes to web/src/...\n\n# 3. Vite will hot-reload automatically\n\n# 4. For API changes, restart the service\ndocker compose restart api\n</code></pre>"},{"location":"development/setup/local-development/#database-changes","title":"Database Changes","text":"<pre><code># After changing prisma/schema.prisma\n\n# 1. Update the schema in Docker\ndocker compose exec api npx prisma db push\n\n# 2. Regenerate Prisma client\ndocker compose exec api npx prisma generate\n\n# 3. Restart API\ndocker compose restart api\n\n# 4. Reseed if needed\nmake db-seed\n</code></pre>"},{"location":"development/setup/local-development/#running-security-scans","title":"Running Security Scans","text":"<pre><code># Run the same security scans as CI\nmake security\n</code></pre> <p>This will: - Build fresh Docker images - Run Trivy scans for vulnerabilities - Test service health - Report any HIGH/CRITICAL issues</p>"},{"location":"development/setup/local-development/#troubleshooting","title":"\ud83d\udc1b Troubleshooting","text":""},{"location":"development/setup/local-development/#services-wont-start","title":"Services Won't Start","text":"<pre><code># Check logs\nmake logs\n\n# Clean and restart\nmake clean\nmake dev\n</code></pre>"},{"location":"development/setup/local-development/#database-connection-issues","title":"Database Connection Issues","text":"<pre><code># Reset database\nmake db-reset\n</code></pre>"},{"location":"development/setup/local-development/#tests-failing","title":"Tests Failing","text":"<pre><code># Make sure you're using the test database\ncd api &amp;&amp; npm test\n\n# The tests use a separate test database automatically\n</code></pre>"},{"location":"development/setup/local-development/#port-already-in-use","title":"Port Already in Use","text":"<pre><code># Stop all services\nmake down\n\n# If that doesn't work, find and kill the process\nlsof -ti:3000 | xargs kill -9  # API port\nlsof -ti:5173 | xargs kill -9  # Web port\n</code></pre>"},{"location":"development/setup/local-development/#linting-errors","title":"Linting Errors","text":"<pre><code># Auto-fix most issues\nmake lint-fix\n\n# Format code\nmake format\n\n# Check what's wrong\nmake lint\n</code></pre>"},{"location":"development/setup/local-development/#pre-push-hook-failing","title":"Pre-Push Hook Failing","text":"<pre><code># Run the checks manually to see details\nmake validate-ci\n\n# Fix any issues, then try pushing again\n</code></pre>"},{"location":"development/setup/local-development/#docker-build-issues","title":"Docker Build Issues","text":"<pre><code># Clean everything and rebuild\nmake clean\ndocker system prune -af\nmake dev\n</code></pre>"},{"location":"development/setup/local-development/#additional-resources","title":"\ud83d\udcda Additional Resources","text":"<ul> <li>Setup Guide: <code>docs/getting-started/quick-start.md</code></li> <li>Testing Guide: <code>docs/development/testing.md</code></li> <li>API Documentation: http://localhost:3000/docs (when running)</li> <li>Contributing Guide: <code>CONTRIBUTING.md</code></li> </ul>"},{"location":"development/setup/local-development/#key-principles","title":"\ud83c\udfaf Key Principles","text":"<ol> <li>Local-First Development: Use <code>make dev</code> to build from local source</li> <li>Test Before Push: Use <code>make validate-ci</code> to catch issues early</li> <li>Automated Validation: Pre-push hooks ensure code quality</li> <li>Docker for Consistency: All services run in Docker for consistency</li> <li>Simple Commands: Use <code>make</code> for common tasks</li> </ol>"},{"location":"development/setup/local-development/#getting-help","title":"\ud83e\udd1d Getting Help","text":"<p>If you run into issues:</p> <ol> <li>Check the logs: <code>make logs</code></li> <li>Try a clean restart: <code>make clean &amp;&amp; make dev</code></li> <li>Check <code>TROUBLESHOOTING.md</code> for common issues</li> <li>Ask in the team channel</li> </ol> <p>Happy coding! \ud83d\ude80</p>"},{"location":"getting-started/configuration/","title":"Configuration","text":"<p>Documentation coming soon...</p>"},{"location":"getting-started/first-steps/","title":"First Steps with PulseStage","text":"<p>Welcome to PulseStage! This guide walks you through the main features and helps you get started.</p>"},{"location":"getting-started/first-steps/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Sign In</li> <li>Understanding Roles</li> <li>Submit Your First Question</li> <li>Up-Vote Questions</li> <li>Browse and Search</li> <li>Moderator Features</li> <li>Admin Panel</li> <li>Presentation Mode</li> </ul>"},{"location":"getting-started/first-steps/#sign-in","title":"Sign In","text":"<p>After completing the Setup Wizard, you'll need to sign in:</p>"},{"location":"getting-started/first-steps/#demo-data-users","title":"Demo Data Users","text":"<p>Navigate to the SSO test page: <pre><code>http://localhost:5173/sso-test.html\n</code></pre></p> <p>You'll see 4 demo users: - Alice Anderson (alice.admin@acme.com) - Admin role, Engineering team - Charlie Chen (charlie.owner@acme.com) - Owner, Product &amp; Marketing teams - David Martinez (david@acme.com) - Moderator, Engineering team - Emily Evans (emily.member@acme.com) - Member, Engineering &amp; Product teams</p> <p>Click any user to sign in with their account.</p>"},{"location":"getting-started/first-steps/#custom-setup","title":"Custom Setup","text":"<p>If you created your own organization: 1. Navigate to <code>http://localhost:5173/sso-test.html</code> 2. You'll see your admin user 3. Click to sign in</p>"},{"location":"getting-started/first-steps/#understanding-roles","title":"Understanding Roles","text":"<p>PulseStage has 5 role levels with increasing permissions:</p>"},{"location":"getting-started/first-steps/#viewer-default","title":"Viewer (Default)","text":"<ul> <li>View questions and answers</li> <li>Search and browse</li> <li>No authentication required</li> </ul>"},{"location":"getting-started/first-steps/#member","title":"Member","text":"<ul> <li>Everything Viewer can do, plus:</li> <li>Submit questions</li> <li>Up-vote questions</li> <li>Edit/delete own questions</li> </ul>"},{"location":"getting-started/first-steps/#moderator","title":"Moderator","text":"<ul> <li>Everything Member can do, plus:</li> <li>Answer questions</li> <li>Pin/unpin questions</li> <li>Freeze questions (prevent new upvotes)</li> <li>Add/remove tags</li> <li>Access Presentation Mode</li> <li>Team-scoped: Only for assigned teams</li> </ul>"},{"location":"getting-started/first-steps/#admin","title":"Admin","text":"<ul> <li>Everything Moderator can do, plus:</li> <li>Access Admin Panel</li> <li>View moderation stats</li> <li>Manage tags across all teams</li> <li>Bulk operations</li> <li>Export data</li> <li>View audit logs</li> <li>Cross-team: Access all teams</li> </ul>"},{"location":"getting-started/first-steps/#owner","title":"Owner","text":"<ul> <li>Everything Admin can do, plus:</li> <li>Create/edit/delete teams</li> <li>Manage team members</li> <li>Change user roles</li> <li>Manage organization settings</li> <li>Full control</li> </ul>"},{"location":"getting-started/first-steps/#submit-your-first-question","title":"Submit Your First Question","text":"<ol> <li>Sign in with any Member+ account</li> <li>Select a team from the navigation</li> <li>Click \"Submit Question\" button</li> <li>Enter your question</li> <li>Be clear and concise</li> <li>10-2000 characters</li> <li>One question per submission</li> <li>Click \"Submit\"</li> </ol> <p>Your question will appear instantly with 1 automatic upvote (from you).</p>"},{"location":"getting-started/first-steps/#up-vote-questions","title":"Up-Vote Questions","text":"<p>Help surface the most important questions:</p> <ol> <li>Browse open questions in any team</li> <li>Click the \u2b06\ufe0f button to upvote</li> <li>Questions sort by upvote count automatically</li> <li>You can only upvote once per question</li> </ol> <p>Upvoting helps prioritize what gets answered first.</p>"},{"location":"getting-started/first-steps/#browse-and-search","title":"Browse and Search","text":""},{"location":"getting-started/first-steps/#browse-questions","title":"Browse Questions","text":"<ul> <li>Open Questions: Waiting for answers</li> <li>Answered Questions: View all responses</li> <li>All Teams: See questions across teams (Admin+)</li> </ul>"},{"location":"getting-started/first-steps/#search","title":"Search","text":"<p>Use the search bar to find specific questions:</p> <ul> <li>Full-text search: Searches question body and responses</li> <li>Prefix matching: Type partial words</li> <li>Filter by:</li> <li>Team</li> <li>Tags</li> <li>Status (Open/Answered)</li> <li>Date range</li> </ul> <p>Example searches: - \"remote work\" - \"benefits\" - \"#urgent\" (searches by tag)</p>"},{"location":"getting-started/first-steps/#moderator-features","title":"Moderator Features","text":"<p>Available to Moderators, Admins, and Owners in their assigned teams.</p>"},{"location":"getting-started/first-steps/#answer-questions","title":"Answer Questions","text":"<ol> <li>Click on a question to open details</li> <li>Click \"Answer\" button</li> <li>Write your response (clear, comprehensive)</li> <li>Click \"Submit Answer\"</li> </ol> <p>The question status changes to \"Answered\" and appears in the answered list.</p>"},{"location":"getting-started/first-steps/#pin-questions","title":"Pin Questions","text":"<p>Highlight important questions at the top:</p> <ol> <li>Open question details</li> <li>Click \"Pin\" button</li> <li>Pinned questions appear first in the list</li> </ol>"},{"location":"getting-started/first-steps/#freeze-questions","title":"Freeze Questions","text":"<p>Prevent further upvotes (for already-answered questions):</p> <ol> <li>Open question details</li> <li>Click \"Freeze\" button</li> <li>Frozen questions show a \u2744\ufe0f icon</li> </ol>"},{"location":"getting-started/first-steps/#add-tags","title":"Add Tags","text":"<p>Organize questions with tags:</p> <ol> <li>Open question details</li> <li>Click \"+ Tag\"</li> <li>Select or create a tag</li> <li>Tags appear on the question card</li> </ol> <p>Common tags: - \ud83c\udff7\ufe0f Important - \ud83d\udd25 Urgent - \ud83d\udca1 Feature Request - \u2705 Answered Live - \ud83c\udfa4 Currently Presenting</p>"},{"location":"getting-started/first-steps/#admin-panel","title":"Admin Panel","text":"<p>Available to Admins and Owners. Access via your profile menu \u2192 \"Admin Panel\".</p>"},{"location":"getting-started/first-steps/#dashboard-tabs","title":"Dashboard Tabs","text":""},{"location":"getting-started/first-steps/#moderation-queue","title":"Moderation Queue","text":"<ul> <li>View all questions with filters</li> <li>Bulk operations (pin, freeze, tag, delete)</li> <li>Quick actions for common tasks</li> <li>Real-time updates</li> </ul>"},{"location":"getting-started/first-steps/#stats","title":"Stats","text":"<ul> <li>Questions answered per moderator</li> <li>Average response time</li> <li>Activity trends</li> <li>Team-level analytics</li> </ul>"},{"location":"getting-started/first-steps/#teams","title":"Teams","text":"<ul> <li>View all teams</li> <li>Create new teams</li> <li>Edit team details</li> <li>Activate/deactivate teams</li> <li>View member counts</li> </ul>"},{"location":"getting-started/first-steps/#tags","title":"Tags","text":"<ul> <li>Create custom tags</li> <li>Edit tag names and colors</li> <li>Delete unused tags</li> <li>See tag usage counts</li> </ul>"},{"location":"getting-started/first-steps/#users-owner-only","title":"Users (Owner only)","text":"<ul> <li>View all users</li> <li>Change user roles</li> <li>Remove users from teams</li> <li>Search by name/email</li> </ul>"},{"location":"getting-started/first-steps/#export","title":"Export","text":"<ul> <li>Export questions to CSV/JSON</li> <li>Filter by date range, status, team</li> <li>Include metadata and responses</li> <li>Download for analysis</li> </ul>"},{"location":"getting-started/first-steps/#audit-logs-admin","title":"Audit Logs (Admin+)","text":"<ul> <li>View all system actions</li> <li>Track user changes</li> <li>See who did what and when</li> <li>Filter by action type, user, date</li> </ul>"},{"location":"getting-started/first-steps/#settings-owner-only","title":"Settings (Owner only)","text":"<ul> <li>Change organization name</li> <li>Configure tenant settings</li> <li>Manage organization-level options</li> </ul>"},{"location":"getting-started/first-steps/#presentation-mode","title":"Presentation Mode","text":"<p>Perfect for live town halls and all-hands meetings. Available to Moderator+ roles.</p>"},{"location":"getting-started/first-steps/#entering-presentation-mode","title":"Entering Presentation Mode","text":"<ol> <li>Navigate to a team</li> <li>Click \"Presentation Mode\" in the top right</li> <li>Full-screen view optimized for projection</li> <li>Questions auto-sort by upvotes</li> <li>Real-time updates as votes come in</li> </ol>"},{"location":"getting-started/first-steps/#using-presentation-mode","title":"Using Presentation Mode","text":"<ul> <li>Large, readable text for audiences</li> <li>Auto-tagged as \"Currently Presenting\"</li> <li>Answer inline without leaving presentation</li> <li>Questions auto-mark as \"Reviewed\" when answered</li> <li>Press ESC to exit</li> </ul>"},{"location":"getting-started/first-steps/#tips-for-presentations","title":"Tips for Presentations","text":"<ol> <li>Sort by upvotes to address top priorities</li> <li>Use tags to track answered questions</li> <li>Pin important questions to keep them visible</li> <li>Answer live for immediate engagement</li> <li>Export afterwards for follow-up items</li> </ol>"},{"location":"getting-started/first-steps/#next-steps","title":"Next Steps","text":""},{"location":"getting-started/first-steps/#explore-more-features","title":"Explore More Features","text":"<ul> <li>User Guide - Detailed feature walkthrough</li> <li>Moderator Guide - Moderation best practices</li> <li>Admin Guide - Admin panel features</li> </ul>"},{"location":"getting-started/first-steps/#customize-your-installation","title":"Customize Your Installation","text":"<ul> <li>Configuration - Environment settings</li> <li>Team Management - Organize your teams</li> <li>Role Management - Set up permissions</li> </ul>"},{"location":"getting-started/first-steps/#for-developers","title":"For Developers","text":"<ul> <li>Development Guide - Contribute to PulseStage</li> <li>API Documentation - REST API reference</li> <li>Architecture - System design</li> </ul>"},{"location":"getting-started/first-steps/#common-workflows","title":"Common Workflows","text":""},{"location":"getting-started/first-steps/#town-hall-qa-workflow","title":"Town Hall Q&amp;A Workflow","text":"<ol> <li>Before the meeting:</li> <li>Admins create a team event (e.g., \"Q1 All-Hands\")</li> <li>Share the link with employees</li> <li> <p>Employees submit questions ahead of time</p> </li> <li> <p>During the meeting:</p> </li> <li>Moderator opens Presentation Mode</li> <li>Questions are sorted by upvotes</li> <li>Leadership answers top questions live</li> <li> <p>Tag questions as \"Answered Live\"</p> </li> <li> <p>After the meeting:</p> </li> <li>Admin exports unanswered questions</li> <li>Follow-up responses are added via the platform</li> <li>Transcript can be exported for documentation</li> </ol>"},{"location":"getting-started/first-steps/#team-retrospective-workflow","title":"Team Retrospective Workflow","text":"<ol> <li>Setup:</li> <li>Create a team (e.g., \"Engineering Retro\")</li> <li> <p>Invite team members</p> </li> <li> <p>Collection Phase:</p> </li> <li>Team submits questions/topics</li> <li>Upvote most important items</li> <li> <p>Use tags: \"Went Well\", \"Needs Improvement\", \"Action Item\"</p> </li> <li> <p>Discussion Phase:</p> </li> <li>Open Presentation Mode</li> <li>Discuss top-voted items</li> <li> <p>Answer/respond inline</p> </li> <li> <p>Follow-Up:</p> </li> <li>Export action items</li> <li>Track progress in next retro</li> </ol>"},{"location":"getting-started/first-steps/#tips-best-practices","title":"Tips &amp; Best Practices","text":""},{"location":"getting-started/first-steps/#for-question-submitters","title":"For Question Submitters","text":"<ul> <li>\u2705 Be specific: \"What's our remote work policy for 2025?\" vs \"Policy question?\"</li> <li>\u2705 One question per submission: Makes it easier to answer</li> <li>\u2705 Search first: Your question might already be answered</li> <li>\u2705 Upvote similar questions: Rather than duplicating</li> </ul>"},{"location":"getting-started/first-steps/#for-moderators","title":"For Moderators","text":"<ul> <li>\u2705 Answer promptly: Within 48 hours when possible</li> <li>\u2705 Be comprehensive: Answer thoroughly to avoid follow-ups</li> <li>\u2705 Use tags: Organize for easier tracking</li> <li>\u2705 Pin important: Keep critical questions visible</li> </ul>"},{"location":"getting-started/first-steps/#for-admins","title":"For Admins","text":"<ul> <li>\u2705 Review audit logs: Track system usage</li> <li>\u2705 Monitor stats: Identify response bottlenecks</li> <li>\u2705 Export regularly: Keep records for compliance</li> <li>\u2705 Manage tags: Keep them organized and relevant</li> </ul>"},{"location":"getting-started/first-steps/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/first-steps/#cant-submit-questions","title":"Can't Submit Questions","text":"<ul> <li>Ensure you're signed in (Member+ role required)</li> <li>Check you're on a team page, not the home page</li> <li>Verify question length (10-2000 characters)</li> </ul>"},{"location":"getting-started/first-steps/#not-seeing-all-teams","title":"Not Seeing All Teams","text":"<ul> <li>Regular users only see teams they're members of</li> <li>Admins see all teams</li> <li>Check with your admin if you need access</li> </ul>"},{"location":"getting-started/first-steps/#presentation-mode-not-available","title":"Presentation Mode Not Available","text":"<ul> <li>Requires Moderator+ role</li> <li>Must be on a team page with questions</li> <li>Check your role in Profile \u2192 Teams</li> </ul>"},{"location":"getting-started/first-steps/#changes-not-appearing","title":"Changes Not Appearing","text":"<ul> <li>Hard refresh: Ctrl+F5 (Windows/Linux) or Cmd+Shift+R (Mac)</li> <li>Clear browser cache</li> <li>Check real-time connection (top-right indicator)</li> </ul>"},{"location":"getting-started/first-steps/#getting-help","title":"Getting Help","text":"<ul> <li>\ud83d\udcd6 Full Documentation</li> <li>\ud83d\udc1b Report Issues</li> <li>\ud83d\udcac Discussions</li> <li>\ud83d\udce7 Contact your PulseStage administrator</li> </ul> <p>Welcome to PulseStage! We hope you enjoy using it to improve communication and transparency in your organization. \ud83d\ude80</p>"},{"location":"getting-started/installation/","title":"Installation Guide","text":"<p>This guide provides detailed instructions for installing PulseStage in various environments.</p>"},{"location":"getting-started/installation/#system-requirements","title":"System Requirements","text":""},{"location":"getting-started/installation/#minimum-requirements","title":"Minimum Requirements","text":"<ul> <li>CPU: 2 cores</li> <li>RAM: 2GB</li> <li>Disk: 10GB free space</li> <li>OS: Linux, macOS, or Windows with WSL2</li> </ul>"},{"location":"getting-started/installation/#software-requirements","title":"Software Requirements","text":"<ul> <li>Docker 20.10+ and Docker Compose 2.0+</li> <li>Git 2.30+</li> <li>(Optional) Node.js 24+ for local development</li> </ul>"},{"location":"getting-started/installation/#docker-compose-installation-recommended","title":"Docker Compose Installation (Recommended)","text":"<p>The easiest way to run PulseStage is with Docker Compose using published images.</p>"},{"location":"getting-started/installation/#1-clone-repository","title":"1. Clone Repository","text":"<pre><code>git clone https://github.com/seanmdalton/pulsestage.git\ncd pulsestage\n</code></pre>"},{"location":"getting-started/installation/#2-configure-environment","title":"2. Configure Environment","text":"<p>Run the setup script to generate secure configuration:</p> <pre><code>./setup.sh\n</code></pre> <p>This automatically: - Creates <code>.env</code> file with all required settings - Generates secure random secrets using OpenSSL - Sets up database and Redis URLs - Configures ports and CORS</p> <p>Manual Setup (Alternative):</p> <p>If you prefer manual configuration:</p> <pre><code>cp env.example .env\n</code></pre> <p>Then edit <code>.env</code> and set: - <code>SESSION_SECRET</code> - Random 32+ character string (generate with: <code>openssl rand -base64 32</code>) - <code>ADMIN_SESSION_SECRET</code> - Different random 32+ character string - <code>CSRF_SECRET</code> - Another random 32+ character string - <code>ADMIN_KEY</code> - Admin authentication key (change from default!) - <code>CORS_ORIGIN</code> - Your frontend URL (default: http://localhost:5173)</p>"},{"location":"getting-started/installation/#3-start-services","title":"3. Start Services","text":"<pre><code>docker compose up -d\n</code></pre> <p>This pulls and runs the latest published images from GitHub Container Registry: - pulsestage-api:latest - pulsestage-web:latest</p>"},{"location":"getting-started/installation/#4-complete-setup-wizard","title":"4. Complete Setup Wizard","text":"<p>The API auto-creates a default tenant on first startup. Open your browser:</p> <pre><code>http://localhost:5173\n</code></pre> <p>You'll see the Setup Wizard which guides you through: - Load Demo Data - Pre-configured teams, users, and sample questions - Create Organization - Start fresh with your own setup</p> <p>See the Quick Start Guide for detailed wizard instructions.</p>"},{"location":"getting-started/installation/#5-verify-installation","title":"5. Verify Installation","text":"<p>Check all services are running:</p> <pre><code>docker compose ps\n</code></pre> <p>Expected output: <pre><code>NAME                IMAGE               STATUS\nama-app-api-1       ama-app-api         Up\nama-app-db-1        postgres:16-alpine  Up\nama-app-redis-1     redis:7-alpine      Up\nama-app-web-1       ama-app-web         Up\n</code></pre></p>"},{"location":"getting-started/installation/#6-access-application","title":"6. Access Application","text":"<ul> <li>Web UI: http://localhost:5173</li> <li>API: http://localhost:3000</li> <li>API Docs (Swagger): http://localhost:3000/api-docs</li> <li>SSO Test Page: http://localhost:5173/sso-test.html</li> </ul>"},{"location":"getting-started/installation/#local-development-installation","title":"Local Development Installation","text":"<p>For active development with hot reload and local builds:</p>"},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<pre><code>node --version  # Should be 24.x\nnpm --version   # Should be 10.x\n</code></pre>"},{"location":"getting-started/installation/#1-clone-and-install","title":"1. Clone and Install","text":"<pre><code>git clone https://github.com/seanmdalton/pulsestage.git\ncd pulsestage\n\n# Use Makefile for convenience\nmake setup     # Generate .env\nmake install   # Install dependencies\n</code></pre> <p>Manual installation: <pre><code># Install API dependencies\ncd api\nnpm install\n\n# Install Web dependencies\ncd ../web\nnpm install\n</code></pre></p>"},{"location":"getting-started/installation/#2-start-development-environment","title":"2. Start Development Environment","text":"<pre><code>make dev\n</code></pre> <p>This starts all services with local builds and hot reload enabled.</p> <p>Manual start: <pre><code># Start with local builds\ndocker compose -f docker-compose.yaml -f docker-compose.override.yaml up -d\n</code></pre></p>"},{"location":"getting-started/installation/#3-load-demo-data-optional","title":"3. Load Demo Data (Optional)","text":"<pre><code>make db-seed\n</code></pre> <p>This loads the same demo data as the setup wizard for development purposes.</p> <p>Manual seeding: <pre><code>docker compose exec api npm run db:seed:full\ndocker compose restart api  # Reload mock SSO users\n</code></pre></p>"},{"location":"getting-started/installation/#4-access-development-environment","title":"4. Access Development Environment","text":"<ul> <li>Web UI: http://localhost:5173 (Vite dev server with HMR)</li> <li>API: http://localhost:3000</li> <li>API Docs: http://localhost:3000/api-docs</li> </ul>"},{"location":"getting-started/installation/#development-workflow","title":"Development Workflow","text":"<p>See DEVELOPMENT.md for the complete development guide, including: - Testing workflow - Pre-push validation - Common tasks - Troubleshooting</p>"},{"location":"getting-started/installation/#production-deployment","title":"Production Deployment","text":"<p>See Deployment Guide for production setup instructions.</p> <p>Key differences for production: - Use strong, unique secrets in <code>.env</code> - Change <code>ADMIN_KEY</code> from default - Enable HTTPS with proper certificates - Configure proper SSO provider (not Mock SSO) - Set <code>NODE_ENV=production</code> - Use production-grade PostgreSQL (managed service) - Configure backups and monitoring</p>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#port-conflicts","title":"Port Conflicts","text":"<p>If ports are already in use, modify <code>docker-compose.yaml</code>:</p> <pre><code>services:\n  web:\n    ports:\n      - \"8080:80\"  # Change external port 5173 to 8080\n\n  api:\n    ports:\n      - \"3001:3000\"  # Change external port 3000 to 3001\n</code></pre> <p>Then update <code>CORS_ORIGIN</code> in <code>.env</code> to match your new web port.</p>"},{"location":"getting-started/installation/#database-connection-errors","title":"Database Connection Errors","text":"<p>Check PostgreSQL is running:</p> <pre><code>docker compose logs db\n</code></pre> <p>Reset database if needed:</p> <pre><code>docker compose down -v\ndocker compose up -d\n</code></pre> <p>Warning: This deletes all data! Use only for development.</p>"},{"location":"getting-started/installation/#setup-wizard-issues","title":"Setup Wizard Issues","text":"<p>If the setup wizard doesn't appear:</p> <ol> <li>Clear browser cache/localStorage:</li> <li>Open DevTools (F12)</li> <li>Application \u2192 Local Storage \u2192 Clear All</li> <li> <p>Refresh page</p> </li> <li> <p>Or use incognito/private window</p> </li> <li> <p>Check if teams already exist:    <pre><code>docker compose exec db psql -U app -d ama -c \"SELECT COUNT(*) FROM \\\"Team\\\";\"\n</code></pre></p> </li> </ol>"},{"location":"getting-started/installation/#permission-errors","title":"Permission Errors","text":"<p>On Linux, you may need to fix file permissions:</p> <pre><code>sudo chown -R $USER:$USER .\n</code></pre>"},{"location":"getting-started/installation/#services-wont-start","title":"Services Won't Start","text":"<p>Check Docker logs:</p> <pre><code># All services\ndocker compose logs\n\n# Specific service\ndocker compose logs api\ndocker compose logs db\n</code></pre> <p>Common issues: - Ports already in use (see Port Conflicts above) - Insufficient RAM (need at least 2GB) - Docker daemon not running</p>"},{"location":"getting-started/installation/#upgrading","title":"Upgrading","text":"<p>To upgrade to the latest version:</p> <pre><code># Pull latest images\ndocker compose pull\n\n# Restart services\ndocker compose up -d\n\n# Database migrations are applied automatically on startup\n</code></pre> <p>For local development builds:</p> <pre><code>git pull origin main\nmake install  # Update dependencies\nmake dev      # Rebuild and restart\n</code></pre>"},{"location":"getting-started/installation/#uninstalling","title":"Uninstalling","text":"<p>To completely remove PulseStage:</p> <pre><code># Stop and remove all containers and volumes\ndocker compose down -v\n\n# Remove images (optional)\ndocker rmi ghcr.io/seanmdalton/pulsestage-api:latest\ndocker rmi ghcr.io/seanmdalton/pulsestage-web:latest\n\n# Remove repository\ncd ..\nrm -rf pulsestage\n</code></pre>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<ul> <li>Quick Start - Get running quickly</li> <li>Configuration Guide - Environment variables</li> <li>First Steps - Getting started with PulseStage</li> <li>Development Setup - For contributors</li> </ul>"},{"location":"getting-started/quick-start/","title":"Quick Start","text":"<p>Get PulseStage up and running in under 5 minutes!</p>"},{"location":"getting-started/quick-start/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker and Docker Compose installed</li> <li>Git for cloning the repository</li> <li>At least 2GB RAM available</li> </ul>"},{"location":"getting-started/quick-start/#installation","title":"Installation","text":""},{"location":"getting-started/quick-start/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/seanmdalton/pulsestage.git\ncd pulsestage\n</code></pre>"},{"location":"getting-started/quick-start/#2-run-setup-script","title":"2. Run Setup Script","text":"<p>The setup script creates your environment configuration with secure secrets:</p> <pre><code>./setup.sh\n</code></pre> <p>This will: - Create <code>.env</code> file with all required configuration - Generate secure random secrets for sessions and CSRF - Set up database and Redis connection strings - Configure default ports and CORS settings</p> <p>Note: The generated admin key is <code>dev-admin-key-change-me</code>. Change this in production!</p>"},{"location":"getting-started/quick-start/#3-start-the-services","title":"3. Start the Services","text":"<pre><code>docker compose up -d\n</code></pre> <p>This will: - Pull the latest published container images from GitHub Container Registry - Start all services in the background</p> <p>Services started: - PostgreSQL database on port 5432 - Redis cache on port 6379 - API server on port 3000 (ghcr.io/seanmdalton/pulsestage-api:latest) - Web frontend on port 5173 (ghcr.io/seanmdalton/pulsestage-web:latest)</p> <p>The API automatically creates a default tenant on first startup (auto-bootstrap).</p>"},{"location":"getting-started/quick-start/#4-access-pulsestage","title":"4. Access PulseStage","text":"<p>Open your browser and navigate to:</p> <pre><code>http://localhost:5173\n</code></pre> <p>You'll see the Setup Wizard which guides you through initial setup.</p>"},{"location":"getting-started/quick-start/#setup-wizard","title":"Setup Wizard","text":"<p>On first visit, PulseStage presents a setup wizard with two options:</p>"},{"location":"getting-started/quick-start/#option-1-load-demo-data-recommended","title":"Option 1: Load Demo Data (Recommended)","text":"<p>Perfect for exploring PulseStage's features:</p> <ol> <li>Click \"Load Demo Data\"</li> <li>Click \"Continue\"</li> <li>Wait ~5-10 seconds for the system to:</li> <li>Create Acme Corp tenant</li> <li>Add 3 teams (Engineering, Product, Marketing)</li> <li>Create 4 demo users (Alice, Charlie, David, Emily)</li> <li>Generate 6 sample questions</li> <li>Add default tags</li> <li>System will restart automatically to load the new users</li> </ol> <p>Demo includes: - Alice Anderson (alice.admin@acme.com) - Admin, Engineering team - Charlie Chen (charlie.owner@acme.com) - Owner, Product &amp; Marketing teams - David Martinez (david@acme.com) - Moderator, Engineering team - Emily Evans (emily.member@acme.com) - Member, Engineering &amp; Product teams</p>"},{"location":"getting-started/quick-start/#option-2-create-your-own-organization","title":"Option 2: Create Your Own Organization","text":"<p>For starting fresh with your own setup:</p> <ol> <li>Click \"Set up a new team\"</li> <li>Name your organization (e.g., \"My Company\")</li> <li>Create admin user with your name and email</li> <li>Create your first team (e.g., \"Engineering\")</li> <li>System will restart automatically to create your account</li> <li>Navigate to <code>/sso-test.html</code> to sign in with your new account</li> </ol>"},{"location":"getting-started/quick-start/#next-steps","title":"Next Steps","text":""},{"location":"getting-started/quick-start/#sign-in","title":"Sign In","text":"<p>After setup completes, navigate to:</p> <pre><code>http://localhost:5173/sso-test.html\n</code></pre> <p>For Demo Data: - You'll see all 4 demo users listed - Click any user to sign in - Try different users to explore different roles</p> <p>For Custom Setup: - You'll see your admin user - Click to sign in with your account</p>"},{"location":"getting-started/quick-start/#explore-features","title":"Explore Features","text":"<ol> <li>Submit Your First Question</li> <li>Navigate to any team page</li> <li>Click \"Submit Question\"</li> <li> <p>Enter your question and submit!</p> </li> <li> <p>Try Presentation Mode (Moderator+)</p> </li> <li>Open a team with questions</li> <li>Click \"Presentation Mode\"</li> <li> <p>Perfect for live town halls</p> </li> <li> <p>Access Admin Panel (Admin+)</p> </li> <li>Click your profile \u2192 \"Admin Panel\"</li> <li>Explore team management, user management, analytics</li> <li> <p>View audit logs and exports</p> </li> <li> <p>Manage Teams (Admin+)</p> </li> <li>Create additional teams</li> <li>Add/remove members</li> <li>Configure team settings</li> </ol>"},{"location":"getting-started/quick-start/#development-mode","title":"Development Mode","text":"<p>For local development with live code changes:</p> <pre><code># Initialize and install dependencies\nmake setup\nmake install\n\n# Start with local builds (hot reload)\nmake dev\n\n# In another terminal, seed demo data\nmake db-seed\n</code></pre> <p>See DEVELOPMENT.md for the complete development workflow.</p>"},{"location":"getting-started/quick-start/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/quick-start/#setup-wizard-doesnt-appear","title":"Setup Wizard Doesn't Appear","text":"<p>Clear your browser's localStorage: 1. Open DevTools (F12) 2. Go to Application \u2192 Local Storage \u2192 <code>http://localhost:5173</code> 3. Click \"Clear All\" 4. Refresh the page</p> <p>Or use an incognito/private window.</p>"},{"location":"getting-started/quick-start/#services-wont-start","title":"Services Won't Start","text":"<p>Check if ports are already in use:</p> <pre><code># Check port 5173 (web)\nlsof -i :5173\n\n# Check port 3000 (api)\nlsof -i :3000\n\n# Check port 5432 (database)\nlsof -i :5432\n</code></pre>"},{"location":"getting-started/quick-start/#database-connection-issues","title":"Database Connection Issues","text":"<p>Ensure PostgreSQL is running:</p> <pre><code>docker compose ps\n</code></pre> <p>All services should show \"Up\" status.</p>"},{"location":"getting-started/quick-start/#need-help","title":"Need Help?","text":"<ul> <li>Check the Installation Guide for detailed troubleshooting</li> <li>Visit our GitHub Issues</li> <li>See TROUBLESHOOTING.md</li> </ul>"},{"location":"getting-started/quick-start/#whats-next","title":"What's Next?","text":"<ul> <li>Installation Guide - Detailed setup instructions</li> <li>Configuration - Environment variables and settings</li> <li>First Steps - Guided tour of PulseStage features</li> <li>Development Guide - For contributors</li> </ul>"},{"location":"moderator-guide/answering-questions/","title":"Answering Questions","text":"<p>Documentation coming soon...</p>"},{"location":"moderator-guide/moderation-queue/","title":"Moderation Queue","text":"<p>The Moderation Queue is a powerful interface for moderators and admins to efficiently manage and moderate questions across all teams.</p>"},{"location":"moderator-guide/moderation-queue/#overview","title":"Overview","text":"<p>Access the Moderation Queue from the Admin Panel \u2192 Moderation Queue tab.</p> <p>Who can access: - \u2705 Moderators (for their teams) - \u2705 Admins (all teams) - \u2705 Owners (all teams)</p>"},{"location":"moderator-guide/moderation-queue/#features","title":"Features","text":""},{"location":"moderator-guide/moderation-queue/#table-view","title":"\ud83d\udcca Table View","text":"<p>All questions are displayed in a comprehensive table with:</p> <ul> <li>Checkbox - Select for bulk operations</li> <li>Question - Body text with pinned \ud83d\udccc and frozen \u2744\ufe0f indicators</li> <li>Team - Which team the question belongs to</li> <li>Status - OPEN or ANSWERED</li> <li>Upvotes - Number of upvotes</li> <li>Tags - Color-coded tag pills</li> <li>Actions - Quick action buttons</li> </ul>"},{"location":"moderator-guide/moderation-queue/#filters","title":"\ud83d\udd0d Filters","text":"<p>Filter questions by:</p> <ul> <li>Status - All, Open, or Answered</li> <li>Team - Filter to specific team</li> <li>Pinned - All, Pinned Only, or Unpinned Only</li> <li>Frozen - All, Frozen Only, or Unfrozen Only</li> <li>Needs Review - Checkbox to show only unreviewed questions</li> </ul> <p>Clear all filters with the \"Clear Filters\" button.</p>"},{"location":"moderator-guide/moderation-queue/#quick-actions","title":"\u26a1 Quick Actions","text":"<p>Each question has quick action buttons:</p> <ul> <li>\ud83d\udccc Pin/Unpin - Highlight important questions (pinned appear first)</li> <li>\u2744\ufe0f Freeze/Unfreeze - Lock questions from further interaction</li> <li>\ud83d\udcac Answer - Open answer modal (only for OPEN questions)</li> </ul> <p>Actions update instantly and sync across all browser windows via SSE.</p>"},{"location":"moderator-guide/moderation-queue/#bulk-operations","title":"Bulk Operations","text":""},{"location":"moderator-guide/moderation-queue/#selecting-questions","title":"Selecting Questions","text":"<ol> <li>Select individual questions - Click checkbox next to each question</li> <li>Select all - Click checkbox in table header</li> <li>Selection shows badge - \"X questions selected\" with available actions</li> </ol>"},{"location":"moderator-guide/moderation-queue/#bulk-tag-actions","title":"Bulk Tag Actions","text":"<p>When questions are selected, use the Tag Actions dropdown:</p> <p>Add Tag: - Select \"+ Tag Name\" from dropdown - Tag is added to all selected questions - Success count displayed</p> <p>Remove Tag: - Select \"- Tag Name\" from dropdown - Tag is removed from all selected questions</p>"},{"location":"moderator-guide/moderation-queue/#bulk-actions","title":"Bulk Actions","text":"<p>Use the Bulk Actions dropdown for:</p> <ul> <li>\ud83d\udccc Pin All - Pin all selected questions</li> <li>\ud83d\udccc Unpin All - Remove pin from all selected</li> <li>\u2744\ufe0f Freeze All - Freeze all selected questions</li> <li>\u2744\ufe0f Unfreeze All - Unfreeze all selected</li> <li>\ud83d\uddd1\ufe0f Delete All - Permanently delete (requires confirmation)</li> </ul> <p>Results: - Success/error count displayed - Audit log created for all operations - Real-time updates via SSE to all connected clients</p>"},{"location":"moderator-guide/moderation-queue/#pin-vs-freeze","title":"Pin vs Freeze","text":""},{"location":"moderator-guide/moderation-queue/#pin","title":"\ud83d\udccc Pin","text":"<p>Purpose: Highlight important questions</p> <p>Effect: - Question appears first in lists (ordered by pin status) - Visual \ud83d\udccc indicator shown - Tracks who pinned and when - Does NOT prevent upvotes or responses</p> <p>Use Cases: - Highlight frequently asked questions - Mark questions for leadership attention - Prioritize for upcoming town hall</p>"},{"location":"moderator-guide/moderation-queue/#freeze","title":"\u2744\ufe0f Freeze","text":"<p>Purpose: Lock questions from further interaction</p> <p>Effect: - Visual \u2744\ufe0f indicator shown - Prevents new upvotes (optional enforcement) - Prevents new responses (optional enforcement) - Tracks who froze and when</p> <p>Use Cases: - Mark questions as resolved - Prevent interaction on sensitive topics - Archive old questions while keeping them visible</p>"},{"location":"moderator-guide/moderation-queue/#best-practices","title":"Best Practices","text":""},{"location":"moderator-guide/moderation-queue/#efficient-workflow","title":"Efficient Workflow","text":"<ol> <li>Filter to \"Needs Review\" - See only unreviewed questions</li> <li>Sort by team - Focus on your assigned teams</li> <li>Use bulk tags - Tag similar questions at once (e.g., all \"Policy\" questions)</li> <li>Pin urgent items - Ensure leadership sees critical questions</li> <li>Freeze resolved - Lock questions that don't need more upvotes</li> </ol>"},{"location":"moderator-guide/moderation-queue/#tag-strategy","title":"Tag Strategy","text":"<p>Common tag patterns:</p> <ul> <li>\"Important\" - High-priority questions</li> <li>\"Reviewed\" - Questions already addressed in presentation mode</li> <li>\"Currently Presenting\" - Active question in presentation (auto-managed)</li> <li>\"Follow-up\" - Needs additional action</li> <li>\"Policy\", \"Benefits\", \"Culture\" - Topic categories</li> </ul>"},{"location":"moderator-guide/moderation-queue/#bulk-operations-tips","title":"Bulk Operations Tips","text":"<ul> <li>Always review selection before bulk delete</li> <li>Use bulk tag to categorize similar questions quickly</li> <li>Bulk pin for pre-town hall question prioritization</li> <li>Bulk freeze after event to archive historical questions</li> </ul>"},{"location":"moderator-guide/moderation-queue/#keyboard-shortcuts","title":"Keyboard Shortcuts","text":"<p>When in moderation queue:</p> <ul> <li>Click checkbox - Select/deselect question</li> <li>Click row - View question details</li> <li>Quick actions - Instant pin/freeze/answer</li> </ul>"},{"location":"moderator-guide/moderation-queue/#real-time-updates","title":"Real-Time Updates","text":"<p>The moderation queue updates in real-time:</p> <ul> <li>New questions appear automatically</li> <li>Upvote counts update live</li> <li>Tag changes from other moderators sync instantly</li> <li>Pin/freeze actions from other windows reflected immediately</li> </ul> <p>No need to refresh the page!</p>"},{"location":"moderator-guide/moderation-queue/#related-pages","title":"Related Pages","text":"<ul> <li>Answering Questions</li> <li>Tagging</li> <li>Presentation Mode</li> <li>Moderation Stats</li> </ul>"},{"location":"moderator-guide/overview/","title":"Moderator Guide Overview","text":"<p>Welcome to the PulseStage moderator guide! As a moderator, you have special privileges to manage questions, facilitate discussions, and ensure smooth Q&amp;A sessions.</p>"},{"location":"moderator-guide/overview/#what-is-a-moderator","title":"What is a Moderator?","text":"<p>Moderators are team-scoped roles responsible for: - Answering questions during live sessions - Tagging and organizing questions - Using presentation mode for live events - Reviewing and moderating content</p>"},{"location":"moderator-guide/overview/#key-features-for-moderators","title":"Key Features for Moderators","text":""},{"location":"moderator-guide/overview/#answer-questions","title":"\u270d\ufe0f Answer Questions","text":"<p>Respond to questions with detailed answers that are visible to all team members. Track which questions you've reviewed and answered.</p> <p>Learn more about answering questions \u2192</p>"},{"location":"moderator-guide/overview/#tag-questions","title":"\ud83c\udff7\ufe0f Tag Questions","text":"<p>Organize questions by topic using tags. This helps users find related questions and helps you identify themes.</p> <p>Learn more about tagging \u2192</p>"},{"location":"moderator-guide/overview/#moderation-queue","title":"\ud83d\udcca Moderation Queue","text":"<p>Access a powerful dashboard to review, filter, and manage questions. See which questions need attention and track your moderation activity.</p> <p>Learn more about the moderation queue \u2192</p>"},{"location":"moderator-guide/overview/#presentation-mode","title":"\ud83c\udfa4 Presentation Mode","text":"<p>Present questions in a clean, full-screen interface perfect for live events. Navigate through questions seamlessly while audiences watch in real-time.</p> <p>Learn more about presentation mode \u2192</p>"},{"location":"moderator-guide/overview/#pin-freeze-questions","title":"\ud83d\udccc Pin &amp; Freeze Questions","text":"<ul> <li>Pin important questions to the top of the list</li> <li>Freeze questions to prevent additional upvotes or responses</li> </ul>"},{"location":"moderator-guide/overview/#moderator-permissions","title":"Moderator Permissions","text":"<p>As a moderator, you have access to:</p> <p>\u2705 Answer questions in your assigned teams \u2705 Tag and untag questions \u2705 Pin important questions \u2705 Freeze questions to prevent changes \u2705 Access the moderation queue \u2705 Use presentation mode \u2705 View moderation statistics for your teams  </p> <p>\u274c Cannot access questions outside your assigned teams \u274c Cannot manage users, teams, or global settings (admin only)</p>"},{"location":"moderator-guide/overview/#team-scoping","title":"Team Scoping","text":"<p>Important: Team Boundaries</p> <p>Moderators are scoped to specific teams. You can only:</p> <ul> <li>See questions from teams you moderate</li> <li>Answer questions in your teams</li> <li>Access moderation stats for your teams</li> </ul> <p>To moderate multiple teams, you must be explicitly added as a moderator to each team.</p>"},{"location":"moderator-guide/overview/#getting-started","title":"Getting Started","text":"<ol> <li>Access the Admin Panel (visible when viewing a team you moderate)</li> <li>Review the Moderation Queue to see pending questions</li> <li>Tag questions to help organize them</li> <li>Answer questions during your Q&amp;A session</li> <li>Use Presentation Mode for live events</li> </ol>"},{"location":"moderator-guide/overview/#quick-tips","title":"Quick Tips","text":"<p>Best Practices</p> <ul> <li>Review regularly: Check the moderation queue before sessions</li> <li>Use tags consistently: Create a tagging taxonomy with your team</li> <li>Pin sparingly: Only pin the most critical questions</li> <li>Freeze when needed: Prevent vote manipulation on sensitive topics</li> <li>Answer thoroughly: Clear, complete answers reduce follow-up questions</li> </ul> <p>Real-Time Collaboration</p> <p>Multiple moderators can work simultaneously. Changes appear in real-time for all moderators and users.</p>"},{"location":"moderator-guide/overview/#moderation-workflow","title":"Moderation Workflow","text":"<p>A typical moderation workflow:</p> <ol> <li>Before the event:</li> <li>Review questions in the moderation queue</li> <li>Tag questions by topic</li> <li> <p>Pin high-priority questions</p> </li> <li> <p>During the event:</p> </li> <li>Launch presentation mode</li> <li>Navigate through questions</li> <li>Answer questions live</li> <li> <p>Freeze questions as they're addressed</p> </li> <li> <p>After the event:</p> </li> <li>Review remaining unanswered questions</li> <li>Check moderation stats</li> <li>Follow up on any outstanding items</li> </ol>"},{"location":"moderator-guide/overview/#need-help","title":"Need Help?","text":"<ul> <li>For user features: See the User Guide</li> <li>For admin features: See the Admin Guide</li> <li>For technical issues: Check our GitHub Issues</li> </ul>"},{"location":"moderator-guide/overview/#next-steps","title":"Next Steps","text":"<p>Ready to start moderating? Check out these guides:</p> <ul> <li>Answering Questions - Learn how to respond effectively</li> <li>Moderation Queue - Master the moderation dashboard</li> <li>Presentation Mode - Run successful live Q&amp;A sessions</li> </ul>"},{"location":"moderator-guide/presentation-mode/","title":"Presentation Mode","text":"<p>Documentation coming soon...</p>"},{"location":"moderator-guide/tagging/","title":"Tagging","text":"<p>Documentation coming soon...</p>"},{"location":"security/audit-logging/","title":"Audit Logging","text":"<p>Documentation coming soon...</p>"},{"location":"security/ci-scanning/","title":"CI Security Scanning","text":"<p>PulseStage implements comprehensive automated security scanning in our CI/CD pipeline to detect vulnerabilities before they reach production.</p>"},{"location":"security/ci-scanning/#overview","title":"Overview","text":"<p>Every push to <code>main</code> and every pull request triggers:</p> <ol> <li>Semgrep SAST - Static code analysis</li> <li>Trivy Filesystem - Dependency vulnerability scanning</li> <li>Trivy Image - Docker image vulnerability scanning</li> <li>SBOM Generation - Software Bill of Materials</li> </ol> <p>Fail Criteria: Builds fail on High or Critical severity findings.</p>"},{"location":"security/ci-scanning/#scanning-tools","title":"Scanning Tools","text":""},{"location":"security/ci-scanning/#1-semgrep-sast","title":"1. Semgrep (SAST)","text":"<p>What it scans: Source code for security vulnerabilities and code quality issues</p> <p>Rulesets: - <code>p/ci</code> - CI/CD best practices - <code>p/typescript</code> - TypeScript-specific security rules - <code>p/nodejs</code> - Node.js security patterns - <code>p/docker</code> - Dockerfile best practices - <code>p/security-audit</code> - Security audit rules</p> <p>Severity Levels: - ERROR (High/Critical) - Fails the build - WARNING (Medium) - Reported but doesn't fail - INFO (Low) - Informational only</p> <p>Example Output: <pre><code>\ud83d\udd0d Semgrep SAST Results:\n   High/Critical findings: 0\n\u2705 No high/critical security issues found\n</code></pre></p>"},{"location":"security/ci-scanning/#2-trivy-filesystem-scanner","title":"2. Trivy Filesystem Scanner","text":"<p>What it scans: Dependencies in <code>package.json</code>, <code>package-lock.json</code>, and other manifest files</p> <p>Checks for: - Known CVEs in npm packages - Outdated dependencies with security issues - Transitive dependency vulnerabilities</p> <p>Severity Levels: - CRITICAL - Fails the build - HIGH - Fails the build - MEDIUM - Reported only - LOW - Reported only</p> <p>Example Output: <pre><code>\ud83d\udd0d Trivy Filesystem Scan Results:\n   High/Critical vulnerabilities: 2\n\u274c Found 2 high/critical vulnerabilities in dependencies\n  - axios@0.21.1: Improper Input Validation (Severity: HIGH)\n  - express@4.17.1: Information Exposure (Severity: MEDIUM)\n</code></pre></p>"},{"location":"security/ci-scanning/#3-trivy-docker-image-scanner","title":"3. Trivy Docker Image Scanner","text":"<p>What it scans: Built Docker images (<code>api</code> and <code>web</code>)</p> <p>Checks for: - Vulnerabilities in base images (node:20-alpine, etc.) - Vulnerabilities in installed OS packages - Known CVEs in all image layers</p> <p>Matrix Strategy: Scans both <code>api</code> and <code>web</code> images separately</p> <p>Example Output: <pre><code>\ud83d\udd0d Trivy api Image Scan:\n   High/Critical vulnerabilities: 0\n\u2705 No high/critical vulnerabilities found in api image\n</code></pre></p>"},{"location":"security/ci-scanning/#4-sbom-generation-syft","title":"4. SBOM Generation (Syft)","text":"<p>What it generates: Software Bill of Materials in two formats</p> <p>Formats: - SPDX JSON - Industry standard format - CycloneDX JSON - OWASP standard format</p> <p>Retention: 90 days</p> <p>Contents: - All packages and dependencies - Version information - License information - Package relationships</p> <p>Example: <pre><code>\ud83d\udce6 SBOM Generated for api\n   Format: SPDX + CycloneDX JSON\n   Total packages: 342\n   Retention: 90 days\n</code></pre></p>"},{"location":"security/ci-scanning/#workflow-triggers","title":"Workflow Triggers","text":""},{"location":"security/ci-scanning/#automatic-triggers","title":"Automatic Triggers","text":"<ol> <li>Push to main - Full scan on every merge</li> <li>Pull requests - Scan before merge to catch issues early</li> <li>Daily schedule - Runs at 2 AM UTC to catch newly disclosed CVEs</li> </ol>"},{"location":"security/ci-scanning/#manual-trigger","title":"Manual Trigger","text":"<p>You can manually trigger scans from GitHub Actions UI: <pre><code>Actions \u2192 Security Scanning \u2192 Run workflow\n</code></pre></p>"},{"location":"security/ci-scanning/#viewing-results","title":"Viewing Results","text":""},{"location":"security/ci-scanning/#github-security-tab","title":"GitHub Security Tab","text":"<p>Trivy results are automatically uploaded to the GitHub Security tab:</p> <pre><code>Repository \u2192 Security \u2192 Code scanning\n</code></pre> <p>You'll see: - All detected vulnerabilities - Severity levels - Affected files/packages - Remediation guidance</p>"},{"location":"security/ci-scanning/#artifacts","title":"Artifacts","text":"<p>All scan results are uploaded as artifacts:</p> <pre><code>Actions \u2192 [Your workflow run] \u2192 Artifacts\n</code></pre> <p>Download: - <code>semgrep-results</code> - Semgrep SAST findings (JSON) - <code>trivy-fs-results</code> - Filesystem scan results (JSON) - <code>trivy-api-image</code> - API image scan results (JSON) - <code>trivy-web-image</code> - Web image scan results (JSON) - <code>sbom-api</code> - API SBOM (SPDX + CycloneDX) - <code>sbom-web</code> - Web SBOM (SPDX + CycloneDX)</p>"},{"location":"security/ci-scanning/#workflow-summary","title":"Workflow Summary","text":"<p>Each workflow run generates a summary visible in the workflow page:</p> <pre><code>\ud83c\udfaf CI Pipeline Results\n\nSecurity Scanning\n| Job                 | Status  |\n|---------------------|---------|\n| Semgrep SAST        | \u2705 success |\n| Trivy Filesystem    | \u2705 success |\n| Build &amp; Scan Images | \u2705 success |\n\n\ud83d\udce6 SBOM Artifacts\n- API component (SPDX + CycloneDX)\n- Web component (SPDX + CycloneDX)\n</code></pre>"},{"location":"security/ci-scanning/#local-testing","title":"Local Testing","text":"<p>Run security scans locally before pushing:</p>"},{"location":"security/ci-scanning/#semgrep","title":"Semgrep","text":"<pre><code># Install Semgrep\npip install semgrep\n\n# Run scan\nsemgrep --config=auto \\\n  --config=p/ci \\\n  --config=p/typescript \\\n  --config=p/nodejs \\\n  --severity=ERROR \\\n  --severity=WARNING\n</code></pre>"},{"location":"security/ci-scanning/#trivy-filesystem","title":"Trivy Filesystem","text":"<pre><code># Install Trivy (macOS)\nbrew install aquasecurity/trivy/trivy\n\n# Scan dependencies\ntrivy fs . --severity CRITICAL,HIGH\n</code></pre>"},{"location":"security/ci-scanning/#trivy-docker-images","title":"Trivy Docker Images","text":"<pre><code># Build images first\ndocker compose build\n\n# Scan API image\ntrivy image ama-app-api:latest --severity CRITICAL,HIGH\n\n# Scan Web image\ntrivy image ama-app-web:latest --severity CRITICAL,HIGH\n</code></pre>"},{"location":"security/ci-scanning/#generate-sbom-locally","title":"Generate SBOM Locally","text":"<pre><code># Install Syft (macOS)\nbrew install syft\n\n# Build image\ndocker compose build api\n\n# Generate SBOM\nsyft ama-app-api:latest -o spdx-json=sbom-api.spdx.json\nsyft ama-app-api:latest -o cyclonedx-json=sbom-api.cyclonedx.json\n</code></pre>"},{"location":"security/ci-scanning/#handling-vulnerabilities","title":"Handling Vulnerabilities","text":""},{"location":"security/ci-scanning/#when-a-scan-fails","title":"When a Scan Fails","text":"<ol> <li>Review the findings in the workflow logs</li> <li>Assess the risk - Is it a real vulnerability in your context?</li> <li>Remediate:</li> <li>Update dependencies: <code>npm update</code></li> <li>Fix code issues identified by Semgrep</li> <li>Update base Docker images</li> </ol>"},{"location":"security/ci-scanning/#false-positives","title":"False Positives","text":"<p>If a finding is a false positive:</p> <p>Semgrep: Add inline comment <pre><code>// nosemgrep: rule-id-here\nconst example = dangerousOperation();\n</code></pre></p> <p>Trivy: Add to <code>.trivyignore</code> <pre><code>CVE-2021-12345  # False positive - not applicable\n</code></pre></p>"},{"location":"security/ci-scanning/#accepted-risks","title":"Accepted Risks","text":"<p>Document accepted risks in: - <code>.trivyignore</code> with justification - Security documentation - Architecture Decision Records (ADRs)</p>"},{"location":"security/ci-scanning/#best-practices","title":"Best Practices","text":"<ol> <li>Fix vulnerabilities promptly - Don't let them accumulate</li> <li>Review dependencies regularly - Run <code>npm audit</code> locally</li> <li>Keep base images updated - Update Node.js base image quarterly</li> <li>Monitor security advisories - Subscribe to security mailing lists</li> <li>Test locally before pushing - Catch issues early</li> </ol>"},{"location":"security/ci-scanning/#configuration-files","title":"Configuration Files","text":"<ul> <li><code>.semgrepignore</code> - Patterns to exclude from Semgrep scans</li> <li><code>.trivyignore</code> - CVEs to ignore (with justification)</li> <li><code>.github/workflows/ci.yaml</code> - CI workflow configuration</li> </ul>"},{"location":"security/ci-scanning/#related-documentation","title":"Related Documentation","text":"<ul> <li>Security Overview</li> <li>Security Headers</li> <li>RBAC</li> <li>Audit Logging</li> </ul>"},{"location":"security/overview/","title":"Security Overview","text":"<p>PulseStage implements comprehensive security measures to protect your data, ensure proper access control, and maintain compliance with security best practices.</p>"},{"location":"security/overview/#security-philosophy","title":"Security Philosophy","text":"<p>PulseStage follows a defense-in-depth approach with multiple layers of security:</p> <ol> <li>Authentication &amp; Authorization: Strong identity verification and role-based access control</li> <li>Data Protection: Encryption, isolation, and secure transmission</li> <li>Attack Prevention: CSRF protection, rate limiting, and input validation</li> <li>Audit &amp; Compliance: Comprehensive logging and traceability</li> <li>Secure Development: SAST, vulnerability scanning, and secure defaults</li> </ol>"},{"location":"security/overview/#key-security-features","title":"Key Security Features","text":""},{"location":"security/overview/#role-based-access-control-rbac","title":"\ud83d\udd10 Role-Based Access Control (RBAC)","text":"<p>Fine-grained permissions system with five roles: - Viewer: Read-only access - Member: Can submit and upvote questions - Moderator: Can answer and manage questions (team-scoped) - Admin: Full administrative access (global) - Owner: Complete system control (global)</p> <p>Learn more about RBAC \u2192</p>"},{"location":"security/overview/#audit-logging","title":"\ud83d\udccb Audit Logging","text":"<p>Comprehensive, append-only audit logs track: - Actor (who performed the action) - Action (what was done) - Entity (what was affected) - Timestamp (when it occurred) - Before/After state (what changed) - IP address &amp; User-Agent (context)</p> <p>Learn more about audit logging \u2192</p>"},{"location":"security/overview/#security-headers","title":"\ud83d\udee1\ufe0f Security Headers","text":"<p>HTTP security headers protect against common attacks: - Content Security Policy (CSP): Prevents XSS attacks - X-Frame-Options: Prevents clickjacking - X-Content-Type-Options: Prevents MIME sniffing - Strict-Transport-Security (HSTS): Enforces HTTPS - Referrer-Policy: Controls referrer information</p> <p>Learn more about security headers \u2192</p>"},{"location":"security/overview/#session-management","title":"\ud83c\udf6a Session Management","text":"<p>Secure session handling with: - HttpOnly cookies: Prevents JavaScript access - Secure flag: HTTPS-only transmission - SameSite=Lax: CSRF protection - Session expiration: Automatic timeout - CSRF tokens: Double-submit cookie pattern</p> <p>Learn more about sessions \u2192</p>"},{"location":"security/overview/#rate-limiting","title":"\ud83d\udea6 Rate Limiting","text":"<p>Protect against abuse with: - Per-user rate limits (100 req/min) - Per-IP rate limits (1000 req/min) - Redis-backed sliding window - Graceful degradation to memory store</p> <p>Learn more about rate limiting \u2192</p>"},{"location":"security/overview/#ci-security-scanning","title":"\ud83d\udd0d CI Security Scanning","text":"<p>Automated security scanning in CI/CD: - Semgrep: Static Application Security Testing (SAST) - Trivy: Dependency and Docker image scanning - SBOM (Syft): Software Bill of Materials - MDN HTTP Observatory: Security header validation</p> <p>Learn more about CI scanning \u2192</p>"},{"location":"security/overview/#security-architecture","title":"Security Architecture","text":""},{"location":"security/overview/#multi-tenant-isolation","title":"Multi-Tenant Isolation","text":"<p>Every tenant has complete data isolation: - Separate database records per tenant - Tenant-scoped queries enforced at the ORM level - No cross-tenant data leakage</p>"},{"location":"security/overview/#team-scoping","title":"Team Scoping","text":"<p>Questions and permissions are team-scoped: - Users can belong to multiple teams - Different roles per team - Moderators limited to their assigned teams - Admins have global access</p>"},{"location":"security/overview/#permission-enforcement","title":"Permission Enforcement","text":"<p>Permissions are enforced at multiple levels:</p> <ol> <li>Middleware: Request-level authorization</li> <li>API Routes: Endpoint-specific checks</li> <li>Database Queries: Tenant and team filtering</li> <li>Frontend: UI elements hidden based on permissions</li> </ol>"},{"location":"security/overview/#common-security-scenarios","title":"Common Security Scenarios","text":""},{"location":"security/overview/#user-submits-a-question","title":"User Submits a Question","text":"<ol> <li>Authentication: User identity verified via SSO</li> <li>Authorization: User must be a member+ role</li> <li>CSRF Check: Token validated for POST request</li> <li>Rate Limit: Request counted against user limit</li> <li>Input Validation: Question body validated (Zod schema)</li> <li>Tenant Isolation: Question saved with user's tenant ID</li> <li>Team Scoping: Question associated with selected team</li> <li>Audit Log: Action recorded with actor, entity, timestamp</li> </ol>"},{"location":"security/overview/#moderator-answers-a-question","title":"Moderator Answers a Question","text":"<ol> <li>Authentication: Moderator identity verified</li> <li>Authorization: User must have <code>question.answer</code> permission</li> <li>Team Check: Question must be in moderator's team</li> <li>CSRF Check: Token validated</li> <li>Input Validation: Answer validated</li> <li>Database Update: Question marked as answered</li> <li>Audit Log: Answer action recorded</li> <li>SSE Broadcast: Real-time update sent to team</li> </ol>"},{"location":"security/overview/#admin-views-audit-logs","title":"Admin Views Audit Logs","text":"<ol> <li>Authentication: Admin identity verified</li> <li>Authorization: User must have <code>admin.access</code> permission</li> <li>Tenant Filter: Only see logs for their tenant</li> <li>Team Filter: Admins see all teams, moderators see their teams</li> <li>Pagination: Logs paginated for performance</li> <li>Export: Can download as CSV/JSON</li> </ol>"},{"location":"security/overview/#security-best-practices","title":"Security Best Practices","text":""},{"location":"security/overview/#for-administrators","title":"For Administrators","text":"<p>Admin Security Checklist</p> <ul> <li>\u2705 Limit admin roles to trusted users</li> <li>\u2705 Review audit logs weekly</li> <li>\u2705 Export and backup data regularly</li> <li>\u2705 Use strong SSO authentication</li> <li>\u2705 Monitor rate limit violations</li> <li>\u2705 Keep dependencies updated</li> <li>\u2705 Review moderation statistics for anomalies</li> </ul>"},{"location":"security/overview/#for-developers","title":"For Developers","text":"<p>Developer Security Checklist</p> <ul> <li>\u2705 Always use parameterized queries (Prisma ORM)</li> <li>\u2705 Validate all input with Zod schemas</li> <li>\u2705 Enforce RBAC on all endpoints</li> <li>\u2705 Include tenant/team filters in queries</li> <li>\u2705 Log security-relevant actions</li> <li>\u2705 Use CSRF protection on state-changing endpoints</li> <li>\u2705 Run security scans before pushing</li> </ul>"},{"location":"security/overview/#for-moderators","title":"For Moderators","text":"<p>Moderator Security Checklist</p> <ul> <li>\u2705 Don't share your credentials</li> <li>\u2705 Log out from shared devices</li> <li>\u2705 Report suspicious questions</li> <li>\u2705 Use strong passwords with your SSO provider</li> <li>\u2705 Review questions before answering</li> </ul>"},{"location":"security/overview/#compliance-standards","title":"Compliance &amp; Standards","text":"<p>PulseStage follows industry security standards:</p> <ul> <li>OWASP Top 10: Mitigations for common web vulnerabilities</li> <li>CWE/SANS Top 25: Protection against dangerous software errors</li> <li>Mozilla Observatory: A+ security header configuration</li> <li>NIST: Secure development lifecycle practices</li> </ul>"},{"location":"security/overview/#threat-model","title":"Threat Model","text":""},{"location":"security/overview/#threats-mitigated","title":"Threats Mitigated","text":"<p>\u2705 SQL Injection: Prisma ORM with parameterized queries \u2705 XSS (Cross-Site Scripting): CSP, input validation, output encoding \u2705 CSRF (Cross-Site Request Forgery): Double-submit cookie tokens \u2705 Clickjacking: X-Frame-Options: DENY \u2705 MIME Sniffing: X-Content-Type-Options: nosniff \u2705 Man-in-the-Middle: HSTS, Secure cookies \u2705 Brute Force: Rate limiting \u2705 Privilege Escalation: RBAC enforcement \u2705 Data Leakage: Multi-tenant and team isolation \u2705 Dependency Vulnerabilities: Trivy scanning, automated updates  </p>"},{"location":"security/overview/#out-of-scope","title":"Out of Scope","text":"<p>\u26a0\ufe0f DDoS Protection: Use a CDN or load balancer (e.g., Cloudflare) \u26a0\ufe0f Physical Security: Secure your hosting infrastructure \u26a0\ufe0f SSO Provider Security: Ensure your identity provider is secure \u26a0\ufe0f Insider Threats: Implement organizational policies  </p>"},{"location":"security/overview/#incident-response","title":"Incident Response","text":"<p>If you discover a security vulnerability:</p> <ol> <li>Do NOT create a public GitHub issue</li> <li>Email security concerns to the repository maintainers</li> <li>Include details: steps to reproduce, impact, affected versions</li> <li>Wait for acknowledgment before public disclosure</li> </ol> <p>We aim to respond within 48 hours and issue patches promptly.</p>"},{"location":"security/overview/#security-roadmap","title":"Security Roadmap","text":"<p>Future security enhancements:</p> <ul> <li> OpenTelemetry tracing for security events</li> <li> Advanced threat detection (AI-based moderation)</li> <li> Additional compliance certifications (SOC 2, ISO 27001)</li> <li> Encrypted data at rest (database-level encryption)</li> <li> Advanced anomaly detection</li> <li> Two-factor authentication (2FA) support</li> </ul>"},{"location":"security/overview/#security-metrics","title":"Security Metrics","text":"<p>Track your security posture:</p> <ul> <li>Vulnerability Scan Results: CI/CD pipeline reports</li> <li>Audit Log Volume: Track administrative actions</li> <li>Rate Limit Violations: Monitor abuse attempts</li> <li>Failed Authentication Attempts: Track in logs</li> <li>Uptime &amp; Availability: Monitor with health checks</li> </ul> <p>View CI Security Scanning \u2192</p>"},{"location":"security/overview/#need-help","title":"Need Help?","text":"<ul> <li>RBAC questions: See RBAC Documentation</li> <li>Audit logs: See Audit Logging</li> <li>Security headers: See Security Headers</li> <li>Report vulnerabilities: Contact maintainers privately</li> <li>General security: Check GitHub Security Advisories</li> </ul>"},{"location":"security/overview/#next-steps","title":"Next Steps","text":"<p>Explore detailed security documentation:</p> <ul> <li>RBAC &amp; Permissions - Understand role-based access control</li> <li>Audit Logging - Track administrative actions</li> <li>Security Headers - HTTP security configuration</li> <li>Session Management - Secure session handling</li> <li>CI Security Scanning - Automated vulnerability detection</li> </ul>"},{"location":"security/rate-limiting/","title":"Rate Limiting","text":"<p>Documentation coming soon...</p>"},{"location":"security/rbac/","title":"Role-Based Access Control (RBAC)","text":"<p>PulseStage implements a comprehensive RBAC system with five distinct roles and team-scoped permissions.</p>"},{"location":"security/rbac/#roles","title":"Roles","text":""},{"location":"security/rbac/#viewer","title":"Viewer","text":"<ul> <li>Access: Read-only, anonymous access</li> <li>Permissions:</li> <li>Browse questions (open and answered)</li> <li>Use search functionality</li> <li>View team information</li> </ul> <p>Use Case: Public access, unauthenticated users</p>"},{"location":"security/rbac/#member","title":"Member","text":"<ul> <li>Access: Basic authenticated user</li> <li>Permissions:</li> <li>All Viewer permissions</li> <li>Submit questions</li> <li>Upvote questions</li> <li>Manage profile preferences</li> </ul> <p>Use Case: All employees, authenticated users</p>"},{"location":"security/rbac/#moderator","title":"Moderator","text":"<ul> <li>Access: Team-scoped moderation</li> <li>Permissions:</li> <li>All Member permissions  </li> <li>Answer questions (in assigned teams only)</li> <li>Add/remove tags on questions</li> <li>Access presentation mode</li> <li>View admin panel (limited to their teams)</li> </ul> <p>Use Case: Team leads, department managers</p>"},{"location":"security/rbac/#admin","title":"Admin","text":"<ul> <li>Access: Global administrative access</li> <li>Permissions:</li> <li>All Moderator permissions (across all teams)</li> <li>Create and manage teams</li> <li>Create and manage tags</li> <li>Access audit logs</li> <li>Export data</li> <li>View all questions across teams</li> </ul> <p>Use Case: Platform administrators, IT team</p>"},{"location":"security/rbac/#owner","title":"Owner","text":"<ul> <li>Access: Complete system control</li> <li>Permissions:</li> <li>All Admin permissions</li> <li>Manage user roles</li> <li>System configuration</li> </ul> <p>Use Case: System owners, executive admins</p>"},{"location":"security/rbac/#permission-matrix","title":"Permission Matrix","text":"Permission Viewer Member Moderator Admin Owner View questions \u2705 \u2705 \u2705 \u2705 \u2705 Submit questions \u274c \u2705 \u2705 \u2705 \u2705 Upvote questions \u274c \u2705 \u2705 \u2705 \u2705 Answer questions \u274c \u274c \u2705 (team-scoped) \u2705 \u2705 Tag questions \u274c \u274c \u2705 (team-scoped) \u2705 \u2705 Presentation mode \u274c \u274c \u2705 (team-scoped) \u2705 \u2705 Create teams \u274c \u274c \u274c \u2705 \u2705 Manage tags \u274c \u274c \u274c \u2705 \u2705 View audit logs \u274c \u274c \u274c \u2705 \u2705 Export data \u274c \u274c \u274c \u2705 \u2705 Manage roles \u274c \u274c \u274c \u274c \u2705"},{"location":"security/rbac/#team-scoping","title":"Team Scoping","text":"<p>Moderators have team-scoped permissions, meaning:</p> <ul> <li>They can only answer questions from teams they moderate</li> <li>They can only tag questions in their assigned teams</li> <li>They only see questions from their teams in the admin panel</li> <li>Presentation mode is limited to their teams</li> </ul> <p>Example: - Mike (Moderator of \"People\" team) can:   - \u2705 Answer questions in the People team   - \u274c Answer questions in the Engineering team   - \u2705 See \"Admin Panel\" link when viewing People team questions   - \u274c See \"Admin Panel\" link when viewing Engineering team questions</p>"},{"location":"security/rbac/#implementation","title":"Implementation","text":""},{"location":"security/rbac/#backend-enforcement","title":"Backend Enforcement","text":"<p>Permissions are enforced at the API level using middleware:</p> <pre><code>// Team-scoped permission check\napp.post(\"/questions/:id/respond\", \n  extractQuestionTeam(), \n  requirePermission('question.answer', { teamIdParam: 'teamId' }), \n  async (req, res) =&gt; {\n    // Handler\n  }\n);\n</code></pre>"},{"location":"security/rbac/#frontend-ui","title":"Frontend UI","text":"<p>The UI dynamically shows/hides features based on: 1. User's role in the current team 2. Current team context (which team page they're viewing)</p>"},{"location":"security/rbac/#audit-logging","title":"Audit Logging","text":"<p>All permission checks (grants and denials) are logged to the audit log for compliance and security monitoring.</p>"},{"location":"security/rbac/#testing","title":"Testing","text":"<p>RBAC is comprehensively tested with 20+ test scenarios covering: - Team-scoped permissions - Role hierarchy - Cross-tenant isolation - Permission denials</p> <p>See api/src/rbac.test.ts for implementation.</p>"},{"location":"security/rbac/#best-practices","title":"Best Practices","text":"<ol> <li>Principle of Least Privilege: Assign the minimum role needed</li> <li>Team Scoping: Use moderators for department-level moderation</li> <li>Audit Regularly: Review audit logs for suspicious activity</li> <li>Limit Owners: Only assign owner role to trusted administrators</li> </ol>"},{"location":"security/rbac/#related-documentation","title":"Related Documentation","text":"<ul> <li>Security Overview</li> <li>Audit Logging</li> <li>Admin Guide: Roles &amp; Permissions</li> </ul>"},{"location":"security/security-headers/","title":"Security Headers","text":"<p>PulseStage implements comprehensive HTTP security headers using Helmet middleware to protect against common web vulnerabilities.</p>"},{"location":"security/security-headers/#overview","title":"Overview","text":"<p>All API responses include strict security headers following Mozilla Observatory best practices to achieve an A grade or higher.</p>"},{"location":"security/security-headers/#implemented-headers","title":"Implemented Headers","text":""},{"location":"security/security-headers/#content-security-policy-csp","title":"Content-Security-Policy (CSP)","text":"<p>Strict Content Security Policy to prevent XSS attacks:</p> <pre><code>default-src 'self';\nscript-src 'self';\nstyle-src 'self' 'unsafe-inline';\nobject-src 'none';\nbase-uri 'self';\nform-action 'self';\nframe-ancestors 'none';\nupgrade-insecure-requests;\n</code></pre> <p>Features: - No inline scripts allowed (prevents XSS) - Only load resources from same origin - Prevents framing (clickjacking protection) - Automatically upgrades HTTP to HTTPS requests</p>"},{"location":"security/security-headers/#x-frame-options","title":"X-Frame-Options","text":"<pre><code>X-Frame-Options: DENY\n</code></pre> <p>Prevents the site from being embedded in iframes, protecting against clickjacking attacks.</p>"},{"location":"security/security-headers/#x-content-type-options","title":"X-Content-Type-Options","text":"<pre><code>X-Content-Type-Options: nosniff\n</code></pre> <p>Prevents browsers from MIME-type sniffing, reducing exposure to drive-by download attacks.</p>"},{"location":"security/security-headers/#referrer-policy","title":"Referrer-Policy","text":"<pre><code>Referrer-Policy: strict-origin-when-cross-origin\n</code></pre> <p>Only sends the origin (not full URL) in the Referer header for cross-origin requests, protecting user privacy.</p>"},{"location":"security/security-headers/#strict-transport-security-hsts","title":"Strict-Transport-Security (HSTS)","text":"<pre><code>Strict-Transport-Security: max-age=31536000; includeSubDomains; preload\n</code></pre> <p>Forces browsers to only use HTTPS connections for 1 year. Only enabled in production behind HTTPS.</p>"},{"location":"security/security-headers/#cross-origin-opener-policy","title":"Cross-Origin-Opener-Policy","text":"<pre><code>Cross-Origin-Opener-Policy: same-origin\n</code></pre> <p>Ensures that top-level documents do not share a browsing context group with cross-origin documents.</p>"},{"location":"security/security-headers/#cross-origin-resource-policy","title":"Cross-Origin-Resource-Policy","text":"<pre><code>Cross-Origin-Resource-Policy: same-origin\n</code></pre> <p>Prevents other origins from reading the resource.</p>"},{"location":"security/security-headers/#permissions-policy","title":"Permissions-Policy","text":"<pre><code>Permissions-Policy: camera=(), microphone=(), geolocation=(), payment=(), usb=(), magnetometer=(), gyroscope=(), accelerometer=()\n</code></pre> <p>Disables access to sensitive browser APIs and device features.</p>"},{"location":"security/security-headers/#additional-headers","title":"Additional Headers","text":"<ul> <li><code>Origin-Agent-Cluster: ?1</code> - Provides origin-keyed agent cluster isolation</li> <li><code>X-DNS-Prefetch-Control: off</code> - Disables DNS prefetching</li> <li><code>X-Download-Options: noopen</code> - Prevents IE from executing downloads</li> <li><code>X-Powered-By: (removed)</code> - Hides server technology</li> </ul>"},{"location":"security/security-headers/#development-vs-production","title":"Development vs Production","text":""},{"location":"security/security-headers/#production-mode","title":"Production Mode","text":"<p>Strict security headers with: - No eval() in JavaScript - HSTS enabled - Strict CSP - All security headers enforced</p>"},{"location":"security/security-headers/#development-mode","title":"Development Mode","text":"<p>Relaxed headers for local development with Vite: - Allows <code>'unsafe-eval'</code> for Vite HMR - Allows WebSocket connections (ws:, wss:) - HSTS disabled (no HTTPS required) - All other security headers remain strict</p>"},{"location":"security/security-headers/#testing-security-headers","title":"Testing Security Headers","text":""},{"location":"security/security-headers/#automated-testing-recommended","title":"Automated Testing (Recommended)","text":"<p>We integrate MDN HTTP Observatory directly into our test suite:</p> <pre><code>cd api\nnpm test observatory.test.ts\n</code></pre> <p>This runs 6 automated security tests including: - Overall security grade and score - Content-Security-Policy validation - X-Content-Type-Options check - X-Frame-Options check - Referrer-Policy check - Detailed test result logging</p> <p>Development Mode Results: - Expected Grade: C (relaxed CSP for Vite HMR) - Expected Score: 50/100 - Acceptable: 7/10 tests passing</p> <p>Production Mode Expectations: - Target Grade: A or better - Target Score: 70+/100 - All critical security tests passing</p>"},{"location":"security/security-headers/#local-testing","title":"Local Testing","text":"<p>Check headers locally:</p> <pre><code>curl -I http://localhost:5001/health\n</code></pre>"},{"location":"security/security-headers/#mozilla-http-observatory-manual","title":"Mozilla HTTP Observatory (Manual)","text":"<p>Test your deployed site manually:</p> <ol> <li>Visit: https://developer.mozilla.org/en-US/observatory/</li> <li>Enter your site URL</li> <li>Run the scan</li> <li>Target score: A grade or higher</li> </ol>"},{"location":"security/security-headers/#securityheaderscom","title":"SecurityHeaders.com","text":"<p>Alternative testing tool:</p> <ol> <li>Visit: https://securityheaders.com/</li> <li>Enter your site URL</li> <li>Check for all security headers</li> </ol>"},{"location":"security/security-headers/#implementation","title":"Implementation","text":"<p>The security headers are implemented in <code>api/src/middleware/securityHeaders.ts</code> using Helmet:</p> <pre><code>import helmet from 'helmet';\n\nexport function securityHeadersMiddleware(): RequestHandler {\n  return helmet({\n    contentSecurityPolicy: {\n      directives: {\n        defaultSrc: [\"'self'\"],\n        scriptSrc: [\"'self'\"],\n        // ... more directives\n      },\n    },\n    // ... more options\n  });\n}\n</code></pre> <p>Applied in <code>api/src/app.ts</code>:</p> <pre><code>// Production\napp.use(securityHeadersMiddleware());\napp.use(apiSecurityHeaders());\n\n// Development\napp.use(developmentSecurityHeaders());\napp.use(apiSecurityHeaders());\n</code></pre>"},{"location":"security/security-headers/#testing","title":"Testing","text":""},{"location":"security/security-headers/#unit-tests","title":"Unit Tests","text":"<p>Comprehensive test suite in <code>api/src/middleware/securityHeaders.test.ts</code>:</p> <ul> <li>17 security header tests</li> <li>Verifies all headers are present</li> <li>Checks header values match expectations</li> <li>Tests CSP directives</li> <li>Validates Mozilla Observatory requirements</li> </ul> <pre><code>cd api\nnpm test securityHeaders.test.ts\n</code></pre>"},{"location":"security/security-headers/#observatory-integration-tests","title":"Observatory Integration Tests","text":"<p>Automated MDN HTTP Observatory scanning in <code>api/src/middleware/observatory.test.ts</code>:</p> <ul> <li>6 automated Observatory tests</li> <li>Runs actual security scanner against local server</li> <li>Validates grade and score</li> <li>Tests specific security headers</li> <li>Provides detailed results</li> </ul> <pre><code>cd api\nnpm test observatory.test.ts\n</code></pre>"},{"location":"security/security-headers/#run-all-security-tests","title":"Run All Security Tests","text":"<pre><code>cd api\nnpm test -- --grep \"security|observatory\"\n</code></pre>"},{"location":"security/security-headers/#best-practices","title":"Best Practices","text":"<ol> <li>Never disable security headers in production</li> <li>Always test after deployment with Observatory</li> <li>Monitor CSP violations in production logs</li> <li>Keep Helmet up to date for latest security patches</li> <li>Review headers quarterly as security best practices evolve</li> </ol>"},{"location":"security/security-headers/#related-documentation","title":"Related Documentation","text":"<ul> <li>Security Overview</li> <li>Mozilla Observatory</li> <li>Helmet Documentation</li> <li>CSP Reference</li> </ul>"},{"location":"security/sessions/","title":"Sessions","text":"<p>Documentation coming soon...</p>"},{"location":"user-guide/overview/","title":"User Guide Overview","text":"<p>Welcome to the PulseStage user guide! This section covers everything you need to know to participate effectively in Q&amp;A sessions.</p>"},{"location":"user-guide/overview/#what-is-pulsestage","title":"What is PulseStage?","text":"<p>PulseStage is an open-source Q&amp;A platform designed for town halls, all-hands meetings, and live events. It enables participants to submit questions, upvote the most important ones, and see real-time responses from moderators.</p>"},{"location":"user-guide/overview/#key-features-for-users","title":"Key Features for Users","text":""},{"location":"user-guide/overview/#submit-questions","title":"\ud83d\udcdd Submit Questions","text":"<p>Ask questions anonymously or with your name attached. Questions are visible to your team and can be answered during live sessions.</p> <p>Learn more about submitting questions \u2192</p>"},{"location":"user-guide/overview/#upvote-questions","title":"\ud83d\udc4d Upvote Questions","text":"<p>Help prioritize which questions get answered first by upvoting the ones that matter most to you. The most upvoted questions rise to the top.</p> <p>Learn more about upvoting \u2192</p>"},{"location":"user-guide/overview/#search-filter","title":"\ud83d\udd0d Search &amp; Filter","text":"<p>Find questions by keyword, tag, date range, or status. Use advanced filters to narrow down questions to specific topics or teams.</p> <p>Learn more about search &amp; filtering \u2192</p>"},{"location":"user-guide/overview/#team-context","title":"\ud83d\udc65 Team Context","text":"<p>All questions are scoped to teams, ensuring relevant discussions for your department or group.</p> <p>Learn more about teams \u2192</p>"},{"location":"user-guide/overview/#profile-preferences","title":"\ud83c\udfa8 Profile &amp; Preferences","text":"<p>Customize your experience with theme preferences and profile settings.</p> <p>Learn more about your profile \u2192</p>"},{"location":"user-guide/overview/#getting-started","title":"Getting Started","text":"<ol> <li>Log in with your SSO credentials</li> <li>Select your team from the dropdown menu</li> <li>Browse open questions or submit your own</li> <li>Upvote questions you want answered</li> <li>Check answered questions to see responses</li> </ol>"},{"location":"user-guide/overview/#quick-tips","title":"Quick Tips","text":"<p>Maximize Your Impact</p> <ul> <li>Be specific: Clear, focused questions get better answers</li> <li>Search first: Your question might already be answered</li> <li>Upvote wisely: Help surface the most important questions</li> <li>Check tags: Use tags to find related questions</li> </ul> <p>Real-Time Updates</p> <p>PulseStage updates in real-time! When questions are answered or upvoted, you'll see changes immediately without refreshing.</p>"},{"location":"user-guide/overview/#need-help","title":"Need Help?","text":"<ul> <li>For moderation features: See the Moderator Guide</li> <li>For administration: See the Admin Guide</li> <li>For technical issues: Check our GitHub Issues</li> </ul>"},{"location":"user-guide/overview/#next-steps","title":"Next Steps","text":"<p>Ready to get started? Check out these guides:</p> <ul> <li>Submitting Questions - Learn how to ask effective questions</li> <li>Upvoting - Understand how voting works</li> <li>Search &amp; Browse - Find relevant questions quickly</li> </ul>"},{"location":"user-guide/profile/","title":"Profile","text":"<p>Documentation coming soon...</p>"},{"location":"user-guide/search-browse/","title":"Search &amp; Browse","text":"<p>PulseStage offers powerful search and filtering capabilities to help you find relevant questions quickly.</p>"},{"location":"user-guide/search-browse/#quick-search","title":"Quick Search","text":""},{"location":"user-guide/search-browse/#basic-search","title":"Basic Search","text":"<p>The search bar is available on both Open Questions and Answered Questions pages.</p> <p>Features: - Full-text search - Searches both question body and answers - Prefix matching - \"mob\" finds \"mobile\", \"rem\" finds \"remote\" - Multi-word search - \"remote work\" finds questions containing both words - Debounced input - Results update 300ms after you stop typing (smooth, no lag)</p> <p>Example searches: <pre><code>remote          \u2192 Finds \"remote work\", \"working remotely\", etc.\nbenefits        \u2192 Finds questions about benefits packages\nwork life       \u2192 Finds \"work-life balance\" questions\n</code></pre></p>"},{"location":"user-guide/search-browse/#how-it-works","title":"How It Works","text":"<p>PulseStage uses PostgreSQL full-text search with:</p> <ul> <li>GIN indexes for fast searching</li> <li>English stemming - \"running\" matches \"run\", \"runs\", \"ran\"</li> <li>Relevance ranking - Best matches appear first</li> <li>Prefix operators - Substring matching for partial words</li> </ul>"},{"location":"user-guide/search-browse/#advanced-filters","title":"Advanced Filters","text":"<p>Click \"Advanced Filters\" to access additional filtering options.</p>"},{"location":"user-guide/search-browse/#filter-by-tag","title":"Filter by Tag","text":"<p>Select a tag from the dropdown to show only questions with that tag.</p> <p>Use cases: - Find all \"Important\" questions - See questions \"Currently Presenting\" - Filter by topic tags like \"Policy\" or \"Benefits\"</p>"},{"location":"user-guide/search-browse/#filter-by-date-range","title":"Filter by Date Range","text":"<p>From Date: Show questions created on or after this date To Date: Show questions created on or before this date</p> <p>Date handling: - Inclusive of both start and end dates - Full day included (00:00:00 to 23:59:59) - Works correctly across timezones</p> <p>Use cases: - Questions from last week - Questions submitted before last town hall - Questions from a specific event or meeting</p>"},{"location":"user-guide/search-browse/#filter-by-team","title":"Filter by Team","text":"<p>Automatically applied when viewing a team page (e.g., <code>/engineering/open</code>).</p> <p>Switch teams using the team dropdown in the navigation bar.</p>"},{"location":"user-guide/search-browse/#combined-filters","title":"Combined Filters","text":"<p>All filters work together:</p> <p>Example: Search for \"remote\" + Tag: \"Policy\" + From: Last month - Shows only policy questions about remote work from the last month</p>"},{"location":"user-guide/search-browse/#clear-filters","title":"Clear Filters","text":"<p>The \"Clear All Filters\" button appears when filters are active.</p> <p>Shows count: \"Clear All Filters (3)\" indicating how many filters are applied.</p>"},{"location":"user-guide/search-browse/#browsing-questions","title":"Browsing Questions","text":""},{"location":"user-guide/search-browse/#open-questions-page","title":"Open Questions Page","text":"<p>Default View: - Shows all OPEN (unanswered) questions - Sorted by upvotes (highest first) - Real-time updates as new questions arrive</p> <p>Includes: - Question body - Upvote count with button - Tags (color-coded) - Team name - Creation date - Upvote button (if you haven't upvoted yet)</p>"},{"location":"user-guide/search-browse/#answered-questions-page","title":"Answered Questions Page","text":"<p>Default View: - Shows all ANSWERED questions - Grouped by week - Sorted by date (most recent first)</p> <p>Card View Features: - Question preview (truncated) - Answer preview (truncated) - Click to expand and read full Q&amp;A - Tags visible - Upvote count - Answered date</p>"},{"location":"user-guide/search-browse/#question-details","title":"Question Details","text":"<p>Click any question to see:</p> <ul> <li>Full question text</li> <li>Complete answer (if answered)</li> <li>All tags</li> <li>Upvote count</li> <li>Submission and answer timestamps</li> <li>Team information</li> </ul>"},{"location":"user-guide/search-browse/#search-tips","title":"Search Tips","text":""},{"location":"user-guide/search-browse/#finding-specific-topics","title":"Finding Specific Topics","text":"<ol> <li>Use specific keywords - \"remote policy\" better than \"remote\"</li> <li>Try variations - \"benefit\", \"benefits\", \"comp\", \"compensation\"</li> <li>Use tags - Filter by tag after searching</li> </ol>"},{"location":"user-guide/search-browse/#discovering-trending-topics","title":"Discovering Trending Topics","text":"<ol> <li>Sort by upvotes - Default on Open Questions</li> <li>Check recent - Use date filter for last week</li> <li>Browse by team - See what each team is asking</li> </ol>"},{"location":"user-guide/search-browse/#research-before-submitting","title":"Research Before Submitting","text":"<ol> <li>Search first - Your question might already be asked</li> <li>Upvote existing - Better than duplicate submissions</li> <li>Check answered - Question might already have an answer</li> </ol>"},{"location":"user-guide/search-browse/#keyboard-shortcuts","title":"Keyboard Shortcuts","text":"<p>While browsing:</p> <ul> <li>Type to search - Focus is on search bar by default</li> <li>Click question - Open details/answer modal</li> <li>Click upvote - Upvote without opening modal</li> </ul>"},{"location":"user-guide/search-browse/#real-time-updates","title":"Real-Time Updates","text":"<p>Search results and filtered views update in real-time:</p> <ul> <li>New questions appear automatically if they match filters</li> <li>Upvote counts update live</li> <li>Tags added by moderators appear instantly</li> <li>Status changes (answered questions removed from open view)</li> </ul> <p>No need to refresh the page!</p>"},{"location":"user-guide/search-browse/#mobile-experience","title":"Mobile Experience","text":"<p>All search and filter features work on mobile:</p> <ul> <li>Responsive filters - Stack vertically on small screens</li> <li>Touch-friendly - Large tap targets for upvotes and filters</li> <li>Collapsible filters - Advanced filters hidden by default to save space</li> </ul>"},{"location":"user-guide/search-browse/#related-pages","title":"Related Pages","text":"<ul> <li>Submitting Questions</li> <li>Upvoting</li> <li>Teams</li> </ul>"},{"location":"user-guide/submitting-questions/","title":"Submitting Questions","text":"<p>Documentation coming soon...</p>"},{"location":"user-guide/teams/","title":"Teams","text":"<p>Documentation coming soon...</p>"},{"location":"user-guide/upvoting/","title":"Upvoting","text":"<p>Documentation coming soon...</p>"}]}