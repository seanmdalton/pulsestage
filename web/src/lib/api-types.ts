/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/health': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Health check
     * @description Check if the API is running
     */
    get: operations['getHealth']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/questions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List questions
     * @description Get a list of questions filtered by status
     */
    get: operations['getQuestions']
    put?: never
    /**
     * Submit a question
     * @description Create a new anonymous question (rate limited to 10 per minute per IP)
     */
    post: operations['createQuestion']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/questions/{id}/upvote': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Upvote a question
     * @description Increment the upvote count for a question (rate limited to 10 per minute per IP)
     */
    post: operations['upvoteQuestion']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/questions/{id}/respond': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Respond to a question
     * @description Admin endpoint to respond to an open question and mark it as answered
     */
    post: operations['respondToQuestion']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    Question: {
      /**
       * Format: uuid
       * @description Unique question identifier
       */
      id: string
      /** @description Question text */
      body: string
      /** @description Number of upvotes */
      upvotes: number
      /**
       * @description Question status
       * @enum {string}
       */
      status: 'OPEN' | 'ANSWERED'
      /** @description Admin response (null if not answered) */
      responseText?: string | null
      /**
       * Format: date-time
       * @description Timestamp when question was answered
       */
      respondedAt?: string | null
      /**
       * Format: date-time
       * @description Question creation timestamp
       */
      createdAt: string
      /**
       * Format: date-time
       * @description Last update timestamp
       */
      updatedAt: string
    }
    /** @example {
     *       "body": "What inspired you to build this project?"
     *     } */
    CreateQuestionRequest: {
      /** @description Question text */
      body: string
    }
    /** @example {
     *       "response": "I wanted to create a simple platform for community engagement."
     *     } */
    RespondRequest: {
      /** @description Admin response text */
      response: string
    }
    /** @example {
     *       "ok": true,
     *       "service": "ama-api"
     *     } */
    HealthResponse: {
      /** @description Health status */
      ok: boolean
      /** @description Service name */
      service: string
    }
    /** @example {
     *       "error": "Validation failed"
     *     } */
    Error: {
      /** @description Error message */
      error: string
      /** @description Additional error details */
      message?: string
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  getHealth: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description API is healthy */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HealthResponse']
        }
      }
    }
  }
  getQuestions: {
    parameters: {
      query?: {
        /** @description Filter by question status */
        status?: 'open' | 'answered'
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description List of questions */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Question'][]
        }
      }
    }
  }
  createQuestion: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateQuestionRequest']
      }
    }
    responses: {
      /** @description Question created successfully */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Question']
        }
      }
      /** @description Invalid request body */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Rate limit exceeded */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          /** @example {
           *       "error": "Too many requests",
           *       "message": "Rate limit exceeded. Maximum 10 requests per minute."
           *     } */
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  upvoteQuestion: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Question ID */
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Question upvoted successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Question']
        }
      }
      /** @description Question not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          /** @example {
           *       "error": "Not found"
           *     } */
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Rate limit exceeded */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  respondToQuestion: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Question ID */
        id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RespondRequest']
      }
    }
    responses: {
      /** @description Question answered successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Question']
        }
      }
      /** @description Invalid request body */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unauthorized - Invalid or missing admin key */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          /** @example {
           *       "error": "Unauthorized: Invalid or missing admin key"
           *     } */
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Question not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
}
