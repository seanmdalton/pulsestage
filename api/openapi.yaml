openapi: 3.0.3
info:
  title: PulseStage API
  description: PulseStage API - Ask Me Anything (AMA) platform for organizational engagement
  version: 0.1.0
  contact:
    name: PulseStage
servers:
  - url: http://localhost:3000
    description: Local development server

tags:
  - name: Health
    description: Health check endpoints
  - name: SSE
    description: Server-Sent Events for real-time updates
  - name: Questions
    description: Question management endpoints
  - name: Admin
    description: Protected admin endpoints
  - name: Teams
    description: Team management endpoints
  - name: Tags
    description: Tag management endpoints
  - name: Export
    description: Data export endpoints
  - name: Users
    description: User management and profile endpoints

components:
  securitySchemes:
    AdminKey:
      type: apiKey
      in: header
      name: x-admin-key
      description: Admin authentication key
    AdminSession:
      type: apiKey
      in: cookie
      name: connect.sid
      description: Admin session cookie
    MockSSO:
      type: apiKey
      in: header
      name: x-mock-sso-user
      description: Mock SSO authentication header (development only)
    TenantHeader:
      type: apiKey
      in: header
      name: x-tenant-id
      description: Tenant context header (defaults to 'default')

  schemas:
    Question:
      type: object
      required:
        - id
        - body
        - upvotes
        - status
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          description: Unique question identifier
        body:
          type: string
          minLength: 3
          maxLength: 2000
          description: Question text
        upvotes:
          type: integer
          minimum: 0
          description: Number of upvotes
        status:
          type: string
          enum: [OPEN, ANSWERED]
          description: Question status
        responseText:
          type: string
          nullable: true
          description: Admin response (null if not answered)
        respondedAt:
          type: string
          format: date-time
          nullable: true
          description: Timestamp when question was answered
        createdAt:
          type: string
          format: date-time
          description: Question creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
        teamId:
          type: string
          format: uuid
          nullable: true
          description: Associated team ID
        team:
          type: object
          nullable: true
          description: Associated team information
          properties:
            id:
              type: string
              format: uuid
            name:
              type: string
            slug:
              type: string
            description:
              type: string
              nullable: true
            isActive:
              type: boolean
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time
        tags:
          type: array
          description: Associated tags
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
              questionId:
                type: string
                format: uuid
              tagId:
                type: string
                format: uuid
              createdAt:
                type: string
                format: date-time
              tag:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  name:
                    type: string
                  description:
                    type: string
                    nullable: true
                  color:
                    type: string
                  createdAt:
                    type: string
                    format: date-time
                  updatedAt:
                    type: string
                    format: date-time
        isPinned:
          type: boolean
          default: false
          description: Whether the question is pinned
        pinnedBy:
          type: string
          nullable: true
          description: User ID who pinned the question
        pinnedAt:
          type: string
          format: date-time
          nullable: true
          description: Timestamp when question was pinned
        isFrozen:
          type: boolean
          default: false
          description: Whether the question is frozen (cannot receive upvotes/responses)
        frozenBy:
          type: string
          nullable: true
          description: User ID who froze the question
        frozenAt:
          type: string
          format: date-time
          nullable: true
          description: Timestamp when question was frozen
        reviewedBy:
          type: string
          nullable: true
          description: Last moderator who reviewed this question
        reviewedAt:
          type: string
          format: date-time
          nullable: true
          description: Timestamp of last review

    Team:
      type: object
      required:
        - id
        - name
        - slug
        - isActive
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          description: Unique team identifier
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: Team display name
        slug:
          type: string
          minLength: 1
          maxLength: 50
          description: URL-friendly team identifier
        description:
          type: string
          maxLength: 500
          nullable: true
          description: Team description
        isActive:
          type: boolean
          description: Whether the team is active
        createdAt:
          type: string
          format: date-time
          description: Team creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
        _count:
          type: object
          description: Question count for the team
          properties:
            questions:
              type: integer

    Tag:
      type: object
      required:
        - id
        - name
        - color
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          description: Unique tag identifier
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: Tag name
        description:
          type: string
          maxLength: 500
          nullable: true
          description: Tag description
        color:
          type: string
          pattern: '^#[0-9A-F]{6}$'
          description: Hex color code for the tag
        createdAt:
          type: string
          format: date-time
          description: Tag creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp

    User:
      type: object
      required:
        - id
        - email
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          description: Unique user identifier
        email:
          type: string
          format: email
          description: User email address
        name:
          type: string
          nullable: true
          description: User display name
        ssoId:
          type: string
          nullable: true
          description: SSO provider identifier
        createdAt:
          type: string
          format: date-time
          description: User creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp

    TeamMembership:
      type: object
      required:
        - userId
        - teamId
        - role
        - createdAt
        - updatedAt
      properties:
        userId:
          type: string
          format: uuid
          description: User identifier
        teamId:
          type: string
          format: uuid
          description: Team identifier
        role:
          type: string
          enum: [member, admin, owner]
          description: User role in the team
        createdAt:
          type: string
          format: date-time
          description: Membership creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp

    TeamWithMembership:
      allOf:
        - $ref: '#/components/schemas/Team'
        - type: object
          properties:
            membership:
              $ref: '#/components/schemas/TeamMembership'

    UserPreferences:
      type: object
      required:
        - userId
        - favoriteTeams
        - defaultTeamId
        - createdAt
        - updatedAt
      properties:
        userId:
          type: string
          format: uuid
          description: User identifier
        favoriteTeams:
          type: array
          items:
            type: string
            format: uuid
          description: Array of favorite team IDs
        defaultTeamId:
          type: string
          format: uuid
          nullable: true
          description: Default team ID
        createdAt:
          type: string
          format: date-time
          description: Preferences creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp

    UserTeamsResponse:
      type: object
      required:
        - teams
        - favorites
        - defaultTeam
      properties:
        teams:
          type: array
          items:
            $ref: '#/components/schemas/TeamWithMembership'
        favorites:
          type: array
          items:
            type: string
            format: uuid
          description: Array of favorite team IDs
        defaultTeam:
          $ref: '#/components/schemas/Team'
          nullable: true

    CreateQuestionRequest:
      type: object
      required:
        - body
      properties:
        body:
          type: string
          minLength: 3
          maxLength: 2000
          description: Question text
        teamId:
          type: string
          format: uuid
          description: Team ID to associate the question with
      example:
        body: 'What inspired you to build this project?'
        teamId: '550e8400-e29b-41d4-a716-446655440000'

    RespondRequest:
      type: object
      required:
        - response
      properties:
        response:
          type: string
          minLength: 1
          maxLength: 10000
          description: Admin response text
      example:
        response: 'I wanted to create a simple platform for community engagement.'

    CreateTeamRequest:
      type: object
      required:
        - name
        - slug
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: Team display name
        slug:
          type: string
          minLength: 1
          maxLength: 50
          pattern: '^[a-z0-9-]+$'
          description: URL-friendly team identifier
        description:
          type: string
          maxLength: 500
          description: Team description
      example:
        name: 'Engineering Team'
        slug: 'engineering'
        description: 'Software development and engineering'

    CreateTagRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: Tag name
        description:
          type: string
          maxLength: 500
          description: Tag description
        color:
          type: string
          pattern: '^#[0-9A-F]{6}$'
          description: Hex color code for the tag
      example:
        name: 'Currently Presenting'
        description: 'Question is currently being presented'
        color: '#10B981'

    AddTagRequest:
      type: object
      required:
        - tagId
      properties:
        tagId:
          type: string
          format: uuid
          description: Tag ID to add to the question
      example:
        tagId: '550e8400-e29b-41d4-a716-446655440000'

    AdminLoginRequest:
      type: object
      required:
        - adminKey
      properties:
        adminKey:
          type: string
          description: Admin authentication key
      example:
        adminKey: 'your-admin-key-here'

    AdminLoginResponse:
      type: object
      required:
        - success
        - message
      properties:
        success:
          type: boolean
          description: Login success status
        message:
          type: string
          description: Login result message
      example:
        success: true
        message: 'Login successful'

    HealthResponse:
      type: object
      required:
        - ok
        - service
      properties:
        ok:
          type: boolean
          description: Health status
        service:
          type: string
          description: Service name
      example:
        ok: true
        service: 'ama-api'

    Error:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          description: Error message
        message:
          type: string
          description: Additional error details
      example:
        error: 'Validation failed'

paths:
  /health:
    get:
      tags:
        - Health
      summary: Health check
      description: Check if the API is running
      operationId: getHealth
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

  /events:
    get:
      tags:
        - SSE
      summary: Server-Sent Events stream
      description: |
        Subscribe to real-time updates for a specific tenant.
        Streams events for question creation, upvotes, answers, and tag changes.
        Includes periodic heartbeat to keep connection alive.
      operationId: getSSEStream
      parameters:
        - name: tenant
          in: query
          description: Tenant slug to subscribe to
          required: true
          schema:
            type: string
            example: default
      responses:
        '200':
          description: SSE stream established
          content:
            text/event-stream:
              schema:
                type: string
                description: |
                  Stream of SSE events in format: data: {JSON}\n\n
                  Event types: connected, heartbeat, question:created, 
                  question:upvoted, question:answered, question:tagged, question:untagged
        '404':
          description: Tenant not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /questions:
    get:
      tags:
        - Questions
      summary: List questions
      description: Get a list of questions filtered by status and team
      operationId: getQuestions
      parameters:
        - name: status
          in: query
          description: Filter by question status
          required: false
          schema:
            type: string
            enum: [open, answered]
            default: open
        - name: teamId
          in: query
          description: Filter by team ID
          required: false
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of questions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Question'

    post:
      tags:
        - Questions
      summary: Submit a question
      description: Create a new anonymous question (rate limited to 10 per minute per IP)
      operationId: createQuestion
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateQuestionRequest'
      responses:
        '201':
          description: Question created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: 'Too many requests'
                message: 'Rate limit exceeded. Maximum 10 requests per minute.'

  /questions/{id}/upvote:
    post:
      tags:
        - Questions
      summary: Upvote a question
      description: Increment the upvote count for a question (rate limited to 10 per minute per IP)
      operationId: upvoteQuestion
      parameters:
        - name: id
          in: path
          required: true
          description: Question ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Question upvoted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
        '404':
          description: Question not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: 'Not found'
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /questions/{id}/respond:
    post:
      tags:
        - Admin
      summary: Respond to a question
      description: Admin endpoint to respond to an open question and mark it as answered
      operationId: respondToQuestion
      security:
        - AdminSession: []
      parameters:
        - name: id
          in: path
          required: true
          description: Question ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RespondRequest'
      responses:
        '200':
          description: Question answered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - Invalid or missing admin key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: 'Unauthorized: Invalid or missing admin key'
        '404':
          description: Question not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /questions/{id}/pin:
    post:
      tags:
        - Admin
      summary: Pin a question
      description: Pin a question to keep it at the top of the list
      operationId: pinQuestion
      security:
        - AdminSession: []
      parameters:
        - name: id
          in: path
          required: true
          description: Question ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Question pinned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Question not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /questions/{id}/freeze:
    post:
      tags:
        - Admin
      summary: Freeze a question
      description: Freeze a question to prevent further upvotes or responses
      operationId: freezeQuestion
      security:
        - AdminSession: []
      parameters:
        - name: id
          in: path
          required: true
          description: Question ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Question frozen successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Question not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/moderation-queue:
    get:
      tags:
        - Admin
      summary: Get moderation queue
      description: Get paginated list of questions for moderation with filtering options
      operationId: getModerationQueue
      security:
        - AdminSession: []
      parameters:
        - name: status
          in: query
          required: false
          description: Filter by question status
          schema:
            type: string
            enum: [OPEN, ANSWERED, all]
        - name: teamId
          in: query
          required: false
          description: Filter by team ID
          schema:
            type: string
            format: uuid
        - name: isPinned
          in: query
          required: false
          description: Filter by pinned status
          schema:
            type: boolean
        - name: isFrozen
          in: query
          required: false
          description: Filter by frozen status
          schema:
            type: boolean
        - name: needsReview
          in: query
          required: false
          description: Filter for questions that need review
          schema:
            type: boolean
        - name: limit
          in: query
          required: false
          description: Maximum number of results
          schema:
            type: integer
            default: 100
        - name: offset
          in: query
          required: false
          description: Number of results to skip
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: Moderation queue retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  questions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Question'
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/bulk-tag:
    post:
      tags:
        - Admin
      summary: Bulk tag questions
      description: Add a tag to multiple questions at once
      operationId: bulkTagQuestions
      security:
        - AdminSession: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - questionIds
                - tagId
              properties:
                questionIds:
                  type: array
                  items:
                    type: string
                    format: uuid
                  description: Array of question IDs to tag
                tagId:
                  type: string
                  format: uuid
                  description: Tag ID to add to questions
      responses:
        '200':
          description: Questions tagged successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  tagged:
                    type: integer
                    description: Number of questions tagged
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/bulk-action:
    post:
      tags:
        - Admin
      summary: Bulk action on questions
      description: Perform bulk actions (pin, freeze, delete) on multiple questions
      operationId: bulkActionQuestions
      security:
        - AdminSession: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - questionIds
                - action
              properties:
                questionIds:
                  type: array
                  items:
                    type: string
                    format: uuid
                  description: Array of question IDs to act upon
                action:
                  type: string
                  enum: [pin, freeze, delete]
                  description: Action to perform
      responses:
        '200':
          description: Bulk action completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  affected:
                    type: integer
                    description: Number of questions affected
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/stats/moderation:
    get:
      tags:
        - Admin
      summary: Get moderation statistics
      description: Get moderation metrics and statistics with optional filtering
      operationId: getModerationStats
      security:
        - AdminSession: []
      parameters:
        - name: teamId
          in: query
          required: false
          description: Filter by team ID
          schema:
            type: string
            format: uuid
        - name: startDate
          in: query
          required: false
          description: Start date for date range filter (YYYY-MM-DD)
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          required: false
          description: End date for date range filter (YYYY-MM-DD)
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Moderation statistics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  overall:
                    type: object
                    properties:
                      totalQuestionsReviewed:
                        type: integer
                      totalQuestionsPinned:
                        type: integer
                      totalQuestionsFrozen:
                        type: integer
                      totalQuestionsAnswered:
                        type: integer
                  byModerator:
                    type: array
                    items:
                      type: object
                      properties:
                        moderatorId:
                          type: string
                        moderatorName:
                          type: string
                        questionsReviewed:
                          type: integer
                        questionsAnswered:
                          type: integer
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/login:
    post:
      tags:
        - Admin
      summary: Admin login
      description: Authenticate as admin using admin key
      operationId: adminLogin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminLoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminLoginResponse'
        '401':
          description: Invalid admin key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/logout:
    post:
      tags:
        - Admin
      summary: Admin logout
      description: Logout admin session
      operationId: adminLogout
      security:
        - AdminSession: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminLoginResponse'

  /teams:
    get:
      tags:
        - Teams
      summary: List teams
      description: Get all active teams
      operationId: getTeams
      responses:
        '200':
          description: List of teams
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Team'

    post:
      tags:
        - Teams
      summary: Create team
      description: Create a new team (admin only)
      operationId: createTeam
      security:
        - AdminSession: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTeamRequest'
      responses:
        '201':
          description: Team created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Team with this slug already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tags:
    get:
      tags:
        - Tags
      summary: List tags
      description: Get all tags (admin only)
      operationId: getTags
      security:
        - AdminSession: []
      responses:
        '200':
          description: List of tags
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'

    post:
      tags:
        - Tags
      summary: Create tag
      description: Create a new tag (admin only)
      operationId: createTag
      security:
        - AdminSession: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTagRequest'
      responses:
        '201':
          description: Tag created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Tag with this name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /questions/{id}/tags:
    post:
      tags:
        - Tags
      summary: Add tag to question
      description: Add a tag to a question (admin only)
      operationId: addTagToQuestion
      security:
        - AdminSession: []
      parameters:
        - name: id
          in: path
          required: true
          description: Question ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddTagRequest'
      responses:
        '200':
          description: Tag added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '404':
          description: Question or tag not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /questions/{id}/tags/{tagId}:
    delete:
      tags:
        - Tags
      summary: Remove tag from question
      description: Remove a tag from a question (admin only)
      operationId: removeTagFromQuestion
      security:
        - AdminSession: []
      parameters:
        - name: id
          in: path
          required: true
          description: Question ID
          schema:
            type: string
            format: uuid
        - name: tagId
          in: path
          required: true
          description: Tag ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Tag removed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '404':
          description: Tag not found on question
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /questions/search:
    get:
      tags:
        - Questions
      summary: Search questions
      description: Search questions by text content
      operationId: searchQuestions
      parameters:
        - name: q
          in: query
          required: true
          description: Search query
          schema:
            type: string
            minLength: 2
            maxLength: 200
        - name: teamId
          in: query
          required: false
          description: Filter by team ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Question'
        '400':
          description: Invalid search query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/export/preview:
    get:
      tags:
        - Export
      summary: Get export preview
      description: Preview data that will be exported with current filters (admin only)
      security:
        - AdminSession: []
      parameters:
        - name: teamId
          in: query
          schema:
            type: string
            format: uuid
          description: Team ID filter (use 'all' for all teams)
        - name: status
          in: query
          schema:
            type: string
            enum: [open, answered, both]
          description: Question status filter
        - name: startDate
          in: query
          schema:
            type: string
            format: date
          description: Start date for filtering
        - name: endDate
          in: query
          schema:
            type: string
            format: date
          description: End date for filtering
        - name: minUpvotes
          in: query
          schema:
            type: integer
            minimum: 0
          description: Minimum upvotes filter
        - name: maxUpvotes
          in: query
          schema:
            type: integer
            minimum: 0
          description: Maximum upvotes filter
        - name: tagIds
          in: query
          schema:
            type: array
            items:
              type: string
              format: uuid
          description: Tag IDs to filter by
        - name: hasResponse
          in: query
          schema:
            type: string
            enum: [true, false]
          description: Filter by response status
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
          description: Maximum number of preview items
      responses:
        '200':
          description: Export preview data
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    description: Total number of questions matching filters
                  preview:
                    type: array
                    items:
                      $ref: '#/components/schemas/Question'
                    description: Sample questions for preview
                  filters:
                    type: object
                    description: Applied filters
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /admin/export/download:
    get:
      tags:
        - Export
      summary: Download export data
      description: Download filtered questions as CSV or JSON (admin only)
      security:
        - AdminSession: []
      parameters:
        - name: teamId
          in: query
          schema:
            type: string
            format: uuid
          description: Team ID filter (use 'all' for all teams)
        - name: status
          in: query
          schema:
            type: string
            enum: [open, answered, both]
          description: Question status filter
        - name: startDate
          in: query
          schema:
            type: string
            format: date
          description: Start date for filtering
        - name: endDate
          in: query
          schema:
            type: string
            format: date
          description: End date for filtering
        - name: minUpvotes
          in: query
          schema:
            type: integer
            minimum: 0
          description: Minimum upvotes filter
        - name: maxUpvotes
          in: query
          schema:
            type: integer
            minimum: 0
          description: Maximum upvotes filter
        - name: tagIds
          in: query
          schema:
            type: array
            items:
              type: string
              format: uuid
          description: Tag IDs to filter by
        - name: hasResponse
          in: query
          schema:
            type: string
            enum: [true, false]
          description: Filter by response status
        - name: format
          in: query
          required: true
          schema:
            type: string
            enum: [csv, json]
          description: Export format
      responses:
        '200':
          description: Export file
          content:
            text/csv:
              schema:
                type: string
                description: CSV file with question data
            application/json:
              schema:
                type: object
                properties:
                  exportedAt:
                    type: string
                    format: date-time
                  filters:
                    type: object
                  totalCount:
                    type: integer
                  questions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Question'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '400':
          description: Invalid format or parameters
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/me:
    get:
      tags:
        - Users
      summary: Get current user profile
      description: Retrieve the current authenticated user's profile information
      security:
        - MockSSO: []
      responses:
        '200':
          description: User profile information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/me/questions:
    get:
      tags:
        - Users
      summary: Get user's submitted questions
      description: Retrieve all questions submitted by the current user
      security:
        - MockSSO: []
      responses:
        '200':
          description: User's submitted questions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Question'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/me/teams:
    get:
      tags:
        - Users
      summary: Get user's team memberships
      description: Retrieve all teams the current user is a member of with their roles
      security:
        - MockSSO: []
      responses:
        '200':
          description: User's team memberships and preferences
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserTeamsResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/me/preferences:
    put:
      tags:
        - Users
      summary: Update user preferences
      description: Update user preferences including favorite teams and default team
      security:
        - MockSSO: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                favoriteTeams:
                  type: array
                  items:
                    type: string
                    format: uuid
                  description: Array of favorite team IDs
                defaultTeamId:
                  type: string
                  format: uuid
                  nullable: true
                  description: Default team ID
      responses:
        '200':
          description: Preferences updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPreferences'
        '400':
          description: Invalid request body
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/me/teams/{teamId}/favorite:
    post:
      tags:
        - Users
      summary: Toggle team favorite status
      description: Add or remove a team from user's favorites
      security:
        - MockSSO: []
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Team ID to toggle favorite status
      responses:
        '200':
          description: Favorite status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  isFavorite:
                    type: boolean
                    description: New favorite status
        '400':
          description: Invalid team ID
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Team not found
        '500':
          $ref: '#/components/responses/InternalServerError'
