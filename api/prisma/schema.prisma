generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum QuestionStatus {
  OPEN
  ANSWERED
}

// Multi-tenancy: Tenant model
model Tenant {
  id        String   @id @default(uuid())
  slug      String   @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  teams             Team[]
  questions         Question[]
  tags              Tag[]
  users             User[]
  userPreferences   UserPreferences[]
  auditLogs         AuditLog[]
  settings          TenantSettings?
}

// Tenant-level settings (configurable via Admin UI)
model TenantSettings {
  id        String   @id @default(uuid())
  tenantId  String   @unique
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // JSON field for flexibility - stores all configuration
  // Structure: { questions: {...}, users: {...}, security: {...}, branding: {...}, features: {...} }
  settings  Json     @default("{}")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([tenantId])
}

model Team {
  id          String     @id @default(uuid())
  tenantId    String
  name        String
  slug        String
  description String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // Relationships
  tenant      Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  questions   Question[]
  memberships TeamMembership[]
  userPreferences UserPreferences[] // Teams that users have set as default
  
  @@unique([tenantId, slug])
  @@index([tenantId])
}

model Question {
  id           String         @id @default(uuid())
  tenantId     String
  body         String
  upvotes      Int            @default(0) // Legacy field - will be calculated from Upvote records
  status       QuestionStatus @default(OPEN)
  responseText String?
  respondedAt  DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  teamId       String?
  team         Team?          @relation(fields: [teamId], references: [id], onDelete: SetNull)
  authorId     String?        // User who submitted the question
  author       User?          @relation(fields: [authorId], references: [id], onDelete: SetNull)
  
  // Moderation fields
  isPinned     Boolean        @default(false)
  pinnedBy     String?        // User who pinned the question
  pinnedAt     DateTime?
  isFrozen     Boolean        @default(false) // Frozen questions can't receive new upvotes/responses
  frozenBy     String?        // User who froze the question
  frozenAt     DateTime?
  reviewedBy   String?        // Last moderator who reviewed this question
  reviewedAt   DateTime?
  
  // Note: search_vector column exists in database (tsvector type)
  // but is not included in Prisma schema as it's entirely managed by PostgreSQL triggers
  
  // Relationships
  tenant       Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tags         QuestionTag[]
  upvoteRecords Upvote[]      // Individual upvote records
  
  @@index([tenantId])
  @@index([tenantId, status])
  @@index([tenantId, teamId])
  @@index([isPinned])
  @@index([reviewedBy])
}

model Tag {
  id          String        @id @default(uuid())
  tenantId    String
  name        String
  description String?
  color       String        @default("#3B82F6") // Default blue color
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relationships
  tenant      Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  questions   QuestionTag[]
  
  @@unique([tenantId, name])
  @@index([tenantId])
}

model QuestionTag {
  id         String   @id @default(uuid())
  questionId String
  tagId      String
  createdAt  DateTime @default(now())
  
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@unique([questionId, tagId])
}

// User management for SSO integration
model User {
  id        String   @id @default(uuid())
  tenantId  String
  email     String
  name      String?
  ssoId     String?  // For SSO provider integration
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  tenant          Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  teamMemberships TeamMembership[]
  preferences     UserPreferences?
  questions       Question[]      // Questions submitted by this user
  upvotes         Upvote[]        // Upvotes given by this user
  auditLogs       AuditLog[]      // Audit logs for actions performed by this user
  
  @@unique([tenantId, email])
  @@unique([tenantId, ssoId])
  @@index([tenantId])
}

// Team membership with roles
model TeamMembership {
  id        String   @id @default(uuid())
  userId    String
  teamId    String
  role      String   @default("member") // member, moderator, admin, owner
  createdAt DateTime @default(now())
  
  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  @@unique([userId, teamId])
}

// User preferences and settings
model UserPreferences {
  id                   String   @id @default(uuid())
  tenantId             String
  userId               String   @unique
  favoriteTeams        Json     @default("[]") // Array of team slugs
  defaultTeamId        String?
  emailNotifications   Boolean  @default(true) // Receive email notifications
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  // Relationships
  tenant      Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  defaultTeam Team?  @relation(fields: [defaultTeamId], references: [id], onDelete: SetNull)
  
  @@index([tenantId])
}

// Upvote tracking for questions
model Upvote {
  id         String   @id @default(uuid())
  questionId String
  userId     String?  // null for anonymous users (if we support them later)
  createdAt  DateTime @default(now())
  
  // Relationships
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user       User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@unique([questionId, userId]) // Prevent duplicate upvotes per user per question
  @@index([questionId]) // Index for faster queries
}

// Audit Log (append-only, immutable record of all admin actions)
model AuditLog {
  id          String   @id @default(uuid())
  tenantId    String
  userId      String?  // User who performed the action (null for system actions)
  action      String   // e.g., "question.answer", "team.create", "tag.add"
  entityType  String   // e.g., "Question", "Team", "Tag"
  entityId    String?  // ID of the affected entity
  before      Json?    // State before the action (for updates/deletes)
  after       Json?    // State after the action (for creates/updates)
  ipAddress   String?  // IP address of the requester
  userAgent   String?  // User agent string
  metadata    Json?    // Additional context (e.g., team name, question body preview)
  createdAt   DateTime @default(now())
  
  // Relationships
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user   User?  @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  // Indexes for efficient querying
  @@index([tenantId, createdAt(sort: Desc)]) // Most common query: tenant's recent logs
  @@index([tenantId, userId])
  @@index([tenantId, action])
  @@index([tenantId, entityType, entityId])
}
